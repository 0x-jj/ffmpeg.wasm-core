This file contains any messages produced by compilers while
running configure, to aid debugging if configure makes a mistake.

It was created by lame configure 3.100, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  $ ./configure --prefix=/src/lame-3.100/../build

## --------- ##
## Platform. ##
## --------- ##

hostname = e83452b16e67
uname -m = x86_64
uname -r = 5.0.0-31-generic
uname -s = Linux
uname -v = #33~18.04.1-Ubuntu SMP Tue Oct 1 10:20:39 UTC 2019

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = unknown
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /emsdk_portable/emscripten/tag-1.38.45/system/bin
PATH: /emsdk_portable
PATH: /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin
PATH: /emsdk_portable/node/8.9.1_64bit/bin
PATH: /emsdk_portable/emscripten/tag-1.38.45
PATH: /emsdk_portable/binaryen/tag-1.38.45_64bit_binaryen/bin
PATH: /usr/local/sbin
PATH: /usr/local/bin
PATH: /usr/sbin
PATH: /usr/bin
PATH: /sbin
PATH: /bin


## ----------- ##
## Core tests. ##
## ----------- ##

configure:2594: checking build system type
configure:2608: result: x86_64-unknown-linux-gnu
configure:2628: checking host system type
configure:2641: result: x86_64-unknown-linux-gnu
configure:2678: checking for a BSD-compatible install
configure:2746: result: /usr/bin/install -c
configure:2757: checking whether build environment is sane
configure:2812: result: yes
configure:2963: checking for a thread-safe mkdir -p
configure:3002: result: /bin/mkdir -p
configure:3009: checking for gawk
configure:3039: result: no
configure:3009: checking for mawk
configure:3025: found /usr/bin/mawk
configure:3036: result: mawk
configure:3047: checking whether make sets $(MAKE)
configure:3069: result: yes
configure:3098: checking whether make supports nested variables
configure:3115: result: yes
configure:3246: checking whether to enable maintainer-specific portions of Makefiles
configure:3255: result: no
configure:3275: checking for style of include used by make
configure:3303: result: GNU
configure:3380: checking for gcc
configure:3407: result: /emsdk_portable/emscripten/tag-1.38.45/emcc
configure:3636: checking for C compiler version
configure:3645: /emsdk_portable/emscripten/tag-1.38.45/emcc --version >&5
emcc (Emscripten gcc/clang-like replacement) 1.38.45 ((unknown revision))
Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)
This is free and open source software under the MIT license.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  
configure:3656: $? = 0
configure:3645: /emsdk_portable/emscripten/tag-1.38.45/emcc -v >&5
emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 1.38.45
clang version 6.0.1 (https://github.com/emscripten-core/emscripten-fastcomp-clang 98df4be387dde3e3918fa5bbb5fc43e1a0e1daac) (https://github.com/emscripten-core/emscripten-fastcomp 6c7e775325067e33fa60611e619a8b987b6d0c35) (emscripten 1.38.44 : 1.38.31)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/6
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/6.3.0
Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/6.3.0
Candidate multilib: .;@m64
Selected multilib: .;@m64
... rest of stderr output deleted ...
configure:3656: $? = 0
configure:3645: /emsdk_portable/emscripten/tag-1.38.45/emcc -V >&5
shared:ERROR: no input files
note that input files without a known suffix are ignored, make sure your input files end with one of: ('.c', '.C', '.i', '.cpp', '.cxx', '.cc', '.c++', '.CPP', '.CXX', '.CC', '.C++', '.ii', '.m', '.mi', '.mm', '.mii', '/dev/null', '.bc', '.o', '.obj', '.lo', '.dylib', '.so', '.a', '.ll', '.h', '.hxx', '.hpp', '.hh', '.H', '.HXX', '.HPP', '.HH')
configure:3656: $? = 1
configure:3645: /emsdk_portable/emscripten/tag-1.38.45/emcc -qversion >&5
shared:ERROR: no input files
note that input files without a known suffix are ignored, make sure your input files end with one of: ('.c', '.C', '.i', '.cpp', '.cxx', '.cc', '.c++', '.CPP', '.CXX', '.CC', '.C++', '.ii', '.m', '.mi', '.mm', '.mii', '/dev/null', '.bc', '.o', '.obj', '.lo', '.dylib', '.so', '.a', '.ll', '.h', '.hxx', '.hpp', '.hh', '.H', '.HXX', '.HPP', '.HH')
configure:3656: $? = 1
configure:3676: checking whether the C compiler works
configure:3698: /emsdk_portable/emscripten/tag-1.38.45/emcc    conftest.c  >&5
configure:3702: $? = 0
configure:3750: result: yes
configure:3753: checking for C compiler default output file name
configure:3755: result: a.out
configure:3761: checking for suffix of executables
configure:3768: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:3772: $? = 0
configure:3794: result: 
configure:3816: checking whether we are cross compiling
configure:3824: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:3828: $? = 0
configure:3835: ./conftest
configure:3839: $? = 0
configure:3854: result: no
configure:3859: checking for suffix of object files
configure:3881: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:3885: $? = 0
configure:3906: result: o
configure:3910: checking whether we are using the GNU C compiler
configure:3929: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:3929: $? = 0
configure:3938: result: yes
configure:3947: checking whether /emsdk_portable/emscripten/tag-1.38.45/emcc accepts -g
configure:3967: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g  conftest.c >&5
configure:3967: $? = 0
configure:4008: result: yes
configure:4025: checking for /emsdk_portable/emscripten/tag-1.38.45/emcc option to accept ISO C89
configure:4088: /emsdk_portable/emscripten/tag-1.38.45/emcc  -c -g -O2  conftest.c >&5
configure:4088: $? = 0
configure:4101: result: none needed
configure:4126: checking whether /emsdk_portable/emscripten/tag-1.38.45/emcc understands -c and -o together
configure:4148: /emsdk_portable/emscripten/tag-1.38.45/emcc -c conftest.c -o conftest2.o
configure:4151: $? = 0
configure:4148: /emsdk_portable/emscripten/tag-1.38.45/emcc -c conftest.c -o conftest2.o
configure:4151: $? = 0
configure:4163: result: yes
configure:4182: checking dependency style of /emsdk_portable/emscripten/tag-1.38.45/emcc
configure:4293: result: gcc3
configure:4314: checking how to run the C preprocessor
configure:4345: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
configure:4345: $? = 0
configure:4359: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
conftest.c:11:10: fatal error: 'ac_nonexistent.h' file not found
#include <ac_nonexistent.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.
configure:4359: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4384: result: /emsdk_portable/emscripten/tag-1.38.45/emcc -E
configure:4404: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
configure:4404: $? = 0
configure:4418: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
conftest.c:11:10: fatal error: 'ac_nonexistent.h' file not found
#include <ac_nonexistent.h>
         ^~~~~~~~~~~~~~~~~~
1 error generated.
configure:4418: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| /* end confdefs.h.  */
| #include <ac_nonexistent.h>
configure:4447: checking for grep that handles long lines and -e
configure:4505: result: /bin/grep
configure:4510: checking for egrep
configure:4572: result: /bin/grep -E
configure:4577: checking for ANSI C header files
configure:4597: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4597: $? = 0
configure:4670: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest -g -O2   conftest.c  >&5
configure:4670: $? = 0
configure:4670: ./conftest
configure:4670: $? = 0
configure:4681: result: yes
configure:4694: checking for sys/types.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for sys/stat.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for stdlib.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for string.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for memory.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for strings.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for inttypes.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for stdint.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4694: checking for unistd.h
configure:4694: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4694: $? = 0
configure:4694: result: yes
configure:4707: checking minix/config.h usability
configure:4707: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
conftest.c:54:10: fatal error: 'minix/config.h' file not found
#include <minix/config.h>
         ^~~~~~~~~~~~~~~~
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c -O2 -mllvm -disable-llvm-optzns -g conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:4707: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <minix/config.h>
configure:4707: result: no
configure:4707: checking minix/config.h presence
configure:4707: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
conftest.c:21:10: fatal error: 'minix/config.h' file not found
#include <minix/config.h>
         ^~~~~~~~~~~~~~~~
1 error generated.
configure:4707: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <minix/config.h>
configure:4707: result: no
configure:4707: checking for minix/config.h
configure:4707: result: no
configure:4728: checking whether it is safe to define __EXTENSIONS__
configure:4746: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:4746: $? = 0
configure:4753: result: yes
configure:4768: checking for library containing strerror
configure:4799: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest -g -O2   conftest.c  >&5
conftest.c:33:6: warning: incompatible redeclaration of library function 'strerror' [-Wincompatible-library-redeclaration]
char strerror ();
     ^
conftest.c:33:6: note: 'strerror' is a builtin with type 'char *(int)'
1 warning generated.
warning: asm2wasm adding operands in call from $_main to $_strerror (this is likely due to undefined behavior in C, like defining a function one way and calling it in another, which is important to fix)
configure:4799: $? = 0
configure:4816: result: none required
configure:4877: checking how to print strings
configure:4904: result: printf
configure:4925: checking for a sed that does not truncate output
configure:4989: result: /bin/sed
configure:5007: checking for fgrep
configure:5069: result: /bin/grep -F
configure:5104: checking for ld used by /emsdk_portable/emscripten/tag-1.38.45/emcc
shared:ERROR: no input files
note that input files without a known suffix are ignored, make sure your input files end with one of: ('.c', '.C', '.i', '.cpp', '.cxx', '.cc', '.c++', '.CPP', '.CXX', '.CC', '.C++', '.ii', '.m', '.mi', '.mm', '.mii', '/dev/null', '.bc', '.o', '.obj', '.lo', '.dylib', '.so', '.a', '.ll', '.h', '.hxx', '.hpp', '.hh', '.H', '.HXX', '.HPP', '.HH')
configure:5171: result: /emsdk_portable/emscripten/tag-1.38.45/emcc
configure:5178: checking if the linker (/emsdk_portable/emscripten/tag-1.38.45/emcc) is GNU ld
configure:5193: result: yes
configure:5205: checking for BSD- or MS-compatible name lister (nm)
configure:5259: result: /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-nm
configure:5389: checking the name lister (/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-nm) interface
configure:5396: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:5399: /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-nm "conftest.o"
configure:5402: output
-------- D some_variable
configure:5409: result: BSD nm
configure:5412: checking whether ln -s works
configure:5416: result: yes
configure:5424: checking the maximum length of command line arguments
configure:5555: result: 1572864
configure:5603: checking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format
configure:5643: result: func_convert_file_noop
configure:5650: checking how to convert x86_64-unknown-linux-gnu file names to toolchain format
configure:5670: result: func_convert_file_noop
configure:5677: checking for /emsdk_portable/emscripten/tag-1.38.45/emcc option to reload object files
configure:5684: result: -r
configure:5758: checking for objdump
configure:5774: found /usr/bin/objdump
configure:5785: result: objdump
configure:5817: checking how to recognize dependent libraries
configure:6017: result: pass_all
configure:6102: checking for dlltool
configure:6132: result: no
configure:6162: checking how to associate runtime and link libraries
configure:6189: result: printf %s\n
configure:6313: checking for archiver @FILE support
configure:6330: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:6330: $? = 0
configure:6333: /emsdk_portable/emscripten/tag-1.38.45/emar cru libconftest.a @conftest.lst >&5
configure:6336: $? = 0
configure:6341: /emsdk_portable/emscripten/tag-1.38.45/emar cru libconftest.a @conftest.lst >&5
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-ar: conftest.o: No such file or directory.
OVERVIEW: LLVM Archiver (llvm-ar)

  This program archives bitcode files into single libraries

USAGE: llvm-ar [options] [relpos] [count] <archive-file> [members]...

OPTIONS:
  -M                                                  - 
  -atomic-counter-update-promoted                     - Do counter update using atomic fetch add  for promoted counters only
  -bounds-checking-single-trap                        - Use one trap block per function
  -color                                              - use colored syntax highlighting (default=autodetect)
  -cost-kind                                          - Target cost kind
    =throughput                                       -   Reciprocal throughput
    =latency                                          -   Instruction latency
    =code-size                                        -   Code size
  -cvp-dont-process-adds                              - 
  -debug-counter                                      - Comma separated list of debug counter skip and count
    =predicateinfo-rename                             -   Controls which variables are renamed with predicateinfo
    =instcombine-visit                                -   Controls which instructions are visited
    =newgvn-vn                                        -   Controls which instructions are value numbered
    =newgvn-phi                                       -   Controls which instructions we create phi of ops for
  -do-counter-promotion                               - Do counter register promotion
  -emscripten-asmjs-work-around-ios-9-right-shift-bug - Enables codegen to guard against broken right shift by (non-immediate) zero on WebKit/Safari 9 on ARM iOS 9.3.5 (iPhone 4s and older)
  -emscripten-assertions=<int>                        - Additional JS-specific assertions (see emscripten ASSERTIONS)
  -emscripten-asyncify                                - Enable asyncify transformation (see emscripten ASYNCIFY option)
  -emscripten-asyncify-functions=<string>             - Functions that call one of these functions, directly or indirectly, will be asyncified
  -emscripten-asyncify-whitelist=<string>             - Functions that should not be asyncified
  -emscripten-cpp-exceptions-whitelist=<string>       - Enables C++ exceptions in emscripten (see emscripten EXCEPTION_CATCHING_WHITELIST option)
  -emscripten-emulate-function-pointer-casts          - Emulate function pointers casts, handling extra or ignored parameters (see emscripten EMULATE_FUNCTION_POINTER_CASTS option)
  -emscripten-emulated-function-pointers              - Emulate function pointers, avoiding asm.js function tables (see emscripten EMULATED_FUNCTION_POINTERS option)
  -emscripten-enable-pthreads                         - Enables compilation targeting JavaScript Shared Array Buffer and Atomics API to implement support for pthreads-based multithreading
  -emscripten-global-base=<int>                       - Where global variables start out in memory (see emscripten GLOBAL_BASE option)
  -emscripten-legalize-javascript-ffi                 - Whether to legalize JavaScript FFI calls (see emscripten LEGALIZE_JS_FFI option)
  -emscripten-no-aliasing-function-pointers           - Forces function pointers to not alias (this is more correct, but rarely needed, and has the cost of much larger function tables; it is useful for debugging though; see emscripten ALIASING_FUNCTION_POINTERS option)
  -emscripten-no-exit-runtime                         - Generate code which assumes the runtime is never exited (so atexit etc. is unneeded; see emscripten NO_EXIT_RUNTIME setting)
  -emscripten-only-wasm                               - Generate code that will only ever be used as WebAssembly, and is not valid JS or asm.js
  -emscripten-precise-f32                             - Enables Math.fround usage to implement precise float32 semantics and performance (see emscripten PRECISE_F32 option)
  -emscripten-relocatable                             - Whether to emit relocatable code (see emscripten RELOCATABLE option)
  -emscripten-reserved-function-pointers=<int>        - Number of reserved slots in function tables for functions to be added at runtime (see emscripten RESERVED_FUNCTION_POINTERS option)
  -emscripten-side-module                             - Whether to emit a side module (see emscripten SIDE_MODULE option)
  -emscripten-stack-size=<int>                        - How large a stack to create (important in wasm side modules; see emscripten TOTAL_STACK option)
  -emscripten-warn-noncanonical-nans                  - Warns about detected noncanonical bit patterns in NaNs that will not be preserved in the generated output (this can cause code to run wrong if the exact bits were important)
  -emscripten-warn-unaligned                          - Warns about unaligned loads and stores (which can negatively affect performance)
  -emscripten-wasm                                    - Generate asm.js which will later be compiled to WebAssembly (see emscripten BINARYEN setting)
  -enable-cyberdwarf                                  - Include CyberDWARF debug information
  -enable-debug-intrinsics                            - Include debug intrinsics in generated output
  -enable-emscripten-cpp-exceptions                   - Enables C++ exceptions in emscripten
  -enable-load-pre                                    - 
  -enable-name-compression                            - Enable name string compression
  -enable-pnacl-sjlj-eh                               - Enable use of SJLJ-based C++ exception handling as part of the pnacl-abi-simplify passes
  -expensive-combines                                 - Enable expensive instruction combines
  -format                                             - Archive format to create
    =default                                          -   default
    =gnu                                              -   gnu
    =darwin                                           -   darwin
    =bsd                                              -   bsd
  -hash-based-counter-split                           - Rename counter variable of a comdat function based on cfg hash
  -help                                               - Display available options (-help-hidden for more)
  -import-all-index                                   - Import all external functions in index.
  -instcombine-maxarray-size=<uint>                   - Maximum array size considered when doing a combine
  -internalize-public-api-file=<filename>             - A file containing list of symbol names to preserve
  -internalize-public-api-list=<list>                 - A list of symbol names to preserve
  -iterative-counter-promotion                        - Allow counter promotion across the whole loop nest.
  -lto-pass-remarks-output=<filename>                 - Output filename for pass remarks
  -max-counter-promotions=<int>                       - Max number of allowed counter promotions
  -max-counter-promotions-per-loop=<uint>             - Max number counter promotions per loop to avoid increasing register pressure too much
  -memop-size-large=<uint>                            - Set large value thresthold in memory intrinsic size profiling. Value of 0 disables the large value profiling.
  -memop-size-range=<string>                          - Set the range of size in memory intrinsic calls to be profiled precisely, in a format of <start_val>:<end_val>
  -no-discriminators                                  - Disable generation of discriminator information.
  -plugin=<string>                                    - plugin (ignored for compatibility
  -pnacl-memory-order-seq-cst-only                    - PNaCl should upgrade all atomic memory orders to seq_cst
  -print-module-scope                                 - When printing IR for print-[before|after]{-all} always print a module IR
  -safepoint-ir-verifier-print-only                   - 
  -sample-profile-check-record-coverage=<N>           - Emit a warning if less than N% of records in the input profile are matched to the IR.
  -sample-profile-check-sample-coverage=<N>           - Emit a warning if less than N% of samples in the input profile are matched to the IR.
  -sample-profile-inline-hot-threshold=<N>            - Inlined functions that account for more than N% of all samples collected in the parent function, will be inlined again.
  -sample-profile-max-propagate-iterations=<uint>     - Maximum number of iterations to go through when propagating sample block/edge weights through the CFG.
  -speculative-counter-promotion-max-exiting=<uint>   - The max number of exiting blocks of a loop to allow  speculative counter promotion
  -speculative-counter-promotion-to-loop              - When the option is false, if the target block is in a loop, the promotion will be disallowed unless the promoted counter  update can be further/iteratively promoted into an acyclic  region.
  -summary-file=<string>                              - The summary file to use for function importing.
  -threads=<int>                                      - 
  -unfold-element-atomic-memcpy-max-elements=<uint>   - Maximum number of elements in atomic memcpy the optimizer is allowed to unfold
  -verify-region-info                                 - Verify region info (time consuming)
  -version                                            - Display the version of this program
  -vp-counters-per-site=<number>                      - The average number of profile counters allocated per value profiling site.
  -vp-static-alloc                                    - Do static counter allocation for value profiler
configure:6344: $? = 1
configure:6356: result: @
configure:6414: checking for strip
configure:6430: found /usr/bin/strip
configure:6441: result: strip
configure:6513: checking for ranlib
configure:6540: result: /emsdk_portable/emscripten/tag-1.38.45/emranlib
configure:6642: checking command to parse /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-nm output from /emsdk_portable/emscripten/tag-1.38.45/emcc object
configure:6795: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:6798: $? = 0
configure:6802: /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-nm conftest.o \| sed -n -e 's/^.*[ ]\([BCDEGRST][BCDEGRST]*\)[ ][ ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p' | sed '/ __gnu_lto/d' \> conftest.nm
configure:6805: $? = 0
configure:6871: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest -g -O2   conftest.c conftstm.o >&5
configure:6874: $? = 0
configure:6912: result: ok
configure:6959: checking for sysroot
configure:6989: result: no
configure:6996: checking for a working dd
configure:7034: result: /bin/dd
configure:7038: checking how to truncate binary pipes
configure:7053: result: /bin/dd bs=4096 count=1
configure:7189: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:7192: $? = 0
configure:7382: checking for mt
configure:7412: result: no
configure:7432: checking if : is a manifest tool
configure:7438: : '-?'
configure:7446: result: no
configure:8120: checking for dlfcn.h
configure:8120: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:8120: $? = 0
configure:8120: result: yes
configure:8376: checking for objdir
configure:8391: result: .libs
configure:8651: checking if /emsdk_portable/emscripten/tag-1.38.45/emcc supports -fno-rtti -fno-exceptions
configure:8669: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  -fno-rtti -fno-exceptions conftest.c >&5
configure:8673: $? = 0
configure:8686: result: yes
configure:9044: checking for /emsdk_portable/emscripten/tag-1.38.45/emcc option to produce PIC
configure:9051: result: -fPIC -DPIC
configure:9059: checking if /emsdk_portable/emscripten/tag-1.38.45/emcc PIC flag -fPIC -DPIC works
configure:9077: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  -fPIC -DPIC -DPIC conftest.c >&5
configure:9081: $? = 0
configure:9094: result: yes
configure:9123: checking if /emsdk_portable/emscripten/tag-1.38.45/emcc static flag -static works
configure:9151: result: yes
configure:9166: checking if /emsdk_portable/emscripten/tag-1.38.45/emcc supports -c -o file.o
configure:9187: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  -o out/conftest2.o conftest.c >&5
configure:9191: $? = 0
configure:9213: result: yes
configure:9221: checking if /emsdk_portable/emscripten/tag-1.38.45/emcc supports -c -o file.o
configure:9268: result: yes
configure:9301: checking whether the /emsdk_portable/emscripten/tag-1.38.45/emcc linker (/emsdk_portable/emscripten/tag-1.38.45/emcc) supports shared libraries
configure:10560: result: yes
configure:10597: checking whether -lc should be explicitly linked in
configure:10605: /emsdk_portable/emscripten/tag-1.38.45/emcc -c -g -O2  conftest.c >&5
configure:10608: $? = 0
configure:10623: /emsdk_portable/emscripten/tag-1.38.45/emcc -shared  -fPIC -DPIC conftest.o  -v -Wl,-soname -Wl,conftest -o conftest 2\>\&1 \| /bin/grep  -lc  \>/dev/null 2\>\&1
configure:10626: $? = 1
configure:10640: result: yes
configure:10800: checking dynamic linker characteristics
configure:11381: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest -g -O2   -Wl,-rpath -Wl,/foo conftest.c  >&5
emcc:WARNING: ignoring unsupported linker flag: `-rpath`
emcc:WARNING: ignoring unsupported linker flag: `/foo`
configure:11381: $? = 0
configure:11618: result: GNU/Linux ld.so
configure:11740: checking how to hardcode library paths into programs
configure:11765: result: immediate
configure:12313: checking whether stripping libraries is possible
configure:12318: result: yes
configure:12353: checking if libtool supports shared libraries
configure:12355: result: yes
configure:12358: checking whether to build shared libraries
configure:12383: result: yes
configure:12386: checking whether to build static libraries
configure:12390: result: yes
configure:12494: checking for gcc
configure:12521: result: /emsdk_portable/emscripten/tag-1.38.45/emcc
configure:12750: checking for C compiler version
configure:12759: /emsdk_portable/emscripten/tag-1.38.45/emcc --version >&5
emcc (Emscripten gcc/clang-like replacement) 1.38.45 ((unknown revision))
Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)
This is free and open source software under the MIT license.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  
configure:12770: $? = 0
configure:12759: /emsdk_portable/emscripten/tag-1.38.45/emcc -v >&5
emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) 1.38.45
clang version 6.0.1 (https://github.com/emscripten-core/emscripten-fastcomp-clang 98df4be387dde3e3918fa5bbb5fc43e1a0e1daac) (https://github.com/emscripten-core/emscripten-fastcomp 6c7e775325067e33fa60611e619a8b987b6d0c35) (emscripten 1.38.44 : 1.38.31)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/6
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/6.3.0
Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/6.3.0
Candidate multilib: .;@m64
Selected multilib: .;@m64
... rest of stderr output deleted ...
configure:12770: $? = 0
configure:12759: /emsdk_portable/emscripten/tag-1.38.45/emcc -V >&5
shared:ERROR: no input files
note that input files without a known suffix are ignored, make sure your input files end with one of: ('.c', '.C', '.i', '.cpp', '.cxx', '.cc', '.c++', '.CPP', '.CXX', '.CC', '.C++', '.ii', '.m', '.mi', '.mm', '.mii', '/dev/null', '.bc', '.o', '.obj', '.lo', '.dylib', '.so', '.a', '.ll', '.h', '.hxx', '.hpp', '.hh', '.H', '.HXX', '.HPP', '.HH')
configure:12770: $? = 1
configure:12759: /emsdk_portable/emscripten/tag-1.38.45/emcc -qversion >&5
shared:ERROR: no input files
note that input files without a known suffix are ignored, make sure your input files end with one of: ('.c', '.C', '.i', '.cpp', '.cxx', '.cc', '.c++', '.CPP', '.CXX', '.CC', '.C++', '.ii', '.m', '.mi', '.mm', '.mii', '/dev/null', '.bc', '.o', '.obj', '.lo', '.dylib', '.so', '.a', '.ll', '.h', '.hxx', '.hpp', '.hh', '.H', '.HXX', '.HPP', '.HH')
configure:12770: $? = 1
configure:12774: checking whether we are using the GNU C compiler
configure:12802: result: yes
configure:12811: checking whether /emsdk_portable/emscripten/tag-1.38.45/emcc accepts -g
configure:12872: result: yes
configure:12889: checking for /emsdk_portable/emscripten/tag-1.38.45/emcc option to accept ISO C89
configure:12965: result: none needed
configure:12990: checking whether /emsdk_portable/emscripten/tag-1.38.45/emcc understands -c and -o together
configure:13027: result: yes
configure:13046: checking dependency style of /emsdk_portable/emscripten/tag-1.38.45/emcc
configure:13157: result: gcc3
configure:13174: checking compiler
configure:13179: result: gcc
configure:13199: checking version of GCC
configure:13209: result: unknown compiler version pattern
configure:13227: checking dmalloc.h usability
configure:13227: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:61:10: fatal error: 'dmalloc.h' file not found
#include <dmalloc.h>
         ^~~~~~~~~~~
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:13227: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <dmalloc.h>
configure:13227: result: no
configure:13227: checking dmalloc.h presence
configure:13227: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
conftest.c:28:10: fatal error: 'dmalloc.h' file not found
#include <dmalloc.h>
         ^~~~~~~~~~~
1 error generated.
configure:13227: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| /* end confdefs.h.  */
| #include <dmalloc.h>
configure:13227: result: no
configure:13227: checking for dmalloc.h
configure:13227: result: no
configure:13259: checking for ANSI C header files
configure:13363: result: yes
configure:13383: checking errno.h usability
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking errno.h presence
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking for errno.h
configure:13383: result: yes
configure:13383: checking fcntl.h usability
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking fcntl.h presence
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking for fcntl.h
configure:13383: result: yes
configure:13383: checking limits.h usability
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking limits.h presence
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking for limits.h
configure:13383: result: yes
configure:13383: checking for stdint.h
configure:13383: result: yes
configure:13383: checking for string.h
configure:13383: result: yes
configure:13383: checking sys/soundcard.h usability
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
In file included from conftest.c:67:
/emsdk_portable/emscripten/tag-1.38.45/system/include/libc/sys/soundcard.h:1:10: fatal error: 'linux/soundcard.h' file not found
#include <linux/soundcard.h>
         ^~~~~~~~~~~~~~~~~~~
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:13383: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <sys/soundcard.h>
configure:13383: result: no
configure:13383: checking sys/soundcard.h presence
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
In file included from conftest.c:34:
/emsdk_portable/emscripten/tag-1.38.45/system/include/libc/sys/soundcard.h:1:10: fatal error: 'linux/soundcard.h' file not found
#include <linux/soundcard.h>
         ^~~~~~~~~~~~~~~~~~~
1 error generated.
configure:13383: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| /* end confdefs.h.  */
| #include <sys/soundcard.h>
configure:13383: result: no
configure:13383: checking for sys/soundcard.h
configure:13383: result: no
configure:13383: checking sys/time.h usability
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking sys/time.h presence
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
configure:13383: $? = 0
configure:13383: result: yes
configure:13383: checking for sys/time.h
configure:13383: result: yes
configure:13383: checking for unistd.h
configure:13383: result: yes
configure:13383: checking linux/soundcard.h usability
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:69:10: fatal error: 'linux/soundcard.h' file not found
#include <linux/soundcard.h>
         ^~~~~~~~~~~~~~~~~~~
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:13383: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <linux/soundcard.h>
configure:13383: result: no
configure:13383: checking linux/soundcard.h presence
configure:13383: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
conftest.c:36:10: fatal error: 'linux/soundcard.h' file not found
#include <linux/soundcard.h>
         ^~~~~~~~~~~~~~~~~~~
1 error generated.
configure:13383: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <linux/soundcard.h>
configure:13383: result: no
configure:13383: checking for linux/soundcard.h
configure:13383: result: no
configure:13394: checking working SSE intrinsics
configure:13407: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
In file included from conftest.c:36:
In file included from /emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/xmmintrin.h:27:
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:64:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_vec_init_v2si(__i, 0);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:143:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_packsswb((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:173:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_packssdw((__v2si)__m1, (__v2si)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:203:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_packuswb((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:230:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_punpckhbw((__v8qi)__m1, (__v8qi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:253:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_punpckhwd((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:274:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_punpckhdq((__v2si)__m1, (__v2si)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:301:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_punpcklbw((__v8qi)__m1, (__v8qi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:324:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_punpcklwd((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:345:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_punpckldq((__v2si)__m1, (__v2si)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:366:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_paddb((__v8qi)__m1, (__v8qi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:387:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_paddw((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:408:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_paddd((__v2si)__m1, (__v2si)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:430:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_paddsb((__v8qi)__m1, (__v8qi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:453:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_paddsw((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:475:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_paddusb((__v8qi)__m1, (__v8qi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:497:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_paddusw((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:518:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_psubb((__v8qi)__m1, (__v8qi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/lib/clang/6.0.1/include/mmintrin.h:539:12: error: invalid conversion between vector type '__m64' (vector of 1 'long long' value) and integer type 'int' of different size
    return (__m64)__builtin_ia32_psubw((__v4hi)__m1, (__v4hi)__m2);
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:13407: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <xmmintrin.h>
| int
| main ()
| {
| _mm_sfence();
|   ;
|   return 0;
| }
configure:13416: result: no
configure:13419: checking for an ANSI C-conforming const
configure:13485: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13485: $? = 0
configure:13492: result: yes
configure:13500: checking for inline
configure:13516: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13516: $? = 0
configure:13524: result: inline
configure:13543: checking whether byte ordering is bigendian
configure:13558: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:37:9: error: unknown type name 'not'
               not a universal capable compiler
               ^
conftest.c:37:14: error: expected ';' after top level declarator
               not a universal capable compiler
                    ^
                    ;
2 errors generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:13558: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #ifndef __APPLE_CC__
| 	       not a universal capable compiler
| 	     #endif
| 	     typedef int dummy;
| 
configure:13603: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13603: $? = 0
configure:13621: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:43:4: error: use of undeclared identifier 'not'
                 not big endian
                 ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:13621: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| /* end confdefs.h.  */
| #include <sys/types.h>
| 		#include <sys/param.h>
| 
| int
| main ()
| {
| #if BYTE_ORDER != BIG_ENDIAN
| 		 not big endian
| 		#endif
| 
|   ;
|   return 0;
| }
configure:13749: result: no
configure:13776: checking for special C compiler options needed for large files
configure:13821: result: no
configure:13827: checking for _FILE_OFFSET_BITS value needed for large files
configure:13852: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:13852: $? = 0
configure:13884: result: no
configure:13974: checking size of short
configure:13979: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:13979: $? = 0
configure:13979: ./conftest
configure:13979: $? = 0
configure:13993: result: 2
configure:14007: checking size of unsigned short
configure:14012: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14012: $? = 0
configure:14012: ./conftest
configure:14012: $? = 0
configure:14026: result: 2
configure:14040: checking size of int
configure:14045: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14045: $? = 0
configure:14045: ./conftest
configure:14045: $? = 0
configure:14059: result: 4
configure:14073: checking size of unsigned int
configure:14078: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14078: $? = 0
configure:14078: ./conftest
configure:14078: $? = 0
configure:14092: result: 4
configure:14106: checking size of long
configure:14111: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14111: $? = 0
configure:14111: ./conftest
configure:14111: $? = 0
configure:14125: result: 4
configure:14139: checking size of unsigned long
configure:14144: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14144: $? = 0
configure:14144: ./conftest
configure:14144: $? = 0
configure:14158: result: 4
configure:14172: checking size of long long
configure:14177: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14177: $? = 0
configure:14177: ./conftest
configure:14177: $? = 0
configure:14191: result: 8
configure:14205: checking size of unsigned long long
configure:14210: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14210: $? = 0
configure:14210: ./conftest
configure:14210: $? = 0
configure:14224: result: 8
configure:14238: checking size of float
configure:14243: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14243: $? = 0
configure:14243: ./conftest
configure:14243: $? = 0
configure:14257: result: 4
configure:14271: checking size of double
configure:14276: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14276: $? = 0
configure:14276: ./conftest
configure:14276: $? = 0
configure:14290: result: 8
configure:14320: checking for long double with more range or precision than double
configure:14356: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:62:24: error: 'test_array' declared as an array with a negative size
static int test_array [1 - 2 * !((0 < ((DBL_MAX_EXP < LDBL_MAX_EXP)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14356: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| /* end confdefs.h.  */
| #include <float.h>
| 	    long double const a[] =
| 	      {
| 		 0.0L, DBL_MIN, DBL_MAX, DBL_EPSILON,
| 		 LDBL_MIN, LDBL_MAX, LDBL_EPSILON
| 	      };
| 	    long double
| 	    f (long double x)
| 	    {
| 	       return ((x + (unsigned long int) 10) * (-1 / x) + a[0]
| 			+ (x ? f (x) : 'c'));
| 	    }
| 
| int
| main ()
| {
| static int test_array [1 - 2 * !((0 < ((DBL_MAX_EXP < LDBL_MAX_EXP)
| 		   + (DBL_MANT_DIG < LDBL_MANT_DIG)
| 		   - (LDBL_MAX_EXP < DBL_MAX_EXP)
| 		   - (LDBL_MANT_DIG < DBL_MANT_DIG)))
| 	    && (int) LDBL_EPSILON == 0
| 	  )];
| test_array [0] = 0;
| return test_array [0];
| 
|   ;
|   return 0;
| }
configure:14363: result: no
configure:14414: checking for uint8_t
configure:14414: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14414: $? = 0
configure:14414: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:82:22: error: expected expression
if (sizeof ((uint8_t)))
                     ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14414: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uint8_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14414: result: yes
configure:14423: checking for int8_t
configure:14423: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14423: $? = 0
configure:14423: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:83:21: error: expected expression
if (sizeof ((int8_t)))
                    ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14423: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((int8_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14423: result: yes
configure:14432: checking for uint16_t
configure:14432: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14432: $? = 0
configure:14432: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:84:23: error: expected expression
if (sizeof ((uint16_t)))
                      ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14432: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uint16_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14432: result: yes
configure:14441: checking for int16_t
configure:14441: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14441: $? = 0
configure:14441: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:85:22: error: expected expression
if (sizeof ((int16_t)))
                     ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14441: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((int16_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14441: result: yes
configure:14450: checking for uint32_t
configure:14450: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14450: $? = 0
configure:14450: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:86:23: error: expected expression
if (sizeof ((uint32_t)))
                      ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14450: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uint32_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14450: result: yes
configure:14459: checking for int32_t
configure:14459: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14459: $? = 0
configure:14459: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:87:22: error: expected expression
if (sizeof ((int32_t)))
                     ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14459: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((int32_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14459: result: yes
configure:14468: checking for uint64_t
configure:14468: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14468: $? = 0
configure:14468: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:88:23: error: expected expression
if (sizeof ((uint64_t)))
                      ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14468: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((uint64_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14468: result: yes
configure:14477: checking for int64_t
configure:14477: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14477: $? = 0
configure:14477: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:89:22: error: expected expression
if (sizeof ((int64_t)))
                     ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14477: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((int64_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14477: result: yes
configure:14582: checking for IEEE854 compliant 80 bit floats
configure:14620: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14620: $? = 0
configure:14620: ./conftest
configure:14620: $? = 0
configure:14630: result: yes
configure:14651: checking for ieee754_float64_t
configure:14651: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:94:13: error: use of undeclared identifier 'ieee754_float64_t'
if (sizeof (ieee754_float64_t))
            ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14651: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof (ieee754_float64_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:14651: result: no
configure:14660: checking for ieee754_float32_t
configure:14660: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:94:13: error: use of undeclared identifier 'ieee754_float32_t'
if (sizeof (ieee754_float32_t))
            ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14660: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof (ieee754_float32_t))
| 	 return 0;
|   ;
|   return 0;
| }
configure:14660: result: no
configure:14725: checking for size_t
configure:14725: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14725: $? = 0
configure:14725: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:95:21: error: expected expression
if (sizeof ((size_t)))
                    ^
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:14725: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| int
| main ()
| {
| if (sizeof ((size_t)))
| 	    return 0;
|   ;
|   return 0;
| }
configure:14725: result: yes
configure:14736: checking whether time.h and sys/time.h may both be included
configure:14756: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:14756: $? = 0
configure:14763: result: yes
configure:14774: checking for working alloca.h
configure:14791: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14791: $? = 0
configure:14799: result: yes
configure:14807: checking for alloca
configure:14844: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:14844: $? = 0
configure:14852: result: yes
configure:14961: checking for gettimeofday
configure:14961: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
[0;33mwarning:[0m unexpected number of arguments 0 in call to 'gettimeofday', should be 1
configure:14961: $? = 0
configure:14961: result: yes
configure:14961: checking for strtol
configure:14961: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
[0;33mwarning:[0m unexpected number of arguments 0 in call to 'strtol', should be 3
warning: asm2wasm adding operands in call from $_main to $_strtol (this is likely due to undefined behavior in C, like defining a function one way and calling it in another, which is important to fix)
configure:14961: $? = 0
configure:14961: result: yes
configure:14978: checking for socket
configure:14978: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
[0;33mwarning:[0m unexpected number of arguments 0 in call to 'socket', should be 3
warning: asm2wasm adding operands in call from $_main to $_socket (this is likely due to undefined behavior in C, like defining a function one way and calling it in another, which is important to fix)
configure:14978: $? = 0
configure:14978: result: yes
configure:15063: checking termcap.h usability
configure:15063: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:98:10: fatal error: 'termcap.h' file not found
#include <termcap.h>
         ^~~~~~~~~~~
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:15063: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <termcap.h>
configure:15063: result: no
configure:15063: checking termcap.h presence
configure:15063: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
conftest.c:65:10: fatal error: 'termcap.h' file not found
#include <termcap.h>
         ^~~~~~~~~~~
1 error generated.
configure:15063: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| /* end confdefs.h.  */
| #include <termcap.h>
configure:15063: result: no
configure:15063: checking for termcap.h
configure:15063: result: no
configure:15075: checking ncurses/termcap.h usability
configure:15075: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
conftest.c:98:10: fatal error: 'ncurses/termcap.h' file not found
#include <ncurses/termcap.h>
         ^~~~~~~~~~~~~~~~~~~
1 error generated.
shared:ERROR: '/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/clang -target asmjs-unknown-emscripten -D__EMSCRIPTEN_major__=1 -D__EMSCRIPTEN_minor__=38 -D__EMSCRIPTEN_tiny__=45 -D_LIBCPP_ABI_VERSION=2 -Werror=implicit-function-declaration -Xclang -nostdsysteminc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libcxx -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libcxxabi/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/compat -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/libc -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/lib/libc/musl/arch/emscripten -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/local/include -DEMSCRIPTEN -c conftest.c -Xclang -disable-O0-optnone -Xclang -isystem/emsdk_portable/emscripten/tag-1.38.45/system/include/SDL -c -o conftest.o -emit-llvm' failed (1)
configure:15075: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| /* end confdefs.h.  */
| #include <stdio.h>
| #ifdef HAVE_SYS_TYPES_H
| # include <sys/types.h>
| #endif
| #ifdef HAVE_SYS_STAT_H
| # include <sys/stat.h>
| #endif
| #ifdef STDC_HEADERS
| # include <stdlib.h>
| # include <stddef.h>
| #else
| # ifdef HAVE_STDLIB_H
| #  include <stdlib.h>
| # endif
| #endif
| #ifdef HAVE_STRING_H
| # if !defined STDC_HEADERS && defined HAVE_MEMORY_H
| #  include <memory.h>
| # endif
| # include <string.h>
| #endif
| #ifdef HAVE_STRINGS_H
| # include <strings.h>
| #endif
| #ifdef HAVE_INTTYPES_H
| # include <inttypes.h>
| #endif
| #ifdef HAVE_STDINT_H
| # include <stdint.h>
| #endif
| #ifdef HAVE_UNISTD_H
| # include <unistd.h>
| #endif
| #include <ncurses/termcap.h>
configure:15075: result: no
configure:15075: checking ncurses/termcap.h presence
configure:15075: /emsdk_portable/emscripten/tag-1.38.45/emcc -E  conftest.c
conftest.c:65:10: fatal error: 'ncurses/termcap.h' file not found
#include <ncurses/termcap.h>
         ^~~~~~~~~~~~~~~~~~~
1 error generated.
configure:15075: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| /* end confdefs.h.  */
| #include <ncurses/termcap.h>
configure:15075: result: no
configure:15075: checking for ncurses/termcap.h
configure:15075: result: no
configure:15085: checking for initscr in -ltermcap
configure:15110: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c -ltermcap   >&5
shared:ERROR: emcc: cannot find library "termcap"
configure:15110: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char initscr ();
| int
| main ()
| {
| return initscr ();
|   ;
|   return 0;
| }
configure:15119: result: no
configure:15125: checking for initscr in -lcurses
configure:15150: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c -lcurses   >&5
shared:ERROR: emcc: cannot find library "curses"
configure:15150: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char initscr ();
| int
| main ()
| {
| return initscr ();
|   ;
|   return 0;
| }
configure:15159: result: no
configure:15165: checking for initscr in -lncurses
configure:15190: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c -lncurses   >&5
shared:ERROR: emcc: cannot find library "ncurses"
configure:15190: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char initscr ();
| int
| main ()
| {
| return initscr ();
|   ;
|   return 0;
| }
configure:15199: result: no
configure:15247: checking for ld used by /emsdk_portable/emscripten/tag-1.38.45/emcc
shared:ERROR: no input files
note that input files without a known suffix are ignored, make sure your input files end with one of: ('.c', '.C', '.i', '.cpp', '.cxx', '.cc', '.c++', '.CPP', '.CXX', '.CC', '.C++', '.ii', '.m', '.mi', '.mm', '.mii', '/dev/null', '.bc', '.o', '.obj', '.lo', '.dylib', '.so', '.a', '.ll', '.h', '.hxx', '.hpp', '.hh', '.H', '.HXX', '.HPP', '.HH')
configure:15314: result: /emsdk_portable/emscripten/tag-1.38.45/emcc
configure:15321: checking if the linker (/emsdk_portable/emscripten/tag-1.38.45/emcc) is GNU ld
configure:15336: result: yes
configure:15343: checking for shared library run path origin
configure:15356: result: done
configure:15934: checking for iconv
configure:15958: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:15958: $? = 0
configure:15992: result: yes
configure:15995: checking for working iconv
configure:16124: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c  >&5
configure:16124: $? = 0
configure:16124: ./conftest
configure:16124: $? = 0
configure:16136: result: yes
configure:16164: checking for iconv declaration
configure:16193: /emsdk_portable/emscripten/tag-1.38.45/emcc -c   conftest.c >&5
configure:16193: $? = 0
configure:16204: result:
         extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);
configure:16216: checking for cos in -lm
configure:16241: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c -lm   >&5
(module
 (type $FUNCSIG$iiii (func (param i32 i32 i32) (result i32)))
 (type $FUNCSIG$jiji (func (param i32 i64 i32) (result i64)))
 (type $FUNCSIG$ii (func (param i32) (result i32)))
 (type $FUNCSIG$vi (func (param i32)))
 (type $FUNCSIG$iiiii (func (param i32 i32 i32 i32) (result i32)))
 (type $FUNCSIG$i (func (result i32)))
 (import "env" "memory" (memory $memory 256 256))
 (data (i32.const 1024) "\03\00\00\00\04\00\00\00\04\00\00\00\06\00\00\00\83\f9\a2\00DNn\00\fc)\15\00\d1W\'\00\dd4\f5\00b\db\c0\00<\99\95\00A\90C\00cQ\fe\00\bb\de\ab\00\b7a\c5\00:n$\00\d2MB\00I\06\e0\00\t\ea.\00\1c\92\d1\00\eb\1d\fe\00)\b1\1c\00\e8>\a7\00\f55\82\00D\bb.\00\9c\e9\84\00\b4&p\00A~_\00\d6\919\00S\839\00\9c\f49\00\8b_\84\00(\f9\bd\00\f8\1f;\00\de\ff\97\00\0f\98\05\00\11/\ef\00\nZ\8b\00m\1fm\00\cf~6\00\t\cb\'\00FO\b7\00\9ef?\00-\ea_\00\ba\'u\00\e5\eb\c7\00={\f1\00\f79\07\00\92R\8a\00\fbk\ea\00\1f\b1_\00\08]\8d\000\03V\00{\fcF\00\f0\abk\00 \bc\cf\006\f4\9a\00\e3\a9\1d\00^a\91\00\08\1b\e6\00\85\99e\00\a0\14_\00\8d@h\00\80\d8\ff\00\'sM\00\06\061\00\caV\15\00\c9\a8s\00{\e2`\00k\8c\c0\00\00\00\00\00\00\00\00\00\00\00\00@\fb!\f9?\00\00\00\00-Dt>\00\00\00\80\98F\f8<\00\00\00`Q\ccx;\00\00\00\80\83\1b\f09\00\00\00@ %z8\00\00\00\80\"\82\e36\00\00\00\00\1d\f3i5\05\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\03\00\00\00\08\06\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00`\05")
 (import "env" "table" (table $table 10 10 funcref))
 (elem (global.get $__table_base) $b0 $___emscripten_stdout_close $b1 $b1 $___stdio_write $b1 $b2 $b2 $b2 $___emscripten_stdout_seek)
 (import "env" "__memory_base" (global $__memory_base i32))
 (import "env" "__table_base" (global $__table_base i32))
 (import "env" "tempDoublePtr" (global $tempDoublePtr$asm2wasm$import i32))
 (import "env" "DYNAMICTOP_PTR" (global $DYNAMICTOP_PTR$asm2wasm$import i32))
 (import "env" "abortStackOverflow" (func $abortStackOverflow (param i32)))
 (import "env" "nullFunc_ii" (func $nullFunc_ii (param i32)))
 (import "env" "nullFunc_iiii" (func $nullFunc_iiii (param i32)))
 (import "env" "nullFunc_jiji" (func $nullFunc_jiji (param i32)))
 (import "env" "___lock" (func $___lock (param i32)))
 (import "env" "___setErrNo" (func $___setErrNo (param i32)))
 (import "env" "___unlock" (func $___unlock (param i32)))
 (import "env" "___wasi_fd_write" (func $___wasi_fd_write (param i32 i32 i32 i32) (result i32)))
 (import "env" "_emscripten_get_heap_size" (func $_emscripten_get_heap_size (result i32)))
 (import "env" "_emscripten_memcpy_big" (func $_emscripten_memcpy_big (param i32 i32 i32) (result i32)))
 (import "env" "_emscripten_resize_heap" (func $_emscripten_resize_heap (param i32) (result i32)))
 (import "env" "abortOnCannotGrowMemory" (func $abortOnCannotGrowMemory (param i32) (result i32)))
 (import "env" "setTempRet0" (func $setTempRet0 (param i32)))
 (global $tempDoublePtr (mut i32) (global.get $tempDoublePtr$asm2wasm$import))
 (global $DYNAMICTOP_PTR (mut i32) (global.get $DYNAMICTOP_PTR$asm2wasm$import))
 (global $__THREW__ (mut i32) (i32.const 0))
 (global $threwValue (mut i32) (i32.const 0))
 (global $setjmpId (mut i32) (i32.const 0))
 (global $tempInt (mut i32) (i32.const 0))
 (global $tempBigInt (mut i32) (i32.const 0))
 (global $tempBigIntS (mut i32) (i32.const 0))
 (global $tempValue (mut i32) (i32.const 0))
 (global $tempDouble (mut f64) (f64.const 0))
 (global $STACKTOP (mut i32) (i32.const 4320))
 (global $STACK_MAX (mut i32) (i32.const 5247200))
 (global $tempFloat (mut f32) (f32.const 0))
 (global $f0 (mut f32) (f32.const 0))
 (export "___errno_location" (func $___errno_location))
 (export "_fflush" (func $_fflush))
 (export "_free" (func $_free))
 (export "_main" (func $_main))
 (export "_malloc" (func $_malloc))
 (export "_memcpy" (func $_memcpy))
 (export "_memset" (func $_memset))
 (export "_sbrk" (func $_sbrk))
 (export "dynCall_ii" (func $dynCall_ii))
 (export "dynCall_iiii" (func $dynCall_iiii))
 (export "dynCall_jiji" (func $legalstub$dynCall_jiji))
 (export "establishStackSpace" (func $establishStackSpace))
 (export "stackAlloc" (func $stackAlloc))
 (export "stackRestore" (func $stackRestore))
 (export "stackSave" (func $stackSave))
 (func $stackAlloc (; 13 ;) (param $size i32) (result i32)
  (local $ret i32)
  (local.set $ret
   (global.get $STACKTOP)
  )
  (global.set $STACKTOP
   (i32.add
    (global.get $STACKTOP)
    (local.get $size)
   )
  )
  (global.set $STACKTOP
   (i32.and
    (i32.add
     (global.get $STACKTOP)
     (i32.const 15)
    )
    (i32.const -16)
   )
  )
  (if
   (i32.ge_s
    (global.get $STACKTOP)
    (global.get $STACK_MAX)
   )
   (call $abortStackOverflow
    (local.get $size)
   )
  )
  (return
   (local.get $ret)
  )
 )
 (func $stackSave (; 14 ;) (result i32)
  (return
   (global.get $STACKTOP)
  )
 )
 (func $stackRestore (; 15 ;) (param $top i32)
  (global.set $STACKTOP
   (local.get $top)
  )
 )
 (func $establishStackSpace (; 16 ;) (param $stackBase i32) (param $stackMax i32)
  (global.set $STACKTOP
   (local.get $stackBase)
  )
  (global.set $STACK_MAX
   (local.get $stackMax)
  )
 )
 (func $_main (; 17 ;) (result i32)
  (local $$0 i32)
  (local $$1 i32)
  (local $$2 i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (global.set $STACKTOP
   (i32.add
    (global.get $STACKTOP)
    (i32.const 16)
   )
  )
  (if
   (i32.ge_s
    (global.get $STACKTOP)
    (global.get $STACK_MAX)
   )
   (call $abortStackOverflow
    (i32.const 16)
   )
  )
  (local.set $$0
   (i32.const 0)
  )
  (local.set $$1
   (call $_cos
    (f64.const 0)
   )
  )
  (local.set $$2
   (i32.shr_s
    (i32.shl
     (local.get $$1)
     (i32.const 24)
    )
    (i32.const 24)
   )
  )
  (global.set $STACKTOP
   (local.get $sp)
  )
  (return
   (local.get $$2)
  )
 )
 (func $___errno_location (; 18 ;) (result i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (return
   (i32.const 2576)
  )
 )
 (func $___stdio_write (; 19 ;) (param $$0 i32) (param $$1 i32) (param $$2 i32) (result i32)
  (local $$$052 i32)
  (local $$$053 i32)
  (local $$$055 i32)
  (local $$$057 i32)
  (local $$$1$ph i32)
  (local $$$154 i32)
  (local $$$158 i32)
  (local $$$pr i32)
  (local $$10 i32)
  (local $$11 i32)
  (local $$12 i32)
  (local $$13 i32)
  (local $$14 i32)
  (local $$15 i32)
  (local $$16 i32)
  (local $$17 i32)
  (local $$18 i32)
  (local $$19 i32)
  (local $$20 i32)
  (local $$21 i32)
  (local $$22 i32)
  (local $$23 i32)
  (local $$24 i32)
  (local $$25 i32)
  (local $$26 i32)
  (local $$27 i32)
  (local $$28 i32)
  (local $$29 i32)
  (local $$3 i32)
  (local $$30 i32)
  (local $$31 i32)
  (local $$32 i32)
  (local $$33 i32)
  (local $$34 i32)
  (local $$35 i32)
  (local $$36 i32)
  (local $$37 i32)
  (local $$38 i32)
  (local $$39 i32)
  (local $$4 i32)
  (local $$40 i32)
  (local $$41 i32)
  (local $$42 i32)
  (local $$43 i32)
  (local $$44 i32)
  (local $$45 i32)
  (local $$46 i32)
  (local $$5 i32)
  (local $$6 i32)
  (local $$7 i32)
  (local $$8 i32)
  (local $$9 i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (global.set $STACKTOP
   (i32.add
    (global.get $STACKTOP)
    (i32.const 32)
   )
  )
  (if
   (i32.ge_s
    (global.get $STACKTOP)
    (global.get $STACK_MAX)
   )
   (call $abortStackOverflow
    (i32.const 32)
   )
  )
  (local.set $$3
   (local.get $sp)
  )
  (local.set $$4
   (i32.add
    (local.get $sp)
    (i32.const 16)
   )
  )
  (local.set $$5
   (i32.add
    (local.get $$0)
    (i32.const 28)
   )
  )
  (local.set $$6
   (i32.load
    (local.get $$5)
   )
  )
  (i32.store
   (local.get $$3)
   (local.get $$6)
  )
  (local.set $$7
   (i32.add
    (local.get $$3)
    (i32.const 4)
   )
  )
  (local.set $$8
   (i32.add
    (local.get $$0)
    (i32.const 20)
   )
  )
  (local.set $$9
   (i32.load
    (local.get $$8)
   )
  )
  (local.set $$10
   (i32.sub
    (local.get $$9)
    (local.get $$6)
   )
  )
  (i32.store
   (local.get $$7)
   (local.get $$10)
  )
  (local.set $$11
   (i32.add
    (local.get $$3)
    (i32.const 8)
   )
  )
  (i32.store
   (local.get $$11)
   (local.get $$1)
  )
  (local.set $$12
   (i32.add
    (local.get $$3)
    (i32.const 12)
   )
  )
  (i32.store
   (local.get $$12)
   (local.get $$2)
  )
  (local.set $$13
   (i32.add
    (local.get $$10)
    (local.get $$2)
   )
  )
  (local.set $$14
   (i32.add
    (local.get $$0)
    (i32.const 60)
   )
  )
  (local.set $$$053
   (i32.const 2)
  )
  (local.set $$$055
   (local.get $$13)
  )
  (local.set $$$057
   (local.get $$3)
  )
  (loop $while-in
   (block $while-out
    (local.set $$15
     (i32.load
      (local.get $$14)
     )
    )
    (local.set $$16
     (call $___wasi_fd_write
      (local.get $$15)
      (local.get $$$057)
      (local.get $$$053)
      (local.get $$4)
     )
    )
    (local.set $$17
     (i32.eq
      (i32.shr_s
       (i32.shl
        (local.get $$16)
        (i32.const 16)
       )
       (i32.const 16)
      )
      (i32.const 0)
     )
    )
    (if
     (local.get $$17)
     (block
      (local.set $$$pr
       (i32.load
        (local.get $$4)
       )
      )
      (local.set $$19
       (local.get $$$pr)
      )
     )
     (block
      (i32.store
       (local.get $$4)
       (i32.const -1)
      )
      (local.set $$19
       (i32.const -1)
      )
     )
    )
    (local.set $$18
     (i32.eq
      (local.get $$$055)
      (local.get $$19)
     )
    )
    (if
     (local.get $$18)
     (block
      (local.set $label
       (i32.const 6)
      )
      (br $while-out)
     )
    )
    (local.set $$27
     (i32.lt_s
      (local.get $$19)
      (i32.const 0)
     )
    )
    (if
     (local.get $$27)
     (block
      (local.set $label
       (i32.const 8)
      )
      (br $while-out)
     )
    )
    (local.set $$35
     (i32.sub
      (local.get $$$055)
      (local.get $$19)
     )
    )
    (local.set $$36
     (i32.add
      (local.get $$$057)
      (i32.const 4)
     )
    )
    (local.set $$37
     (i32.load
      (local.get $$36)
     )
    )
    (local.set $$38
     (i32.gt_u
      (local.get $$19)
      (local.get $$37)
     )
    )
    (local.set $$39
     (i32.add
      (local.get $$$057)
      (i32.const 8)
     )
    )
    (local.set $$$158
     (if (result i32)
      (local.get $$38)
      (local.get $$39)
      (local.get $$$057)
     )
    )
    (local.set $$40
     (i32.shr_s
      (i32.shl
       (local.get $$38)
       (i32.const 31)
      )
      (i32.const 31)
     )
    )
    (local.set $$$154
     (i32.add
      (local.get $$$053)
      (local.get $$40)
     )
    )
    (local.set $$41
     (if (result i32)
      (local.get $$38)
      (local.get $$37)
      (i32.const 0)
     )
    )
    (local.set $$$052
     (i32.sub
      (local.get $$19)
      (local.get $$41)
     )
    )
    (local.set $$42
     (i32.load
      (local.get $$$158)
     )
    )
    (local.set $$43
     (i32.add
      (local.get $$42)
      (local.get $$$052)
     )
    )
    (i32.store
     (local.get $$$158)
     (local.get $$43)
    )
    (local.set $$44
     (i32.add
      (local.get $$$158)
      (i32.const 4)
     )
    )
    (local.set $$45
     (i32.load
      (local.get $$44)
     )
    )
    (local.set $$46
     (i32.sub
      (local.get $$45)
      (local.get $$$052)
     )
    )
    (i32.store
     (local.get $$44)
     (local.get $$46)
    )
    (local.set $$$053
     (local.get $$$154)
    )
    (local.set $$$055
     (local.get $$35)
    )
    (local.set $$$057
     (local.get $$$158)
    )
    (br $while-in)
   )
  )
  (if
   (i32.eq
    (local.get $label)
    (i32.const 6)
   )
   (block
    (local.set $$20
     (i32.add
      (local.get $$0)
      (i32.const 44)
     )
    )
    (local.set $$21
     (i32.load
      (local.get $$20)
     )
    )
    (local.set $$22
     (i32.add
      (local.get $$0)
      (i32.const 48)
     )
    )
    (local.set $$23
     (i32.load
      (local.get $$22)
     )
    )
    (local.set $$24
     (i32.add
      (local.get $$21)
      (local.get $$23)
     )
    )
    (local.set $$25
     (i32.add
      (local.get $$0)
      (i32.const 16)
     )
    )
    (i32.store
     (local.get $$25)
     (local.get $$24)
    )
    (local.set $$26
     (local.get $$21)
    )
    (i32.store
     (local.get $$5)
     (local.get $$26)
    )
    (i32.store
     (local.get $$8)
     (local.get $$26)
    )
    (local.set $$$1$ph
     (local.get $$2)
    )
   )
   (if
    (i32.eq
     (local.get $label)
     (i32.const 8)
    )
    (block
     (local.set $$28
      (i32.add
       (local.get $$0)
       (i32.const 16)
      )
     )
     (i32.store
      (local.get $$28)
      (i32.const 0)
     )
     (i32.store
      (local.get $$5)
      (i32.const 0)
     )
     (i32.store
      (local.get $$8)
      (i32.const 0)
     )
     (local.set $$29
      (i32.load
       (local.get $$0)
      )
     )
     (local.set $$30
      (i32.or
       (local.get $$29)
       (i32.const 32)
      )
     )
     (i32.store
      (local.get $$0)
      (local.get $$30)
     )
     (local.set $$31
      (i32.eq
       (local.get $$$053)
       (i32.const 2)
      )
     )
     (if
      (local.get $$31)
      (local.set $$$1$ph
       (i32.const 0)
      )
      (block
       (local.set $$32
        (i32.add
         (local.get $$$057)
         (i32.const 4)
        )
       )
       (local.set $$33
        (i32.load
         (local.get $$32)
        )
       )
       (local.set $$34
        (i32.sub
         (local.get $$2)
         (local.get $$33)
        )
       )
       (local.set $$$1$ph
        (local.get $$34)
       )
      )
     )
    )
   )
  )
  (global.set $STACKTOP
   (local.get $sp)
  )
  (return
   (local.get $$$1$ph)
  )
 )
 (func $___emscripten_stdout_close (; 20 ;) (param $$0 i32) (result i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (return
   (i32.const 0)
  )
 )
 (func $___emscripten_stdout_seek (; 21 ;) (param $$0 i32) (param $$1 i64) (param $$2 i32) (result i64)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (return
   (i64.const 0)
  )
 )
 (func $_scalbn (; 22 ;) (param $$0 f64) (param $$1 i32) (result f64)
  (local $$$0 f64)
  (local $$$020 i32)
  (local $$10 f64)
  (local $$11 i32)
  (local $$12 i32)
  (local $$13 f64)
  (local $$14 i32)
  (local $$15 i32)
  (local $$16 i32)
  (local $$17 i64)
  (local $$18 i64)
  (local $$19 f64)
  (local $$2 i32)
  (local $$20 f64)
  (local $$3 f64)
  (local $$4 i32)
  (local $$5 i32)
  (local $$6 f64)
  (local $$7 i32)
  (local $$8 i32)
  (local $$9 i32)
  (local $$spec$select i32)
  (local $$spec$select21 f64)
  (local $$spec$select22 i32)
  (local $$spec$select23 f64)
  (local $$spec$store$select i32)
  (local $$spec$store$select1 i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (local.set $$2
   (i32.gt_s
    (local.get $$1)
    (i32.const 1023)
   )
  )
  (if
   (local.get $$2)
   (block
    (local.set $$3
     (f64.mul
      (local.get $$0)
      (f64.const 8988465674311579538646525e283)
     )
    )
    (local.set $$4
     (i32.add
      (local.get $$1)
      (i32.const -1023)
     )
    )
    (local.set $$5
     (i32.gt_s
      (local.get $$1)
      (i32.const 2046)
     )
    )
    (local.set $$6
     (f64.mul
      (local.get $$3)
      (f64.const 8988465674311579538646525e283)
     )
    )
    (local.set $$7
     (i32.add
      (local.get $$1)
      (i32.const -2046)
     )
    )
    (local.set $$8
     (i32.lt_s
      (local.get $$7)
      (i32.const 1023)
     )
    )
    (local.set $$spec$store$select
     (if (result i32)
      (local.get $$8)
      (local.get $$7)
      (i32.const 1023)
     )
    )
    (local.set $$spec$select
     (if (result i32)
      (local.get $$5)
      (local.get $$spec$store$select)
      (local.get $$4)
     )
    )
    (local.set $$spec$select21
     (if (result f64)
      (local.get $$5)
      (local.get $$6)
      (local.get $$3)
     )
    )
    (local.set $$$0
     (local.get $$spec$select21)
    )
    (local.set $$$020
     (local.get $$spec$select)
    )
   )
   (block
    (local.set $$9
     (i32.lt_s
      (local.get $$1)
      (i32.const -1022)
     )
    )
    (if
     (local.get $$9)
     (block
      (local.set $$10
       (f64.mul
        (local.get $$0)
        (f64.const 2.2250738585072014e-308)
       )
      )
      (local.set $$11
       (i32.add
        (local.get $$1)
        (i32.const 1022)
       )
      )
      (local.set $$12
       (i32.lt_s
        (local.get $$1)
        (i32.const -2044)
       )
      )
      (local.set $$13
       (f64.mul
        (local.get $$10)
        (f64.const 2.2250738585072014e-308)
       )
      )
      (local.set $$14
       (i32.add
        (local.get $$1)
        (i32.const 2044)
       )
      )
      (local.set $$15
       (i32.gt_s
        (local.get $$14)
        (i32.const -1022)
       )
      )
      (local.set $$spec$store$select1
       (if (result i32)
        (local.get $$15)
        (local.get $$14)
        (i32.const -1022)
       )
      )
      (local.set $$spec$select22
       (if (result i32)
        (local.get $$12)
        (local.get $$spec$store$select1)
        (local.get $$11)
       )
      )
      (local.set $$spec$select23
       (if (result f64)
        (local.get $$12)
        (local.get $$13)
        (local.get $$10)
       )
      )
      (local.set $$$0
       (local.get $$spec$select23)
      )
      (local.set $$$020
       (local.get $$spec$select22)
      )
     )
     (block
      (local.set $$$0
       (local.get $$0)
      )
      (local.set $$$020
       (local.get $$1)
      )
     )
    )
   )
  )
  (local.set $$16
   (i32.add
    (local.get $$$020)
    (i32.const 1023)
   )
  )
  (local.set $$17
   (i64.extend_i32_u
    (local.get $$16)
   )
  )
  (local.set $$18
   (i64.shl
    (local.get $$17)
    (i64.const 52)
   )
  )
  (local.set $$19
   (f64.reinterpret_i64
    (local.get $$18)
   )
  )
  (local.set $$20
   (f64.mul
    (local.get $$$0)
    (local.get $$19)
   )
  )
  (return
   (local.get $$20)
  )
 )
 (func $___lockfile (; 23 ;) (param $$0 i32) (result i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (return
   (i32.const 1)
  )
 )
 (func $___unlockfile (; 24 ;) (param $$0 i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (return)
 )
 (func $___ofl_lock (; 25 ;) (result i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (call $___lock
   (i32.const 2580)
  )
  (return
   (i32.const 2588)
  )
 )
 (func $___ofl_unlock (; 26 ;)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (call $___unlock
   (i32.const 2580)
  )
  (return)
 )
 (func $_fflush (; 27 ;) (param $$0 i32) (result i32)
  (local $$$0 i32)
  (local $$$023 i32)
  (local $$$02325 i32)
  (local $$$02327 i32)
  (local $$$024$lcssa i32)
  (local $$$02426 i32)
  (local $$$1 i32)
  (local $$1 i32)
  (local $$10 i32)
  (local $$11 i32)
  (local $$12 i32)
  (local $$13 i32)
  (local $$14 i32)
  (local $$15 i32)
  (local $$16 i32)
  (local $$17 i32)
  (local $$18 i32)
  (local $$19 i32)
  (local $$2 i32)
  (local $$20 i32)
  (local $$21 i32)
  (local $$22 i32)
  (local $$23 i32)
  (local $$24 i32)
  (local $$25 i32)
  (local $$26 i32)
  (local $$27 i32)
  (local $$28 i32)
  (local $$29 i32)
  (local $$3 i32)
  (local $$4 i32)
  (local $$5 i32)
  (local $$6 i32)
  (local $$7 i32)
  (local $$8 i32)
  (local $$9 i32)
  (local $$phitmp i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (local.set $$1
   (i32.eq
    (local.get $$0)
    (i32.const 0)
   )
  )
  (block $do-once
   (if
    (local.get $$1)
    (block
     (local.set $$8
      (i32.load
       (i32.const 1520)
      )
     )
     (local.set $$9
      (i32.eq
       (local.get $$8)
       (i32.const 0)
      )
     )
     (if
      (local.get $$9)
      (local.set $$29
       (i32.const 0)
      )
      (block
       (local.set $$10
        (i32.load
         (i32.const 1520)
        )
       )
       (local.set $$11
        (call $_fflush
         (local.get $$10)
        )
       )
       (local.set $$29
        (local.get $$11)
       )
      )
     )
     (local.set $$12
      (call $___ofl_lock)
     )
     (local.set $$$02325
      (i32.load
       (local.get $$12)
      )
     )
     (local.set $$13
      (i32.eq
       (local.get $$$02325)
       (i32.const 0)
      )
     )
     (if
      (local.get $$13)
      (local.set $$$024$lcssa
       (local.get $$29)
      )
      (block
       (local.set $$$02327
        (local.get $$$02325)
       )
       (local.set $$$02426
        (local.get $$29)
       )
       (loop $while-in
        (block $while-out
         (local.set $$14
          (i32.add
           (local.get $$$02327)
           (i32.const 76)
          )
         )
         (local.set $$15
          (i32.load
           (local.get $$14)
          )
         )
         (local.set $$16
          (i32.gt_s
           (local.get $$15)
           (i32.const -1)
          )
         )
         (if
          (local.get $$16)
          (block
           (local.set $$17
            (call $___lockfile
             (local.get $$$02327)
            )
           )
           (local.set $$25
            (local.get $$17)
           )
          )
          (local.set $$25
           (i32.const 0)
          )
         )
         (local.set $$18
          (i32.add
           (local.get $$$02327)
           (i32.const 20)
          )
         )
         (local.set $$19
          (i32.load
           (local.get $$18)
          )
         )
         (local.set $$20
          (i32.add
           (local.get $$$02327)
           (i32.const 28)
          )
         )
         (local.set $$21
          (i32.load
           (local.get $$20)
          )
         )
         (local.set $$22
          (i32.gt_u
           (local.get $$19)
           (local.get $$21)
          )
         )
         (if
          (local.get $$22)
          (block
           (local.set $$23
            (call $___fflush_unlocked
             (local.get $$$02327)
            )
           )
           (local.set $$24
            (i32.or
             (local.get $$23)
             (local.get $$$02426)
            )
           )
           (local.set $$$1
            (local.get $$24)
           )
          )
          (local.set $$$1
           (local.get $$$02426)
          )
         )
         (local.set $$26
          (i32.eq
           (local.get $$25)
           (i32.const 0)
          )
         )
         (if
          (i32.eqz
           (local.get $$26)
          )
          (call $___unlockfile
           (local.get $$$02327)
          )
         )
         (local.set $$27
          (i32.add
           (local.get $$$02327)
           (i32.const 56)
          )
         )
         (local.set $$$023
          (i32.load
           (local.get $$27)
          )
         )
         (local.set $$28
          (i32.eq
           (local.get $$$023)
           (i32.const 0)
          )
         )
         (if
          (local.get $$28)
          (block
           (local.set $$$024$lcssa
            (local.get $$$1)
           )
           (br $while-out)
          )
          (block
           (local.set $$$02327
            (local.get $$$023)
           )
           (local.set $$$02426
            (local.get $$$1)
           )
          )
         )
         (br $while-in)
        )
       )
      )
     )
     (call $___ofl_unlock)
     (local.set $$$0
      (local.get $$$024$lcssa)
     )
    )
    (block
     (local.set $$2
      (i32.add
       (local.get $$0)
       (i32.const 76)
      )
     )
     (local.set $$3
      (i32.load
       (local.get $$2)
      )
     )
     (local.set $$4
      (i32.gt_s
       (local.get $$3)
       (i32.const -1)
      )
     )
     (if
      (i32.eqz
       (local.get $$4)
      )
      (block
       (local.set $$5
        (call $___fflush_unlocked
         (local.get $$0)
        )
       )
       (local.set $$$0
        (local.get $$5)
       )
       (br $do-once)
      )
     )
     (local.set $$6
      (call $___lockfile
       (local.get $$0)
      )
     )
     (local.set $$phitmp
      (i32.eq
       (local.get $$6)
       (i32.const 0)
      )
     )
     (local.set $$7
      (call $___fflush_unlocked
       (local.get $$0)
      )
     )
     (if
      (local.get $$phitmp)
      (local.set $$$0
       (local.get $$7)
      )
      (block
       (call $___unlockfile
        (local.get $$0)
       )
       (local.set $$$0
        (local.get $$7)
       )
      )
     )
    )
   )
  )
  (return
   (local.get $$$0)
  )
 )
 (func $___fflush_unlocked (; 28 ;) (param $$0 i32) (result i32)
  (local $$$0 i32)
  (local $$1 i32)
  (local $$10 i32)
  (local $$11 i32)
  (local $$12 i32)
  (local $$13 i32)
  (local $$14 i32)
  (local $$15 i32)
  (local $$16 i32)
  (local $$17 i32)
  (local $$18 i64)
  (local $$19 i32)
  (local $$2 i32)
  (local $$20 i32)
  (local $$21 i32)
  (local $$3 i32)
  (local $$4 i32)
  (local $$5 i32)
  (local $$6 i32)
  (local $$7 i32)
  (local $$8 i32)
  (local $$9 i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (local.set $$1
   (i32.add
    (local.get $$0)
    (i32.const 20)
   )
  )
  (local.set $$2
   (i32.load
    (local.get $$1)
   )
  )
  (local.set $$3
   (i32.add
    (local.get $$0)
    (i32.const 28)
   )
  )
  (local.set $$4
   (i32.load
    (local.get $$3)
   )
  )
  (local.set $$5
   (i32.gt_u
    (local.get $$2)
    (local.get $$4)
   )
  )
  (if
   (local.get $$5)
   (block
    (local.set $$6
     (i32.add
      (local.get $$0)
      (i32.const 36)
     )
    )
    (local.set $$7
     (i32.load
      (local.get $$6)
     )
    )
    (drop
     (call_indirect (type $FUNCSIG$iiii)
      (local.get $$0)
      (i32.const 0)
      (i32.const 0)
      (i32.add
       (i32.and
        (local.get $$7)
        (i32.const 3)
       )
       (i32.const 2)
      )
     )
    )
    (local.set $$8
     (i32.load
      (local.get $$1)
     )
    )
    (local.set $$9
     (i32.eq
      (local.get $$8)
      (i32.const 0)
     )
    )
    (if
     (local.get $$9)
     (local.set $$$0
      (i32.const -1)
     )
     (local.set $label
      (i32.const 3)
     )
    )
   )
   (local.set $label
    (i32.const 3)
   )
  )
  (if
   (i32.eq
    (local.get $label)
    (i32.const 3)
   )
   (block
    (local.set $$10
     (i32.add
      (local.get $$0)
      (i32.const 4)
     )
    )
    (local.set $$11
     (i32.load
      (local.get $$10)
     )
    )
    (local.set $$12
     (i32.add
      (local.get $$0)
      (i32.const 8)
     )
    )
    (local.set $$13
     (i32.load
      (local.get $$12)
     )
    )
    (local.set $$14
     (i32.lt_u
      (local.get $$11)
      (local.get $$13)
     )
    )
    (if
     (local.get $$14)
     (block
      (local.set $$15
       (local.get $$11)
      )
      (local.set $$16
       (local.get $$13)
      )
      (local.set $$17
       (i32.sub
        (local.get $$15)
        (local.get $$16)
       )
      )
      (local.set $$18
       (i64.extend_i32_s
        (local.get $$17)
       )
      )
      (local.set $$19
       (i32.add
        (local.get $$0)
        (i32.const 40)
       )
      )
      (local.set $$20
       (i32.load
        (local.get $$19)
       )
      )
      (drop
       (call_indirect (type $FUNCSIG$jiji)
        (local.get $$0)
        (local.get $$18)
        (i32.const 1)
        (i32.add
         (i32.and
          (local.get $$20)
          (i32.const 3)
         )
         (i32.const 6)
        )
       )
      )
     )
    )
    (local.set $$21
     (i32.add
      (local.get $$0)
      (i32.const 16)
     )
    )
    (i32.store
     (local.get $$21)
     (i32.const 0)
    )
    (i32.store
     (local.get $$3)
     (i32.const 0)
    )
    (i32.store
     (local.get $$1)
     (i32.const 0)
    )
    (i32.store
     (local.get $$12)
     (i32.const 0)
    )
    (i32.store
     (local.get $$10)
     (i32.const 0)
    )
    (local.set $$$0
     (i32.const 0)
    )
   )
  )
  (return
   (local.get $$$0)
  )
 )
 (func $___sin (; 29 ;) (param $$0 f64) (param $$1 f64) (param $$2 i32) (result f64)
  (local $$$0 f64)
  (local $$10 f64)
  (local $$11 f64)
  (local $$12 f64)
  (local $$13 f64)
  (local $$14 f64)
  (local $$15 i32)
  (local $$16 f64)
  (local $$17 f64)
  (local $$18 f64)
  (local $$19 f64)
  (local $$20 f64)
  (local $$21 f64)
  (local $$22 f64)
  (local $$23 f64)
  (local $$24 f64)
  (local $$25 f64)
  (local $$26 f64)
  (local $$27 f64)
  (local $$3 f64)
  (local $$4 f64)
  (local $$5 f64)
  (local $$6 f64)
  (local $$7 f64)
  (local $$8 f64)
  (local $$9 f64)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (local.set $$3
   (f64.mul
    (local.get $$0)
    (local.get $$0)
   )
  )
  (local.set $$4
   (f64.mul
    (local.get $$3)
    (local.get $$3)
   )
  )
  (local.set $$5
   (f64.mul
    (local.get $$3)
    (f64.const 2.7557313707070068e-06)
   )
  )
  (local.set $$6
   (f64.add
    (local.get $$5)
    (f64.const -1.984126982985795e-04)
   )
  )
  (local.set $$7
   (f64.mul
    (local.get $$3)
    (local.get $$6)
   )
  )
  (local.set $$8
   (f64.add
    (local.get $$7)
    (f64.const 0.00833333333332249)
   )
  )
  (local.set $$9
   (f64.mul
    (local.get $$3)
    (local.get $$4)
   )
  )
  (local.set $$10
   (f64.mul
    (local.get $$3)
    (f64.const 1.58969099521155e-10)
   )
  )
  (local.set $$11
   (f64.add
    (local.get $$10)
    (f64.const -2.5050760253406863e-08)
   )
  )
  (local.set $$12
   (f64.mul
    (local.get $$9)
    (local.get $$11)
   )
  )
  (local.set $$13
   (f64.add
    (local.get $$12)
    (local.get $$8)
   )
  )
  (local.set $$14
   (f64.mul
    (local.get $$3)
    (local.get $$0)
   )
  )
  (local.set $$15
   (i32.eq
    (local.get $$2)
    (i32.const 0)
   )
  )
  (if
   (local.get $$15)
   (block
    (local.set $$16
     (f64.mul
      (local.get $$3)
      (local.get $$13)
     )
    )
    (local.set $$17
     (f64.add
      (local.get $$16)
      (f64.const -0.16666666666666632)
     )
    )
    (local.set $$18
     (f64.mul
      (local.get $$14)
      (local.get $$17)
     )
    )
    (local.set $$19
     (f64.add
      (local.get $$18)
      (local.get $$0)
     )
    )
    (local.set $$$0
     (local.get $$19)
    )
   )
   (block
    (local.set $$20
     (f64.mul
      (local.get $$1)
      (f64.const 0.5)
     )
    )
    (local.set $$21
     (f64.mul
      (local.get $$14)
      (local.get $$13)
     )
    )
    (local.set $$22
     (f64.sub
      (local.get $$20)
      (local.get $$21)
     )
    )
    (local.set $$23
     (f64.mul
      (local.get $$3)
      (local.get $$22)
     )
    )
    (local.set $$24
     (f64.sub
      (local.get $$23)
      (local.get $$1)
     )
    )
    (local.set $$25
     (f64.mul
      (local.get $$14)
      (f64.const 0.16666666666666632)
     )
    )
    (local.set $$26
     (f64.add
      (local.get $$25)
      (local.get $$24)
     )
    )
    (local.set $$27
     (f64.sub
      (local.get $$0)
      (local.get $$26)
     )
    )
    (local.set $$$0
     (local.get $$27)
    )
   )
  )
  (return
   (local.get $$$0)
  )
 )
 (func $___rem_pio2_large (; 30 ;) (param $$0 i32) (param $$1 i32) (param $$2 i32) (param $$3 i32) (param $$4 i32) (result i32)
  (local $$$0$lcssa f64)
  (local $$$0248$lcssa f64)
  (local $$$0248336 f64)
  (local $$$0250 i32)
  (local $$$0250278 i32)
  (local $$$0250279 i32)
  (local $$$0251 i32)
  (local $$$0251$in i32)
  (local $$$0253 i32)
  (local $$$0256 i32)
  (local $$$0258373 i32)
  (local $$$0263372 i32)
  (local $$$0271 i32)
  (local $$$0271277 i32)
  (local $$$0273$lcssa i32)
  (local $$$0273341 i32)
  (local $$$0363 f64)
  (local $$$1$lcssa f64)
  (local $$$10291 i32)
  (local $$$11313 i32)
  (local $$$12309 i32)
  (local $$$1249 f64)
  (local $$$1252 i32)
  (local $$$1252$ph i32)
  (local $$$1254 i32)
  (local $$$1254$in i32)
  (local $$$1257318 i32)
  (local $$$1259362 i32)
  (local $$$1264368 i32)
  (local $$$1272 i32)
  (local $$$1274 i32)
  (local $$$1274$ph i32)
  (local $$$13303 i32)
  (local $$$1354 f64)
  (local $$$2255 i32)
  (local $$$2260335 i32)
  (local $$$2265334 i32)
  (local $$$2330 f64)
  (local $$$3261347 i32)
  (local $$$3266342 i32)
  (local $$$3319 f64)
  (local $$$4$lcssa f64)
  (local $$$4262353 i32)
  (local $$$4267348 i32)
  (local $$$4267348$in i32)
  (local $$$4290 f64)
  (local $$$5$lcssa f64)
  (local $$$5268361 i32)
  (local $$$5268361$in i32)
  (local $$$5298 f64)
  (local $$$6$lcssa f64)
  (local $$$6269329 i32)
  (local $$$6292 f64)
  (local $$$7$lcssa f64)
  (local $$$7270324 i32)
  (local $$$7304 f64)
  (local $$$8289 i32)
  (local $$$9297 i32)
  (local $$$neg i32)
  (local $$$neg281 i32)
  (local $$$phi$trans$insert i32)
  (local $$$phi$trans$insert395 i32)
  (local $$$pre f64)
  (local $$$pre396 f64)
  (local $$$sink i32)
  (local $$$sink425 i32)
  (local $$$sink427 i32)
  (local $$10 i32)
  (local $$100 f64)
  (local $$101 i32)
  (local $$102 f64)
  (local $$103 f64)
  (local $$104 i32)
  (local $$105 i32)
  (local $$106 i32)
  (local $$107 i32)
  (local $$108 i32)
  (local $$109 i32)
  (local $$11 i32)
  (local $$110 i32)
  (local $$111 i32)
  (local $$112 i32)
  (local $$113 i32)
  (local $$114 i32)
  (local $$115 i32)
  (local $$116 i32)
  (local $$117 i32)
  (local $$118 i32)
  (local $$119 i32)
  (local $$12 i32)
  (local $$120 f64)
  (local $$121 i32)
  (local $$122 i32)
  (local $$123 i32)
  (local $$124 f64)
  (local $$125 i32)
  (local $$126 i32)
  (local $$127 f64)
  (local $$128 f64)
  (local $$129 f64)
  (local $$13 i32)
  (local $$130 i32)
  (local $$131 i32)
  (local $$132 i32)
  (local $$133 i32)
  (local $$134 i32)
  (local $$135 i32)
  (local $$136 i32)
  (local $$137 f64)
  (local $$138 i32)
  (local $$139 f64)
  (local $$14 i32)
  (local $$140 i32)
  (local $$141 f64)
  (local $$142 f64)
  (local $$143 f64)
  (local $$144 i32)
  (local $$145 i32)
  (local $$146 i32)
  (local $$147 i32)
  (local $$148 i32)
  (local $$149 i32)
  (local $$15 i32)
  (local $$150 f64)
  (local $$151 i32)
  (local $$152 i32)
  (local $$153 i32)
  (local $$154 f64)
  (local $$155 f64)
  (local $$156 i32)
  (local $$157 f64)
  (local $$158 i32)
  (local $$159 i32)
  (local $$16 i32)
  (local $$160 i32)
  (local $$161 i32)
  (local $$162 f64)
  (local $$163 i32)
  (local $$164 i32)
  (local $$165 f64)
  (local $$166 f64)
  (local $$167 f64)
  (local $$168 i32)
  (local $$169 i32)
  (local $$17 i32)
  (local $$170 i32)
  (local $$171 i32)
  (local $$172 i32)
  (local $$173 i32)
  (local $$174 i32)
  (local $$175 f64)
  (local $$176 f64)
  (local $$177 i32)
  (local $$178 i32)
  (local $$179 i32)
  (local $$18 i32)
  (local $$180 f64)
  (local $$181 f64)
  (local $$182 i32)
  (local $$183 f64)
  (local $$184 f64)
  (local $$185 i32)
  (local $$186 i32)
  (local $$187 i32)
  (local $$188 f64)
  (local $$189 f64)
  (local $$19 i32)
  (local $$190 f64)
  (local $$191 f64)
  (local $$192 i32)
  (local $$193 i32)
  (local $$194 f64)
  (local $$195 f64)
  (local $$196 i32)
  (local $$197 f64)
  (local $$198 f64)
  (local $$199 i32)
  (local $$20 i32)
  (local $$200 i32)
  (local $$201 i32)
  (local $$202 i32)
  (local $$203 f64)
  (local $$204 i32)
  (local $$205 f64)
  (local $$206 f64)
  (local $$207 f64)
  (local $$208 f64)
  (local $$209 i32)
  (local $$21 i32)
  (local $$210 i32)
  (local $$211 i32)
  (local $$212 i32)
  (local $$213 f64)
  (local $$214 i32)
  (local $$215 f64)
  (local $$216 f64)
  (local $$217 f64)
  (local $$218 f64)
  (local $$219 i32)
  (local $$22 i32)
  (local $$220 i32)
  (local $$221 f64)
  (local $$222 f64)
  (local $$223 i32)
  (local $$224 i32)
  (local $$225 i32)
  (local $$226 f64)
  (local $$227 i32)
  (local $$228 f64)
  (local $$229 i32)
  (local $$23 f64)
  (local $$230 i32)
  (local $$231 f64)
  (local $$232 i32)
  (local $$233 f64)
  (local $$234 f64)
  (local $$235 i32)
  (local $$236 f64)
  (local $$237 i32)
  (local $$238 i32)
  (local $$24 i32)
  (local $$25 f64)
  (local $$26 i32)
  (local $$27 i32)
  (local $$28 i32)
  (local $$29 i32)
  (local $$30 i32)
  (local $$31 f64)
  (local $$32 i32)
  (local $$33 i32)
  (local $$34 f64)
  (local $$35 f64)
  (local $$36 f64)
  (local $$37 i32)
  (local $$38 i32)
  (local $$39 i32)
  (local $$40 i32)
  (local $$41 i32)
  (local $$42 i32)
  (local $$43 i32)
  (local $$44 i32)
  (local $$45 i32)
  (local $$46 i32)
  (local $$47 f64)
  (local $$48 i32)
  (local $$49 f64)
  (local $$5 i32)
  (local $$50 i32)
  (local $$51 f64)
  (local $$52 f64)
  (local $$53 f64)
  (local $$54 i32)
  (local $$55 i32)
  (local $$56 i32)
  (local $$57 i32)
  (local $$58 f64)
  (local $$59 f64)
  (local $$6 i32)
  (local $$60 i32)
  (local $$61 i32)
  (local $$62 f64)
  (local $$63 f64)
  (local $$64 f64)
  (local $$65 f64)
  (local $$66 f64)
  (local $$67 i32)
  (local $$68 f64)
  (local $$69 f64)
  (local $$7 i32)
  (local $$70 i32)
  (local $$71 i32)
  (local $$72 i32)
  (local $$73 i32)
  (local $$74 i32)
  (local $$75 i32)
  (local $$76 i32)
  (local $$77 i32)
  (local $$78 i32)
  (local $$79 i32)
  (local $$8 i32)
  (local $$80 i32)
  (local $$81 i32)
  (local $$82 i32)
  (local $$83 i32)
  (local $$84 i32)
  (local $$85 i32)
  (local $$86 i32)
  (local $$87 i32)
  (local $$88 i32)
  (local $$89 i32)
  (local $$9 i32)
  (local $$90 i32)
  (local $$91 i32)
  (local $$92 i32)
  (local $$93 i32)
  (local $$94 i32)
  (local $$95 i32)
  (local $$96 i32)
  (local $$97 i32)
  (local $$98 i32)
  (local $$99 i32)
  (local $$exitcond i32)
  (local $$exitcond391 i32)
  (local $$exitcond392 i32)
  (local $$exitcond393 i32)
  (local $$exitcond394 i32)
  (local $$or$cond i32)
  (local $$spec$store$select i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (global.set $STACKTOP
   (i32.add
    (global.get $STACKTOP)
    (i32.const 560)
   )
  )
  (if
   (i32.ge_s
    (global.get $STACKTOP)
    (global.get $STACK_MAX)
   )
   (call $abortStackOverflow
    (i32.const 560)
   )
  )
  (local.set $$5
   (i32.add
    (local.get $sp)
    (i32.const 480)
   )
  )
  (local.set $$6
   (i32.add
    (local.get $sp)
    (i32.const 320)
   )
  )
  (local.set $$7
   (i32.add
    (local.get $sp)
    (i32.const 160)
   )
  )
  (local.set $$8
   (local.get $sp)
  )
  (local.set $$9
   (i32.add
    (i32.const 1024)
    (i32.shl
     (local.get $$4)
     (i32.const 2)
    )
   )
  )
  (local.set $$10
   (i32.load
    (local.get $$9)
   )
  )
  (local.set $$11
   (i32.add
    (local.get $$3)
    (i32.const -1)
   )
  )
  (local.set $$12
   (i32.add
    (local.get $$2)
    (i32.const -3)
   )
  )
  (local.set $$13
   (i32.and
    (i32.div_s
     (local.get $$12)
     (i32.const 24)
    )
    (i32.const -1)
   )
  )
  (local.set $$14
   (i32.gt_s
    (local.get $$13)
    (i32.const 0)
   )
  )
  (local.set $$spec$store$select
   (if (result i32)
    (local.get $$14)
    (local.get $$13)
    (i32.const 0)
   )
  )
  (local.set $$$neg
   (i32.mul
    (local.get $$spec$store$select)
    (i32.const -24)
   )
  )
  (local.set $$$neg281
   (i32.add
    (local.get $$2)
    (i32.const -24)
   )
  )
  (local.set $$15
   (i32.add
    (local.get $$$neg281)
    (local.get $$$neg)
   )
  )
  (local.set $$16
   (i32.add
    (local.get $$10)
    (local.get $$11)
   )
  )
  (local.set $$17
   (i32.lt_s
    (local.get $$16)
    (i32.const 0)
   )
  )
  (if
   (i32.eqz
    (local.get $$17)
   )
   (block
    (local.set $$18
     (i32.sub
      (local.get $$spec$store$select)
      (local.get $$11)
     )
    )
    (local.set $$19
     (i32.add
      (local.get $$10)
      (local.get $$3)
     )
    )
    (local.set $$$0258373
     (local.get $$18)
    )
    (local.set $$$0263372
     (i32.const 0)
    )
    (loop $while-in
     (block $while-out
      (local.set $$20
       (i32.lt_s
        (local.get $$$0258373)
        (i32.const 0)
       )
      )
      (if
       (local.get $$20)
       (local.set $$25
        (f64.const 0)
       )
       (block
        (local.set $$21
         (i32.add
          (i32.const 1040)
          (i32.shl
           (local.get $$$0258373)
           (i32.const 2)
          )
         )
        )
        (local.set $$22
         (i32.load
          (local.get $$21)
         )
        )
        (local.set $$23
         (f64.convert_i32_s
          (local.get $$22)
         )
        )
        (local.set $$25
         (local.get $$23)
        )
       )
      )
      (local.set $$24
       (i32.add
        (local.get $$6)
        (i32.shl
         (local.get $$$0263372)
         (i32.const 3)
        )
       )
      )
      (f64.store
       (local.get $$24)
       (local.get $$25)
      )
      (local.set $$26
       (i32.add
        (local.get $$$0263372)
        (i32.const 1)
       )
      )
      (local.set $$27
       (i32.add
        (local.get $$$0258373)
        (i32.const 1)
       )
      )
      (local.set $$exitcond394
       (i32.eq
        (local.get $$26)
        (local.get $$19)
       )
      )
      (if
       (local.get $$exitcond394)
       (br $while-out)
       (block
        (local.set $$$0258373
         (local.get $$27)
        )
        (local.set $$$0263372
         (local.get $$26)
        )
       )
      )
      (br $while-in)
     )
    )
   )
  )
  (local.set $$28
   (i32.gt_s
    (local.get $$3)
    (i32.const 0)
   )
  )
  (local.set $$$1264368
   (i32.const 0)
  )
  (loop $while-in1
   (block $while-out0
    (if
     (local.get $$28)
     (block
      (local.set $$29
       (i32.add
        (local.get $$$1264368)
        (local.get $$11)
       )
      )
      (local.set $$$0363
       (f64.const 0)
      )
      (local.set $$$1259362
       (i32.const 0)
      )
      (loop $while-in3
       (block $while-out2
        (local.set $$30
         (i32.add
          (local.get $$0)
          (i32.shl
           (local.get $$$1259362)
           (i32.const 3)
          )
         )
        )
        (local.set $$31
         (f64.load
          (local.get $$30)
         )
        )
        (local.set $$32
         (i32.sub
          (local.get $$29)
          (local.get $$$1259362)
         )
        )
        (local.set $$33
         (i32.add
          (local.get $$6)
          (i32.shl
           (local.get $$32)
           (i32.const 3)
          )
         )
        )
        (local.set $$34
         (f64.load
          (local.get $$33)
         )
        )
        (local.set $$35
         (f64.mul
          (local.get $$31)
          (local.get $$34)
         )
        )
        (local.set $$36
         (f64.add
          (local.get $$$0363)
          (local.get $$35)
         )
        )
        (local.set $$37
         (i32.add
          (local.get $$$1259362)
          (i32.const 1)
         )
        )
        (local.set $$exitcond393
         (i32.eq
          (local.get $$37)
          (local.get $$3)
         )
        )
        (if
         (local.get $$exitcond393)
         (block
          (local.set $$$0$lcssa
           (local.get $$36)
          )
          (br $while-out2)
         )
         (block
          (local.set $$$0363
           (local.get $$36)
          )
          (local.set $$$1259362
           (local.get $$37)
          )
         )
        )
        (br $while-in3)
       )
      )
     )
     (local.set $$$0$lcssa
      (f64.const 0)
     )
    )
    (local.set $$38
     (i32.add
      (local.get $$8)
      (i32.shl
       (local.get $$$1264368)
       (i32.const 3)
      )
     )
    )
    (f64.store
     (local.get $$38)
     (local.get $$$0$lcssa)
    )
    (local.set $$39
     (i32.add
      (local.get $$$1264368)
      (i32.const 1)
     )
    )
    (local.set $$40
     (i32.lt_s
      (local.get $$$1264368)
      (local.get $$10)
     )
    )
    (if
     (local.get $$40)
     (local.set $$$1264368
      (local.get $$39)
     )
     (br $while-out0)
    )
    (br $while-in1)
   )
  )
  (local.set $$41
   (i32.gt_s
    (local.get $$15)
    (i32.const 0)
   )
  )
  (local.set $$42
   (i32.sub
    (i32.const 24)
    (local.get $$15)
   )
  )
  (local.set $$43
   (i32.sub
    (i32.const 23)
    (local.get $$15)
   )
  )
  (local.set $$44
   (i32.eq
    (local.get $$15)
    (i32.const 0)
   )
  )
  (local.set $$45
   (i32.gt_s
    (local.get $$3)
    (i32.const 0)
   )
  )
  (local.set $$$0253
   (local.get $$10)
  )
  (loop $while-in5
   (block $while-out4
    (local.set $$46
     (i32.add
      (local.get $$8)
      (i32.shl
       (local.get $$$0253)
       (i32.const 3)
      )
     )
    )
    (local.set $$47
     (f64.load
      (local.get $$46)
     )
    )
    (local.set $$48
     (i32.gt_s
      (local.get $$$0253)
      (i32.const 0)
     )
    )
    (if
     (local.get $$48)
     (block
      (local.set $$$0248336
       (local.get $$47)
      )
      (local.set $$$2260335
       (local.get $$$0253)
      )
      (local.set $$$2265334
       (i32.const 0)
      )
      (loop $while-in7
       (block $while-out6
        (local.set $$49
         (f64.mul
          (local.get $$$0248336)
          (f64.const 5.9604644775390625e-08)
         )
        )
        (local.set $$50
         (i32.trunc_f64_s
          (local.get $$49)
         )
        )
        (local.set $$51
         (f64.convert_i32_s
          (local.get $$50)
         )
        )
        (local.set $$52
         (f64.mul
          (local.get $$51)
          (f64.const 16777216)
         )
        )
        (local.set $$53
         (f64.sub
          (local.get $$$0248336)
          (local.get $$52)
         )
        )
        (local.set $$54
         (i32.trunc_f64_s
          (local.get $$53)
         )
        )
        (local.set $$55
         (i32.add
          (local.get $$5)
          (i32.shl
           (local.get $$$2265334)
           (i32.const 2)
          )
         )
        )
        (i32.store
         (local.get $$55)
         (local.get $$54)
        )
        (local.set $$56
         (i32.add
          (local.get $$$2260335)
          (i32.const -1)
         )
        )
        (local.set $$57
         (i32.add
          (local.get $$8)
          (i32.shl
           (local.get $$56)
           (i32.const 3)
          )
         )
        )
        (local.set $$58
         (f64.load
          (local.get $$57)
         )
        )
        (local.set $$59
         (f64.add
          (local.get $$58)
          (local.get $$51)
         )
        )
        (local.set $$60
         (i32.add
          (local.get $$$2265334)
          (i32.const 1)
         )
        )
        (local.set $$61
         (i32.gt_s
          (local.get $$$2260335)
          (i32.const 1)
         )
        )
        (if
         (local.get $$61)
         (block
          (local.set $$$0248336
           (local.get $$59)
          )
          (local.set $$$2260335
           (local.get $$56)
          )
          (local.set $$$2265334
           (local.get $$60)
          )
         )
         (block
          (local.set $$$0248$lcssa
           (local.get $$59)
          )
          (br $while-out6)
         )
        )
        (br $while-in7)
       )
      )
     )
     (local.set $$$0248$lcssa
      (local.get $$47)
     )
    )
    (local.set $$62
     (call $_scalbn
      (local.get $$$0248$lcssa)
      (local.get $$15)
     )
    )
    (local.set $$63
     (f64.mul
      (local.get $$62)
      (f64.const 0.125)
     )
    )
    (local.set $$64
     (f64.floor
      (local.get $$63)
     )
    )
    (local.set $$65
     (f64.mul
      (local.get $$64)
      (f64.const 8)
     )
    )
    (local.set $$66
     (f64.sub
      (local.get $$62)
      (local.get $$65)
     )
    )
    (local.set $$67
     (i32.trunc_f64_s
      (local.get $$66)
     )
    )
    (local.set $$68
     (f64.convert_i32_s
      (local.get $$67)
     )
    )
    (local.set $$69
     (f64.sub
      (local.get $$66)
      (local.get $$68)
     )
    )
    (block $do-once
     (if
      (local.get $$41)
      (block
       (local.set $$70
        (i32.add
         (local.get $$$0253)
         (i32.const -1)
        )
       )
       (local.set $$71
        (i32.add
         (local.get $$5)
         (i32.shl
          (local.get $$70)
          (i32.const 2)
         )
        )
       )
       (local.set $$72
        (i32.load
         (local.get $$71)
        )
       )
       (local.set $$73
        (i32.shr_s
         (local.get $$72)
         (local.get $$42)
        )
       )
       (local.set $$74
        (i32.add
         (local.get $$73)
         (local.get $$67)
        )
       )
       (local.set $$75
        (i32.shl
         (local.get $$73)
         (local.get $$42)
        )
       )
       (local.set $$76
        (i32.sub
         (local.get $$72)
         (local.get $$75)
        )
       )
       (i32.store
        (local.get $$71)
        (local.get $$76)
       )
       (local.set $$77
        (i32.shr_s
         (local.get $$76)
         (local.get $$43)
        )
       )
       (local.set $$$0250
        (local.get $$77)
       )
       (local.set $$$0271
        (local.get $$74)
       )
       (local.set $label
        (i32.const 21)
       )
      )
      (if
       (local.get $$44)
       (block
        (local.set $$78
         (i32.add
          (local.get $$$0253)
          (i32.const -1)
         )
        )
        (local.set $$79
         (i32.add
          (local.get $$5)
          (i32.shl
           (local.get $$78)
           (i32.const 2)
          )
         )
        )
        (local.set $$80
         (i32.load
          (local.get $$79)
         )
        )
        (local.set $$81
         (i32.shr_s
          (local.get $$80)
          (i32.const 23)
         )
        )
        (local.set $$$0250
         (local.get $$81)
        )
        (local.set $$$0271
         (local.get $$67)
        )
        (local.set $label
         (i32.const 21)
        )
        (br $do-once)
       )
       (block
        (local.set $$82
         (i32.eqz
          (f64.ge
           (local.get $$69)
           (f64.const 0.5)
          )
         )
        )
        (if
         (local.get $$82)
         (block
          (local.set $$$0250279
           (i32.const 0)
          )
          (local.set $$$1249
           (local.get $$69)
          )
          (local.set $$$1272
           (local.get $$67)
          )
          (br $do-once)
         )
         (block
          (local.set $$$0250278
           (i32.const 2)
          )
          (local.set $$$0271277
           (local.get $$67)
          )
          (local.set $label
           (i32.const 22)
          )
          (br $do-once)
         )
        )
       )
      )
     )
    )
    (if
     (i32.eq
      (local.get $label)
      (i32.const 21)
     )
     (block
      (local.set $label
       (i32.const 0)
      )
      (local.set $$83
       (i32.gt_s
        (local.get $$$0250)
        (i32.const 0)
       )
      )
      (if
       (local.get $$83)
       (block
        (local.set $$$0250278
         (local.get $$$0250)
        )
        (local.set $$$0271277
         (local.get $$$0271)
        )
        (local.set $label
         (i32.const 22)
        )
       )
       (block
        (local.set $$$0250279
         (local.get $$$0250)
        )
        (local.set $$$1249
         (local.get $$69)
        )
        (local.set $$$1272
         (local.get $$$0271)
        )
       )
      )
     )
    )
    (if
     (i32.eq
      (local.get $label)
      (i32.const 22)
     )
     (block
      (local.set $label
       (i32.const 0)
      )
      (local.set $$84
       (i32.add
        (local.get $$$0271277)
        (i32.const 1)
       )
      )
      (if
       (local.get $$48)
       (block
        (local.set $$$0273341
         (i32.const 0)
        )
        (local.set $$$3266342
         (i32.const 0)
        )
        (loop $while-in9
         (block $while-out8
          (local.set $$85
           (i32.add
            (local.get $$5)
            (i32.shl
             (local.get $$$3266342)
             (i32.const 2)
            )
           )
          )
          (local.set $$86
           (i32.load
            (local.get $$85)
           )
          )
          (local.set $$87
           (i32.eq
            (local.get $$$0273341)
            (i32.const 0)
           )
          )
          (if
           (local.get $$87)
           (block
            (local.set $$88
             (i32.eq
              (local.get $$86)
              (i32.const 0)
             )
            )
            (if
             (local.get $$88)
             (local.set $$$1274
              (i32.const 0)
             )
             (block
              (local.set $$$1274$ph
               (i32.const 1)
              )
              (local.set $$$sink425
               (i32.const 16777216)
              )
              (local.set $label
               (i32.const 26)
              )
             )
            )
           )
           (block
            (local.set $$$1274$ph
             (local.get $$$0273341)
            )
            (local.set $$$sink425
             (i32.const 16777215)
            )
            (local.set $label
             (i32.const 26)
            )
           )
          )
          (if
           (i32.eq
            (local.get $label)
            (i32.const 26)
           )
           (block
            (local.set $label
             (i32.const 0)
            )
            (local.set $$89
             (i32.sub
              (local.get $$$sink425)
              (local.get $$86)
             )
            )
            (i32.store
             (local.get $$85)
             (local.get $$89)
            )
            (local.set $$$1274
             (local.get $$$1274$ph)
            )
           )
          )
          (local.set $$90
           (i32.add
            (local.get $$$3266342)
            (i32.const 1)
           )
          )
          (local.set $$exitcond391
           (i32.eq
            (local.get $$90)
            (local.get $$$0253)
           )
          )
          (if
           (local.get $$exitcond391)
           (block
            (local.set $$$0273$lcssa
             (local.get $$$1274)
            )
            (br $while-out8)
           )
           (block
            (local.set $$$0273341
             (local.get $$$1274)
            )
            (local.set $$$3266342
             (local.get $$90)
            )
           )
          )
          (br $while-in9)
         )
        )
       )
       (local.set $$$0273$lcssa
        (i32.const 0)
       )
      )
      (block $label$break$L44
       (if
        (local.get $$41)
        (block $switch
         (block $switch-default
          (block $switch-case11
           (block $switch-case
            (br_table $switch-case $switch-case11 $switch-default
             (i32.sub
              (local.get $$15)
              (i32.const 1)
             )
            )
           )
           (block
            (local.set $$91
             (i32.add
              (local.get $$$0253)
              (i32.const -1)
             )
            )
            (local.set $$92
             (i32.add
              (local.get $$5)
              (i32.shl
               (local.get $$91)
               (i32.const 2)
              )
             )
            )
            (local.set $$93
             (i32.load
              (local.get $$92)
             )
            )
            (local.set $$94
             (i32.and
              (local.get $$93)
              (i32.const 8388607)
             )
            )
            (i32.store
             (local.get $$92)
             (local.get $$94)
            )
            (br $label$break$L44)
            (br $switch)
           )
          )
          (block
           (local.set $$95
            (i32.add
             (local.get $$$0253)
             (i32.const -1)
            )
           )
           (local.set $$96
            (i32.add
             (local.get $$5)
             (i32.shl
              (local.get $$95)
              (i32.const 2)
             )
            )
           )
           (local.set $$97
            (i32.load
             (local.get $$96)
            )
           )
           (local.set $$98
            (i32.and
             (local.get $$97)
             (i32.const 4194303)
            )
           )
           (i32.store
            (local.get $$96)
            (local.get $$98)
           )
           (br $label$break$L44)
           (br $switch)
          )
         )
         (br $label$break$L44)
        )
       )
      )
      (local.set $$99
       (i32.eq
        (local.get $$$0250278)
        (i32.const 2)
       )
      )
      (if
       (local.get $$99)
       (block
        (local.set $$100
         (f64.sub
          (f64.const 1)
          (local.get $$69)
         )
        )
        (local.set $$101
         (i32.eq
          (local.get $$$0273$lcssa)
          (i32.const 0)
         )
        )
        (if
         (local.get $$101)
         (block
          (local.set $$$0250279
           (i32.const 2)
          )
          (local.set $$$1249
           (local.get $$100)
          )
          (local.set $$$1272
           (local.get $$84)
          )
         )
         (block
          (local.set $$102
           (call $_scalbn
            (f64.const 1)
            (local.get $$15)
           )
          )
          (local.set $$103
           (f64.sub
            (local.get $$100)
            (local.get $$102)
           )
          )
          (local.set $$$0250279
           (i32.const 2)
          )
          (local.set $$$1249
           (local.get $$103)
          )
          (local.set $$$1272
           (local.get $$84)
          )
         )
        )
       )
       (block
        (local.set $$$0250279
         (local.get $$$0250278)
        )
        (local.set $$$1249
         (local.get $$69)
        )
        (local.set $$$1272
         (local.get $$84)
        )
       )
      )
     )
    )
    (local.set $$104
     (f64.eq
      (local.get $$$1249)
      (f64.const 0)
     )
    )
    (if
     (i32.eqz
      (local.get $$104)
     )
     (block
      (local.set $label
       (i32.const 49)
      )
      (br $while-out4)
     )
    )
    (local.set $$105
     (i32.gt_s
      (local.get $$$0253)
      (local.get $$10)
     )
    )
    (if
     (local.get $$105)
     (block
      (local.set $$$3261347
       (i32.const 0)
      )
      (local.set $$$4267348$in
       (local.get $$$0253)
      )
      (loop $while-in13
       (block $while-out12
        (local.set $$$4267348
         (i32.add
          (local.get $$$4267348$in)
          (i32.const -1)
         )
        )
        (local.set $$106
         (i32.add
          (local.get $$5)
          (i32.shl
           (local.get $$$4267348)
           (i32.const 2)
          )
         )
        )
        (local.set $$107
         (i32.load
          (local.get $$106)
         )
        )
        (local.set $$108
         (i32.or
          (local.get $$107)
          (local.get $$$3261347)
         )
        )
        (local.set $$109
         (i32.gt_s
          (local.get $$$4267348)
          (local.get $$10)
         )
        )
        (if
         (local.get $$109)
         (block
          (local.set $$$3261347
           (local.get $$108)
          )
          (local.set $$$4267348$in
           (local.get $$$4267348)
          )
         )
         (br $while-out12)
        )
        (br $while-in13)
       )
      )
      (local.set $$110
       (i32.eq
        (local.get $$108)
        (i32.const 0)
       )
      )
      (if
       (i32.eqz
        (local.get $$110)
       )
       (block
        (local.set $label
         (i32.const 41)
        )
        (br $while-out4)
       )
      )
     )
    )
    (local.set $$$0256
     (i32.const 1)
    )
    (loop $while-in15
     (block $while-out14
      (local.set $$111
       (i32.sub
        (local.get $$10)
        (local.get $$$0256)
       )
      )
      (local.set $$112
       (i32.add
        (local.get $$5)
        (i32.shl
         (local.get $$111)
         (i32.const 2)
        )
       )
      )
      (local.set $$113
       (i32.load
        (local.get $$112)
       )
      )
      (local.set $$114
       (i32.eq
        (local.get $$113)
        (i32.const 0)
       )
      )
      (local.set $$115
       (i32.add
        (local.get $$$0256)
        (i32.const 1)
       )
      )
      (if
       (local.get $$114)
       (local.set $$$0256
        (local.get $$115)
       )
       (br $while-out14)
      )
      (br $while-in15)
     )
    )
    (local.set $$116
     (i32.add
      (local.get $$$0256)
      (local.get $$$0253)
     )
    )
    (local.set $$$5268361$in
     (local.get $$$0253)
    )
    (loop $while-in17
     (block $while-out16
      (local.set $$$5268361
       (i32.add
        (local.get $$$5268361$in)
        (i32.const 1)
       )
      )
      (local.set $$117
       (i32.add
        (local.get $$$5268361)
        (local.get $$spec$store$select)
       )
      )
      (local.set $$118
       (i32.add
        (i32.const 1040)
        (i32.shl
         (local.get $$117)
         (i32.const 2)
        )
       )
      )
      (local.set $$119
       (i32.load
        (local.get $$118)
       )
      )
      (local.set $$120
       (f64.convert_i32_s
        (local.get $$119)
       )
      )
      (local.set $$121
       (i32.add
        (local.get $$$5268361$in)
        (local.get $$3)
       )
      )
      (local.set $$122
       (i32.add
        (local.get $$6)
        (i32.shl
         (local.get $$121)
         (i32.const 3)
        )
       )
      )
      (f64.store
       (local.get $$122)
       (local.get $$120)
      )
      (if
       (local.get $$45)
       (block
        (local.set $$$1354
         (f64.const 0)
        )
        (local.set $$$4262353
         (i32.const 0)
        )
        (loop $while-in19
         (block $while-out18
          (local.set $$123
           (i32.add
            (local.get $$0)
            (i32.shl
             (local.get $$$4262353)
             (i32.const 3)
            )
           )
          )
          (local.set $$124
           (f64.load
            (local.get $$123)
           )
          )
          (local.set $$125
           (i32.sub
            (local.get $$121)
            (local.get $$$4262353)
           )
          )
          (local.set $$126
           (i32.add
            (local.get $$6)
            (i32.shl
             (local.get $$125)
             (i32.const 3)
            )
           )
          )
          (local.set $$127
           (f64.load
            (local.get $$126)
           )
          )
          (local.set $$128
           (f64.mul
            (local.get $$124)
            (local.get $$127)
           )
          )
          (local.set $$129
           (f64.add
            (local.get $$$1354)
            (local.get $$128)
           )
          )
          (local.set $$130
           (i32.add
            (local.get $$$4262353)
            (i32.const 1)
           )
          )
          (local.set $$exitcond392
           (i32.eq
            (local.get $$130)
            (local.get $$3)
           )
          )
          (if
           (local.get $$exitcond392)
           (block
            (local.set $$$1$lcssa
             (local.get $$129)
            )
            (br $while-out18)
           )
           (block
            (local.set $$$1354
             (local.get $$129)
            )
            (local.set $$$4262353
             (local.get $$130)
            )
           )
          )
          (br $while-in19)
         )
        )
       )
       (local.set $$$1$lcssa
        (f64.const 0)
       )
      )
      (local.set $$131
       (i32.add
        (local.get $$8)
        (i32.shl
         (local.get $$$5268361)
         (i32.const 3)
        )
       )
      )
      (f64.store
       (local.get $$131)
       (local.get $$$1$lcssa)
      )
      (local.set $$132
       (i32.lt_s
        (local.get $$$5268361)
        (local.get $$116)
       )
      )
      (if
       (local.get $$132)
       (local.set $$$5268361$in
        (local.get $$$5268361)
       )
       (br $while-out16)
      )
      (br $while-in17)
     )
    )
    (local.set $$$0253
     (local.get $$116)
    )
    (br $while-in5)
   )
  )
  (if
   (i32.eq
    (local.get $label)
    (i32.const 41)
   )
   (block
    (local.set $$$0251$in
     (local.get $$15)
    )
    (local.set $$$1254$in
     (local.get $$$0253)
    )
    (loop $while-in21
     (block $while-out20
      (local.set $$$0251
       (i32.add
        (local.get $$$0251$in)
        (i32.const -24)
       )
      )
      (local.set $$$1254
       (i32.add
        (local.get $$$1254$in)
        (i32.const -1)
       )
      )
      (local.set $$133
       (i32.add
        (local.get $$5)
        (i32.shl
         (local.get $$$1254)
         (i32.const 2)
        )
       )
      )
      (local.set $$134
       (i32.load
        (local.get $$133)
       )
      )
      (local.set $$135
       (i32.eq
        (local.get $$134)
        (i32.const 0)
       )
      )
      (if
       (local.get $$135)
       (block
        (local.set $$$0251$in
         (local.get $$$0251)
        )
        (local.set $$$1254$in
         (local.get $$$1254)
        )
       )
       (block
        (local.set $$$1252
         (local.get $$$0251)
        )
        (local.set $$$2255
         (local.get $$$1254)
        )
        (br $while-out20)
       )
      )
      (br $while-in21)
     )
    )
   )
   (if
    (i32.eq
     (local.get $label)
     (i32.const 49)
    )
    (block
     (local.set $$136
      (i32.sub
       (i32.const 0)
       (local.get $$15)
      )
     )
     (local.set $$137
      (call $_scalbn
       (local.get $$$1249)
       (local.get $$136)
      )
     )
     (local.set $$138
      (i32.eqz
       (f64.ge
        (local.get $$137)
        (f64.const 16777216)
       )
      )
     )
     (if
      (local.get $$138)
      (block
       (local.set $$148
        (i32.trunc_f64_s
         (local.get $$137)
        )
       )
       (local.set $$$1252$ph
        (local.get $$15)
       )
       (local.set $$$sink
        (local.get $$148)
       )
       (local.set $$$sink427
        (local.get $$$0253)
       )
      )
      (block
       (local.set $$139
        (f64.mul
         (local.get $$137)
         (f64.const 5.9604644775390625e-08)
        )
       )
       (local.set $$140
        (i32.trunc_f64_s
         (local.get $$139)
        )
       )
       (local.set $$141
        (f64.convert_i32_s
         (local.get $$140)
        )
       )
       (local.set $$142
        (f64.mul
         (local.get $$141)
         (f64.const 16777216)
        )
       )
       (local.set $$143
        (f64.sub
         (local.get $$137)
         (local.get $$142)
        )
       )
       (local.set $$144
        (i32.trunc_f64_s
         (local.get $$143)
        )
       )
       (local.set $$145
        (i32.add
         (local.get $$5)
         (i32.shl
          (local.get $$$0253)
          (i32.const 2)
         )
        )
       )
       (i32.store
        (local.get $$145)
        (local.get $$144)
       )
       (local.set $$146
        (i32.add
         (local.get $$$0253)
         (i32.const 1)
        )
       )
       (local.set $$147
        (i32.add
         (local.get $$$neg)
         (local.get $$2)
        )
       )
       (local.set $$$1252$ph
        (local.get $$147)
       )
       (local.set $$$sink
        (local.get $$140)
       )
       (local.set $$$sink427
        (local.get $$146)
       )
      )
     )
     (local.set $$149
      (i32.add
       (local.get $$5)
       (i32.shl
        (local.get $$$sink427)
        (i32.const 2)
       )
      )
     )
     (i32.store
      (local.get $$149)
      (local.get $$$sink)
     )
     (local.set $$$1252
      (local.get $$$1252$ph)
     )
     (local.set $$$2255
      (local.get $$$sink427)
     )
    )
   )
  )
  (local.set $$150
   (call $_scalbn
    (f64.const 1)
    (local.get $$$1252)
   )
  )
  (local.set $$151
   (i32.gt_s
    (local.get $$$2255)
    (i32.const -1)
   )
  )
  (if
   (local.get $$151)
   (block
    (local.set $$$2330
     (local.get $$150)
    )
    (local.set $$$6269329
     (local.get $$$2255)
    )
    (loop $while-in23
     (block $while-out22
      (local.set $$152
       (i32.add
        (local.get $$5)
        (i32.shl
         (local.get $$$6269329)
         (i32.const 2)
        )
       )
      )
      (local.set $$153
       (i32.load
        (local.get $$152)
       )
      )
      (local.set $$154
       (f64.convert_i32_s
        (local.get $$153)
       )
      )
      (local.set $$155
       (f64.mul
        (local.get $$$2330)
        (local.get $$154)
       )
      )
      (local.set $$156
       (i32.add
        (local.get $$8)
        (i32.shl
         (local.get $$$6269329)
         (i32.const 3)
        )
       )
      )
      (f64.store
       (local.get $$156)
       (local.get $$155)
      )
      (local.set $$157
       (f64.mul
        (local.get $$$2330)
        (f64.const 5.9604644775390625e-08)
       )
      )
      (local.set $$158
       (i32.add
        (local.get $$$6269329)
        (i32.const -1)
       )
      )
      (local.set $$159
       (i32.gt_s
        (local.get $$$6269329)
        (i32.const 0)
       )
      )
      (if
       (local.get $$159)
       (block
        (local.set $$$2330
         (local.get $$157)
        )
        (local.set $$$6269329
         (local.get $$158)
        )
       )
       (br $while-out22)
      )
      (br $while-in23)
     )
    )
    (if
     (local.get $$151)
     (block
      (local.set $$$7270324
       (local.get $$$2255)
      )
      (loop $while-in25
       (block $while-out24
        (local.set $$160
         (i32.sub
          (local.get $$$2255)
          (local.get $$$7270324)
         )
        )
        (local.set $$$1257318
         (i32.const 0)
        )
        (local.set $$$3319
         (f64.const 0)
        )
        (loop $while-in27
         (block $while-out26
          (local.set $$161
           (i32.add
            (i32.const 1312)
            (i32.shl
             (local.get $$$1257318)
             (i32.const 3)
            )
           )
          )
          (local.set $$162
           (f64.load
            (local.get $$161)
           )
          )
          (local.set $$163
           (i32.add
            (local.get $$$1257318)
            (local.get $$$7270324)
           )
          )
          (local.set $$164
           (i32.add
            (local.get $$8)
            (i32.shl
             (local.get $$163)
             (i32.const 3)
            )
           )
          )
          (local.set $$165
           (f64.load
            (local.get $$164)
           )
          )
          (local.set $$166
           (f64.mul
            (local.get $$162)
            (local.get $$165)
           )
          )
          (local.set $$167
           (f64.add
            (local.get $$$3319)
            (local.get $$166)
           )
          )
          (local.set $$168
           (i32.add
            (local.get $$$1257318)
            (i32.const 1)
           )
          )
          (local.set $$169
           (i32.ge_s
            (local.get $$$1257318)
            (local.get $$10)
           )
          )
          (local.set $$170
           (i32.ge_u
            (local.get $$$1257318)
            (local.get $$160)
           )
          )
          (local.set $$or$cond
           (i32.or
            (local.get $$169)
            (local.get $$170)
           )
          )
          (if
           (local.get $$or$cond)
           (br $while-out26)
           (block
            (local.set $$$1257318
             (local.get $$168)
            )
            (local.set $$$3319
             (local.get $$167)
            )
           )
          )
          (br $while-in27)
         )
        )
        (local.set $$171
         (i32.add
          (local.get $$7)
          (i32.shl
           (local.get $$160)
           (i32.const 3)
          )
         )
        )
        (f64.store
         (local.get $$171)
         (local.get $$167)
        )
        (local.set $$172
         (i32.add
          (local.get $$$7270324)
          (i32.const -1)
         )
        )
        (local.set $$173
         (i32.gt_s
          (local.get $$$7270324)
          (i32.const 0)
         )
        )
        (if
         (local.get $$173)
         (local.set $$$7270324
          (local.get $$172)
         )
         (br $while-out24)
        )
        (br $while-in25)
       )
      )
     )
    )
   )
  )
  (block $label$break$L93
   (block $switch29
    (block $switch-default46
     (block $switch-case45
      (block $switch-case38
       (block $switch-case33
        (block $switch-case32
         (br_table $switch-case32 $switch-case38 $switch-case33 $switch-case45 $switch-default46
          (i32.sub
           (local.get $$4)
           (i32.const 0)
          )
         )
        )
        (block
         (if
          (local.get $$151)
          (block
           (local.set $$$4290
            (f64.const 0)
           )
           (local.set $$$8289
            (local.get $$$2255)
           )
           (loop $while-in31
            (block $while-out30
             (local.set $$174
              (i32.add
               (local.get $$7)
               (i32.shl
                (local.get $$$8289)
                (i32.const 3)
               )
              )
             )
             (local.set $$175
              (f64.load
               (local.get $$174)
              )
             )
             (local.set $$176
              (f64.add
               (local.get $$$4290)
               (local.get $$175)
              )
             )
             (local.set $$177
              (i32.add
               (local.get $$$8289)
               (i32.const -1)
              )
             )
             (local.set $$178
              (i32.gt_s
               (local.get $$$8289)
               (i32.const 0)
              )
             )
             (if
              (local.get $$178)
              (block
               (local.set $$$4290
                (local.get $$176)
               )
               (local.set $$$8289
                (local.get $$177)
               )
              )
              (block
               (local.set $$$4$lcssa
                (local.get $$176)
               )
               (br $while-out30)
              )
             )
             (br $while-in31)
            )
           )
          )
          (local.set $$$4$lcssa
           (f64.const 0)
          )
         )
         (local.set $$179
          (i32.eq
           (local.get $$$0250279)
           (i32.const 0)
          )
         )
         (local.set $$180
          (f64.neg
           (local.get $$$4$lcssa)
          )
         )
         (local.set $$181
          (if (result f64)
           (local.get $$179)
           (local.get $$$4$lcssa)
           (local.get $$180)
          )
         )
         (f64.store
          (local.get $$1)
          (local.get $$181)
         )
         (br $switch29)
        )
       )
       (nop)
      )
      (block
       (if
        (local.get $$151)
        (block
         (local.set $$$5298
          (f64.const 0)
         )
         (local.set $$$9297
          (local.get $$$2255)
         )
         (loop $while-in35
          (block $while-out34
           (local.set $$182
            (i32.add
             (local.get $$7)
             (i32.shl
              (local.get $$$9297)
              (i32.const 3)
             )
            )
           )
           (local.set $$183
            (f64.load
             (local.get $$182)
            )
           )
           (local.set $$184
            (f64.add
             (local.get $$$5298)
             (local.get $$183)
            )
           )
           (local.set $$185
            (i32.add
             (local.get $$$9297)
             (i32.const -1)
            )
           )
           (local.set $$186
            (i32.gt_s
             (local.get $$$9297)
             (i32.const 0)
            )
           )
           (if
            (local.get $$186)
            (block
             (local.set $$$5298
              (local.get $$184)
             )
             (local.set $$$9297
              (local.get $$185)
             )
            )
            (block
             (local.set $$$5$lcssa
              (local.get $$184)
             )
             (br $while-out34)
            )
           )
           (br $while-in35)
          )
         )
        )
        (local.set $$$5$lcssa
         (f64.const 0)
        )
       )
       (local.set $$187
        (i32.eq
         (local.get $$$0250279)
         (i32.const 0)
        )
       )
       (local.set $$188
        (f64.neg
         (local.get $$$5$lcssa)
        )
       )
       (local.set $$189
        (if (result f64)
         (local.get $$187)
         (local.get $$$5$lcssa)
         (local.get $$188)
        )
       )
       (f64.store
        (local.get $$1)
        (local.get $$189)
       )
       (local.set $$190
        (f64.load
         (local.get $$7)
        )
       )
       (local.set $$191
        (f64.sub
         (local.get $$190)
         (local.get $$$5$lcssa)
        )
       )
       (local.set $$192
        (i32.lt_s
         (local.get $$$2255)
         (i32.const 1)
        )
       )
       (if
        (local.get $$192)
        (local.set $$$6$lcssa
         (local.get $$191)
        )
        (block
         (local.set $$$10291
          (i32.const 1)
         )
         (local.set $$$6292
          (local.get $$191)
         )
         (loop $while-in37
          (block $while-out36
           (local.set $$193
            (i32.add
             (local.get $$7)
             (i32.shl
              (local.get $$$10291)
              (i32.const 3)
             )
            )
           )
           (local.set $$194
            (f64.load
             (local.get $$193)
            )
           )
           (local.set $$195
            (f64.add
             (local.get $$$6292)
             (local.get $$194)
            )
           )
           (local.set $$196
            (i32.add
             (local.get $$$10291)
             (i32.const 1)
            )
           )
           (local.set $$exitcond
            (i32.eq
             (local.get $$$10291)
             (local.get $$$2255)
            )
           )
           (if
            (local.get $$exitcond)
            (block
             (local.set $$$6$lcssa
              (local.get $$195)
             )
             (br $while-out36)
            )
            (block
             (local.set $$$10291
              (local.get $$196)
             )
             (local.set $$$6292
              (local.get $$195)
             )
            )
           )
           (br $while-in37)
          )
         )
        )
       )
       (local.set $$197
        (f64.neg
         (local.get $$$6$lcssa)
        )
       )
       (local.set $$198
        (if (result f64)
         (local.get $$187)
         (local.get $$$6$lcssa)
         (local.get $$197)
        )
       )
       (local.set $$199
        (i32.add
         (local.get $$1)
         (i32.const 8)
        )
       )
       (f64.store
        (local.get $$199)
        (local.get $$198)
       )
       (br $switch29)
      )
     )
     (block
      (local.set $$200
       (i32.gt_s
        (local.get $$$2255)
        (i32.const 0)
       )
      )
      (if
       (local.get $$200)
       (block
        (local.set $$$phi$trans$insert
         (i32.add
          (local.get $$7)
          (i32.shl
           (local.get $$$2255)
           (i32.const 3)
          )
         )
        )
        (local.set $$$pre
         (f64.load
          (local.get $$$phi$trans$insert)
         )
        )
        (local.set $$$11313
         (local.get $$$2255)
        )
        (local.set $$206
         (local.get $$$pre)
        )
        (loop $while-in40
         (block $while-out39
          (local.set $$201
           (i32.add
            (local.get $$$11313)
            (i32.const -1)
           )
          )
          (local.set $$202
           (i32.add
            (local.get $$7)
            (i32.shl
             (local.get $$201)
             (i32.const 3)
            )
           )
          )
          (local.set $$203
           (f64.load
            (local.get $$202)
           )
          )
          (local.set $$204
           (i32.add
            (local.get $$7)
            (i32.shl
             (local.get $$$11313)
             (i32.const 3)
            )
           )
          )
          (local.set $$205
           (f64.add
            (local.get $$203)
            (local.get $$206)
           )
          )
          (local.set $$207
           (f64.sub
            (local.get $$203)
            (local.get $$205)
           )
          )
          (local.set $$208
           (f64.add
            (local.get $$206)
            (local.get $$207)
           )
          )
          (f64.store
           (local.get $$204)
           (local.get $$208)
          )
          (f64.store
           (local.get $$202)
           (local.get $$205)
          )
          (local.set $$209
           (i32.gt_s
            (local.get $$$11313)
            (i32.const 1)
           )
          )
          (if
           (local.get $$209)
           (block
            (local.set $$$11313
             (local.get $$201)
            )
            (local.set $$206
             (local.get $$205)
            )
           )
           (br $while-out39)
          )
          (br $while-in40)
         )
        )
        (local.set $$210
         (i32.gt_s
          (local.get $$$2255)
          (i32.const 1)
         )
        )
        (if
         (local.get $$210)
         (block
          (local.set $$$phi$trans$insert395
           (i32.add
            (local.get $$7)
            (i32.shl
             (local.get $$$2255)
             (i32.const 3)
            )
           )
          )
          (local.set $$$pre396
           (f64.load
            (local.get $$$phi$trans$insert395)
           )
          )
          (local.set $$$12309
           (local.get $$$2255)
          )
          (local.set $$216
           (local.get $$$pre396)
          )
          (loop $while-in42
           (block $while-out41
            (local.set $$211
             (i32.add
              (local.get $$$12309)
              (i32.const -1)
             )
            )
            (local.set $$212
             (i32.add
              (local.get $$7)
              (i32.shl
               (local.get $$211)
               (i32.const 3)
              )
             )
            )
            (local.set $$213
             (f64.load
              (local.get $$212)
             )
            )
            (local.set $$214
             (i32.add
              (local.get $$7)
              (i32.shl
               (local.get $$$12309)
               (i32.const 3)
              )
             )
            )
            (local.set $$215
             (f64.add
              (local.get $$213)
              (local.get $$216)
             )
            )
            (local.set $$217
             (f64.sub
              (local.get $$213)
              (local.get $$215)
             )
            )
            (local.set $$218
             (f64.add
              (local.get $$216)
              (local.get $$217)
             )
            )
            (f64.store
             (local.get $$214)
             (local.get $$218)
            )
            (f64.store
             (local.get $$212)
             (local.get $$215)
            )
            (local.set $$219
             (i32.gt_s
              (local.get $$$12309)
              (i32.const 2)
             )
            )
            (if
             (local.get $$219)
             (block
              (local.set $$$12309
               (local.get $$211)
              )
              (local.set $$216
               (local.get $$215)
              )
             )
             (br $while-out41)
            )
            (br $while-in42)
           )
          )
          (if
           (local.get $$210)
           (block
            (local.set $$$13303
             (local.get $$$2255)
            )
            (local.set $$$7304
             (f64.const 0)
            )
            (loop $while-in44
             (block $while-out43
              (local.set $$220
               (i32.add
                (local.get $$7)
                (i32.shl
                 (local.get $$$13303)
                 (i32.const 3)
                )
               )
              )
              (local.set $$221
               (f64.load
                (local.get $$220)
               )
              )
              (local.set $$222
               (f64.add
                (local.get $$$7304)
                (local.get $$221)
               )
              )
              (local.set $$223
               (i32.add
                (local.get $$$13303)
                (i32.const -1)
               )
              )
              (local.set $$224
               (i32.gt_s
                (local.get $$$13303)
                (i32.const 2)
               )
              )
              (if
               (local.get $$224)
               (block
                (local.set $$$13303
                 (local.get $$223)
                )
                (local.set $$$7304
                 (local.get $$222)
                )
               )
               (block
                (local.set $$$7$lcssa
                 (local.get $$222)
                )
                (br $while-out43)
               )
              )
              (br $while-in44)
             )
            )
           )
           (local.set $$$7$lcssa
            (f64.const 0)
           )
          )
         )
         (local.set $$$7$lcssa
          (f64.const 0)
         )
        )
       )
       (local.set $$$7$lcssa
        (f64.const 0)
       )
      )
      (local.set $$225
       (i32.eq
        (local.get $$$0250279)
        (i32.const 0)
       )
      )
      (local.set $$226
       (f64.load
        (local.get $$7)
       )
      )
      (if
       (local.get $$225)
       (block
        (f64.store
         (local.get $$1)
         (local.get $$226)
        )
        (local.set $$227
         (i32.add
          (local.get $$7)
          (i32.const 8)
         )
        )
        (local.set $$228
         (f64.load
          (local.get $$227)
         )
        )
        (local.set $$229
         (i32.add
          (local.get $$1)
          (i32.const 8)
         )
        )
        (f64.store
         (local.get $$229)
         (local.get $$228)
        )
        (local.set $$230
         (i32.add
          (local.get $$1)
          (i32.const 16)
         )
        )
        (f64.store
         (local.get $$230)
         (local.get $$$7$lcssa)
        )
        (br $label$break$L93)
       )
       (block
        (local.set $$231
         (f64.neg
          (local.get $$226)
         )
        )
        (f64.store
         (local.get $$1)
         (local.get $$231)
        )
        (local.set $$232
         (i32.add
          (local.get $$7)
          (i32.const 8)
         )
        )
        (local.set $$233
         (f64.load
          (local.get $$232)
         )
        )
        (local.set $$234
         (f64.neg
          (local.get $$233)
         )
        )
        (local.set $$235
         (i32.add
          (local.get $$1)
          (i32.const 8)
         )
        )
        (f64.store
         (local.get $$235)
         (local.get $$234)
        )
        (local.set $$236
         (f64.neg
          (local.get $$$7$lcssa)
         )
        )
        (local.set $$237
         (i32.add
          (local.get $$1)
          (i32.const 16)
         )
        )
        (f64.store
         (local.get $$237)
         (local.get $$236)
        )
        (br $label$break$L93)
       )
      )
      (br $switch29)
     )
    )
    (nop)
   )
  )
  (local.set $$238
   (i32.and
    (local.get $$$1272)
    (i32.const 7)
   )
  )
  (global.set $STACKTOP
   (local.get $sp)
  )
  (return
   (local.get $$238)
  )
 )
 (func $___cos (; 31 ;) (param $$0 f64) (param $$1 f64) (result f64)
  (local $$10 f64)
  (local $$11 f64)
  (local $$12 f64)
  (local $$13 f64)
  (local $$14 f64)
  (local $$15 f64)
  (local $$16 f64)
  (local $$17 f64)
  (local $$18 f64)
  (local $$19 f64)
  (local $$2 f64)
  (local $$20 f64)
  (local $$21 f64)
  (local $$22 f64)
  (local $$23 f64)
  (local $$24 f64)
  (local $$3 f64)
  (local $$4 f64)
  (local $$5 f64)
  (local $$6 f64)
  (local $$7 f64)
  (local $$8 f64)
  (local $$9 f64)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (local.set $$2
   (f64.mul
    (local.get $$0)
    (local.get $$0)
   )
  )
  (local.set $$3
   (f64.mul
    (local.get $$2)
    (local.get $$2)
   )
  )
  (local.set $$4
   (f64.mul
    (local.get $$2)
    (f64.const 2.480158728947673e-05)
   )
  )
  (local.set $$5
   (f64.add
    (local.get $$4)
    (f64.const -0.001388888888887411)
   )
  )
  (local.set $$6
   (f64.mul
    (local.get $$2)
    (local.get $$5)
   )
  )
  (local.set $$7
   (f64.add
    (local.get $$6)
    (f64.const 0.0416666666666666)
   )
  )
  (local.set $$8
   (f64.mul
    (local.get $$2)
    (local.get $$7)
   )
  )
  (local.set $$9
   (f64.mul
    (local.get $$3)
    (local.get $$3)
   )
  )
  (local.set $$10
   (f64.mul
    (local.get $$2)
    (f64.const 1.1359647557788195e-11)
   )
  )
  (local.set $$11
   (f64.sub
    (f64.const 2.087572321298175e-09)
    (local.get $$10)
   )
  )
  (local.set $$12
   (f64.mul
    (local.get $$2)
    (local.get $$11)
   )
  )
  (local.set $$13
   (f64.add
    (local.get $$12)
    (f64.const -2.7557314351390663e-07)
   )
  )
  (local.set $$14
   (f64.mul
    (local.get $$9)
    (local.get $$13)
   )
  )
  (local.set $$15
   (f64.add
    (local.get $$8)
    (local.get $$14)
   )
  )
  (local.set $$16
   (f64.mul
    (local.get $$2)
    (f64.const 0.5)
   )
  )
  (local.set $$17
   (f64.sub
    (f64.const 1)
    (local.get $$16)
   )
  )
  (local.set $$18
   (f64.sub
    (f64.const 1)
    (local.get $$17)
   )
  )
  (local.set $$19
   (f64.sub
    (local.get $$18)
    (local.get $$16)
   )
  )
  (local.set $$20
   (f64.mul
    (local.get $$2)
    (local.get $$15)
   )
  )
  (local.set $$21
   (f64.mul
    (local.get $$0)
    (local.get $$1)
   )
  )
  (local.set $$22
   (f64.sub
    (local.get $$20)
    (local.get $$21)
   )
  )
  (local.set $$23
   (f64.add
    (local.get $$19)
    (local.get $$22)
   )
  )
  (local.set $$24
   (f64.add
    (local.get $$17)
    (local.get $$23)
   )
  )
  (return
   (local.get $$24)
  )
 )
 (func $___rem_pio2 (; 32 ;) (param $$0 f64) (param $$1 i32) (result i32)
  (local $$$0144 i32)
  (local $$$0145148 f64)
  (local $$$0146 f64)
  (local $$$0147 f64)
  (local $$$0149 i32)
  (local $$$1$lcssa i32)
  (local $$$phi$trans$insert i32)
  (local $$$pre f64)
  (local $$10 i32)
  (local $$100 i32)
  (local $$101 i32)
  (local $$102 f64)
  (local $$103 i32)
  (local $$104 i64)
  (local $$105 i64)
  (local $$106 f64)
  (local $$107 i32)
  (local $$108 f64)
  (local $$109 i32)
  (local $$11 i32)
  (local $$110 f64)
  (local $$111 f64)
  (local $$112 i32)
  (local $$113 i32)
  (local $$114 i32)
  (local $$115 i32)
  (local $$116 i32)
  (local $$117 i32)
  (local $$118 i32)
  (local $$119 i32)
  (local $$12 i32)
  (local $$120 i32)
  (local $$121 i32)
  (local $$122 i32)
  (local $$123 f64)
  (local $$124 f64)
  (local $$125 i32)
  (local $$126 f64)
  (local $$127 f64)
  (local $$128 i32)
  (local $$129 i32)
  (local $$13 i32)
  (local $$130 i32)
  (local $$131 f64)
  (local $$132 i32)
  (local $$14 i32)
  (local $$15 f64)
  (local $$16 f64)
  (local $$17 f64)
  (local $$18 f64)
  (local $$19 i32)
  (local $$2 i32)
  (local $$20 f64)
  (local $$21 f64)
  (local $$22 f64)
  (local $$23 f64)
  (local $$24 i32)
  (local $$25 f64)
  (local $$26 f64)
  (local $$27 f64)
  (local $$28 f64)
  (local $$29 i32)
  (local $$3 i32)
  (local $$30 f64)
  (local $$31 f64)
  (local $$32 f64)
  (local $$33 f64)
  (local $$34 i32)
  (local $$35 i32)
  (local $$36 i32)
  (local $$37 i32)
  (local $$38 i32)
  (local $$39 f64)
  (local $$4 i64)
  (local $$40 f64)
  (local $$41 f64)
  (local $$42 f64)
  (local $$43 i32)
  (local $$44 f64)
  (local $$45 f64)
  (local $$46 f64)
  (local $$47 f64)
  (local $$48 i32)
  (local $$49 i32)
  (local $$5 i64)
  (local $$50 i32)
  (local $$51 f64)
  (local $$52 f64)
  (local $$53 f64)
  (local $$54 f64)
  (local $$55 i32)
  (local $$56 f64)
  (local $$57 f64)
  (local $$58 f64)
  (local $$59 f64)
  (local $$6 i32)
  (local $$60 i32)
  (local $$61 i32)
  (local $$62 f64)
  (local $$63 f64)
  (local $$64 f64)
  (local $$65 i32)
  (local $$66 f64)
  (local $$67 f64)
  (local $$68 f64)
  (local $$69 f64)
  (local $$7 i64)
  (local $$70 i64)
  (local $$71 i64)
  (local $$72 i32)
  (local $$73 i32)
  (local $$74 i32)
  (local $$75 i32)
  (local $$76 i32)
  (local $$77 f64)
  (local $$78 f64)
  (local $$79 f64)
  (local $$8 i32)
  (local $$80 f64)
  (local $$81 f64)
  (local $$82 f64)
  (local $$83 f64)
  (local $$84 i64)
  (local $$85 i64)
  (local $$86 i32)
  (local $$87 i32)
  (local $$88 i32)
  (local $$89 i32)
  (local $$9 i32)
  (local $$90 f64)
  (local $$91 f64)
  (local $$92 f64)
  (local $$93 f64)
  (local $$94 f64)
  (local $$95 f64)
  (local $$96 f64)
  (local $$97 f64)
  (local $$98 f64)
  (local $$99 f64)
  (local $$exitcond i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (global.set $STACKTOP
   (i32.add
    (global.get $STACKTOP)
    (i32.const 48)
   )
  )
  (if
   (i32.ge_s
    (global.get $STACKTOP)
    (global.get $STACK_MAX)
   )
   (call $abortStackOverflow
    (i32.const 48)
   )
  )
  (local.set $$2
   (i32.add
    (local.get $sp)
    (i32.const 16)
   )
  )
  (local.set $$3
   (local.get $sp)
  )
  (local.set $$4
   (i64.reinterpret_f64
    (local.get $$0)
   )
  )
  (local.set $$5
   (i64.shr_u
    (local.get $$4)
    (i64.const 63)
   )
  )
  (local.set $$6
   (i32.wrap_i64
    (local.get $$5)
   )
  )
  (local.set $$7
   (i64.shr_u
    (local.get $$4)
    (i64.const 32)
   )
  )
  (local.set $$8
   (i32.wrap_i64
    (local.get $$7)
   )
  )
  (local.set $$9
   (i32.and
    (local.get $$8)
    (i32.const 2147483647)
   )
  )
  (local.set $$10
   (i32.lt_u
    (local.get $$9)
    (i32.const 1074752123)
   )
  )
  (block $do-once
   (if
    (local.get $$10)
    (block
     (local.set $$11
      (i32.and
       (local.get $$8)
       (i32.const 1048575)
      )
     )
     (local.set $$12
      (i32.eq
       (local.get $$11)
       (i32.const 598523)
      )
     )
     (if
      (local.get $$12)
      (local.set $label
       (i32.const 21)
      )
      (block
       (local.set $$13
        (i32.lt_u
         (local.get $$9)
         (i32.const 1073928573)
        )
       )
       (local.set $$14
        (i32.ne
         (local.get $$6)
         (i32.const 0)
        )
       )
       (if
        (local.get $$13)
        (if
         (local.get $$14)
         (block
          (local.set $$20
           (f64.add
            (local.get $$0)
            (f64.const 1.5707963267341256)
           )
          )
          (local.set $$21
           (f64.add
            (local.get $$20)
            (f64.const 6.077100506506192e-11)
           )
          )
          (f64.store
           (local.get $$1)
           (local.get $$21)
          )
          (local.set $$22
           (f64.sub
            (local.get $$20)
            (local.get $$21)
           )
          )
          (local.set $$23
           (f64.add
            (local.get $$22)
            (f64.const 6.077100506506192e-11)
           )
          )
          (local.set $$24
           (i32.add
            (local.get $$1)
            (i32.const 8)
           )
          )
          (f64.store
           (local.get $$24)
           (local.get $$23)
          )
          (local.set $$$0144
           (i32.const -1)
          )
          (br $do-once)
         )
         (block
          (local.set $$15
           (f64.add
            (local.get $$0)
            (f64.const -1.5707963267341256)
           )
          )
          (local.set $$16
           (f64.add
            (local.get $$15)
            (f64.const -6.077100506506192e-11)
           )
          )
          (f64.store
           (local.get $$1)
           (local.get $$16)
          )
          (local.set $$17
           (f64.sub
            (local.get $$15)
            (local.get $$16)
           )
          )
          (local.set $$18
           (f64.add
            (local.get $$17)
            (f64.const -6.077100506506192e-11)
           )
          )
          (local.set $$19
           (i32.add
            (local.get $$1)
            (i32.const 8)
           )
          )
          (f64.store
           (local.get $$19)
           (local.get $$18)
          )
          (local.set $$$0144
           (i32.const 1)
          )
          (br $do-once)
         )
        )
        (if
         (local.get $$14)
         (block
          (local.set $$30
           (f64.add
            (local.get $$0)
            (f64.const 3.1415926534682512)
           )
          )
          (local.set $$31
           (f64.add
            (local.get $$30)
            (f64.const 1.2154201013012384e-10)
           )
          )
          (f64.store
           (local.get $$1)
           (local.get $$31)
          )
          (local.set $$32
           (f64.sub
            (local.get $$30)
            (local.get $$31)
           )
          )
          (local.set $$33
           (f64.add
            (local.get $$32)
            (f64.const 1.2154201013012384e-10)
           )
          )
          (local.set $$34
           (i32.add
            (local.get $$1)
            (i32.const 8)
           )
          )
          (f64.store
           (local.get $$34)
           (local.get $$33)
          )
          (local.set $$$0144
           (i32.const -2)
          )
          (br $do-once)
         )
         (block
          (local.set $$25
           (f64.add
            (local.get $$0)
            (f64.const -3.1415926534682512)
           )
          )
          (local.set $$26
           (f64.add
            (local.get $$25)
            (f64.const -1.2154201013012384e-10)
           )
          )
          (f64.store
           (local.get $$1)
           (local.get $$26)
          )
          (local.set $$27
           (f64.sub
            (local.get $$25)
            (local.get $$26)
           )
          )
          (local.set $$28
           (f64.add
            (local.get $$27)
            (f64.const -1.2154201013012384e-10)
           )
          )
          (local.set $$29
           (i32.add
            (local.get $$1)
            (i32.const 8)
           )
          )
          (f64.store
           (local.get $$29)
           (local.get $$28)
          )
          (local.set $$$0144
           (i32.const 2)
          )
          (br $do-once)
         )
        )
       )
      )
     )
    )
    (block
     (local.set $$35
      (i32.lt_u
       (local.get $$9)
       (i32.const 1075594812)
      )
     )
     (if
      (local.get $$35)
      (block
       (local.set $$36
        (i32.lt_u
         (local.get $$9)
         (i32.const 1075183037)
        )
       )
       (if
        (local.get $$36)
        (block
         (local.set $$37
          (i32.eq
           (local.get $$9)
           (i32.const 1074977148)
          )
         )
         (if
          (local.get $$37)
          (block
           (local.set $label
            (i32.const 21)
           )
           (br $do-once)
          )
         )
         (local.set $$38
          (i32.eq
           (local.get $$6)
           (i32.const 0)
          )
         )
         (if
          (local.get $$38)
          (block
           (local.set $$39
            (f64.add
             (local.get $$0)
             (f64.const -4.712388980202377)
            )
           )
           (local.set $$40
            (f64.add
             (local.get $$39)
             (f64.const -1.8231301519518578e-10)
            )
           )
           (f64.store
            (local.get $$1)
            (local.get $$40)
           )
           (local.set $$41
            (f64.sub
             (local.get $$39)
             (local.get $$40)
            )
           )
           (local.set $$42
            (f64.add
             (local.get $$41)
             (f64.const -1.8231301519518578e-10)
            )
           )
           (local.set $$43
            (i32.add
             (local.get $$1)
             (i32.const 8)
            )
           )
           (f64.store
            (local.get $$43)
            (local.get $$42)
           )
           (local.set $$$0144
            (i32.const 3)
           )
           (br $do-once)
          )
          (block
           (local.set $$44
            (f64.add
             (local.get $$0)
             (f64.const 4.712388980202377)
            )
           )
           (local.set $$45
            (f64.add
             (local.get $$44)
             (f64.const 1.8231301519518578e-10)
            )
           )
           (f64.store
            (local.get $$1)
            (local.get $$45)
           )
           (local.set $$46
            (f64.sub
             (local.get $$44)
             (local.get $$45)
            )
           )
           (local.set $$47
            (f64.add
             (local.get $$46)
             (f64.const 1.8231301519518578e-10)
            )
           )
           (local.set $$48
            (i32.add
             (local.get $$1)
             (i32.const 8)
            )
           )
           (f64.store
            (local.get $$48)
            (local.get $$47)
           )
           (local.set $$$0144
            (i32.const -3)
           )
           (br $do-once)
          )
         )
        )
        (block
         (local.set $$49
          (i32.eq
           (local.get $$9)
           (i32.const 1075388923)
          )
         )
         (if
          (local.get $$49)
          (block
           (local.set $label
            (i32.const 21)
           )
           (br $do-once)
          )
         )
         (local.set $$50
          (i32.eq
           (local.get $$6)
           (i32.const 0)
          )
         )
         (if
          (local.get $$50)
          (block
           (local.set $$51
            (f64.add
             (local.get $$0)
             (f64.const -6.2831853069365025)
            )
           )
           (local.set $$52
            (f64.add
             (local.get $$51)
             (f64.const -2.430840202602477e-10)
            )
           )
           (f64.store
            (local.get $$1)
            (local.get $$52)
           )
           (local.set $$53
            (f64.sub
             (local.get $$51)
             (local.get $$52)
            )
           )
           (local.set $$54
            (f64.add
             (local.get $$53)
             (f64.const -2.430840202602477e-10)
            )
           )
           (local.set $$55
            (i32.add
             (local.get $$1)
             (i32.const 8)
            )
           )
           (f64.store
            (local.get $$55)
            (local.get $$54)
           )
           (local.set $$$0144
            (i32.const 4)
           )
           (br $do-once)
          )
          (block
           (local.set $$56
            (f64.add
             (local.get $$0)
             (f64.const 6.2831853069365025)
            )
           )
           (local.set $$57
            (f64.add
             (local.get $$56)
             (f64.const 2.430840202602477e-10)
            )
           )
           (f64.store
            (local.get $$1)
            (local.get $$57)
           )
           (local.set $$58
            (f64.sub
             (local.get $$56)
             (local.get $$57)
            )
           )
           (local.set $$59
            (f64.add
             (local.get $$58)
             (f64.const 2.430840202602477e-10)
            )
           )
           (local.set $$60
            (i32.add
             (local.get $$1)
             (i32.const 8)
            )
           )
           (f64.store
            (local.get $$60)
            (local.get $$59)
           )
           (local.set $$$0144
            (i32.const -4)
           )
           (br $do-once)
          )
         )
        )
       )
      )
     )
     (local.set $$61
      (i32.lt_u
       (local.get $$9)
       (i32.const 1094263291)
      )
     )
     (if
      (local.get $$61)
      (local.set $label
       (i32.const 21)
      )
      (block
       (local.set $$101
        (i32.gt_u
         (local.get $$9)
         (i32.const 2146435071)
        )
       )
       (if
        (local.get $$101)
        (block
         (local.set $$102
          (f64.sub
           (local.get $$0)
           (local.get $$0)
          )
         )
         (local.set $$103
          (i32.add
           (local.get $$1)
           (i32.const 8)
          )
         )
         (f64.store
          (local.get $$103)
          (local.get $$102)
         )
         (f64.store
          (local.get $$1)
          (local.get $$102)
         )
         (local.set $$$0144
          (i32.const 0)
         )
         (br $do-once)
        )
       )
       (local.set $$104
        (i64.and
         (local.get $$4)
         (i64.const 4503599627370495)
        )
       )
       (local.set $$105
        (i64.or
         (local.get $$104)
         (i64.const 4710765210229538816)
        )
       )
       (local.set $$106
        (f64.reinterpret_i64
         (local.get $$105)
        )
       )
       (local.set $$$0145148
        (local.get $$106)
       )
       (local.set $$$0149
        (i32.const 0)
       )
       (loop $while-in
        (block $while-out
         (local.set $$107
          (i32.trunc_f64_s
           (local.get $$$0145148)
          )
         )
         (local.set $$108
          (f64.convert_i32_s
           (local.get $$107)
          )
         )
         (local.set $$109
          (i32.add
           (local.get $$2)
           (i32.shl
            (local.get $$$0149)
            (i32.const 3)
           )
          )
         )
         (f64.store
          (local.get $$109)
          (local.get $$108)
         )
         (local.set $$110
          (f64.sub
           (local.get $$$0145148)
           (local.get $$108)
          )
         )
         (local.set $$111
          (f64.mul
           (local.get $$110)
           (f64.const 16777216)
          )
         )
         (local.set $$112
          (i32.add
           (local.get $$$0149)
           (i32.const 1)
          )
         )
         (local.set $$exitcond
          (i32.eq
           (local.get $$112)
           (i32.const 2)
          )
         )
         (if
          (local.get $$exitcond)
          (br $while-out)
          (block
           (local.set $$$0145148
            (local.get $$111)
           )
           (local.set $$$0149
            (local.get $$112)
           )
          )
         )
         (br $while-in)
        )
       )
       (local.set $$113
        (i32.add
         (local.get $$2)
         (i32.const 16)
        )
       )
       (f64.store
        (local.get $$113)
        (local.get $$111)
       )
       (local.set $$114
        (f64.eq
         (local.get $$111)
         (f64.const 0)
        )
       )
       (if
        (local.get $$114)
        (block
         (local.set $$115
          (i32.const 1)
         )
         (loop $while-in1
          (block $while-out0
           (local.set $$$phi$trans$insert
            (i32.add
             (local.get $$2)
             (i32.shl
              (local.get $$115)
              (i32.const 3)
             )
            )
           )
           (local.set $$$pre
            (f64.load
             (local.get $$$phi$trans$insert)
            )
           )
           (local.set $$116
            (f64.eq
             (local.get $$$pre)
             (f64.const 0)
            )
           )
           (local.set $$117
            (i32.add
             (local.get $$115)
             (i32.const -1)
            )
           )
           (if
            (local.get $$116)
            (local.set $$115
             (local.get $$117)
            )
            (block
             (local.set $$$1$lcssa
              (local.get $$115)
             )
             (br $while-out0)
            )
           )
           (br $while-in1)
          )
         )
        )
        (local.set $$$1$lcssa
         (i32.const 2)
        )
       )
       (local.set $$118
        (i32.shr_u
         (local.get $$9)
         (i32.const 20)
        )
       )
       (local.set $$119
        (i32.add
         (local.get $$118)
         (i32.const -1046)
        )
       )
       (local.set $$120
        (i32.add
         (local.get $$$1$lcssa)
         (i32.const 1)
        )
       )
       (local.set $$121
        (call $___rem_pio2_large
         (local.get $$2)
         (local.get $$3)
         (local.get $$119)
         (local.get $$120)
         (i32.const 1)
        )
       )
       (local.set $$122
        (i32.eq
         (local.get $$6)
         (i32.const 0)
        )
       )
       (local.set $$123
        (f64.load
         (local.get $$3)
        )
       )
       (if
        (local.get $$122)
        (block
         (f64.store
          (local.get $$1)
          (local.get $$123)
         )
         (local.set $$130
          (i32.add
           (local.get $$3)
           (i32.const 8)
          )
         )
         (local.set $$131
          (f64.load
           (local.get $$130)
          )
         )
         (local.set $$132
          (i32.add
           (local.get $$1)
           (i32.const 8)
          )
         )
         (f64.store
          (local.get $$132)
          (local.get $$131)
         )
         (local.set $$$0144
          (local.get $$121)
         )
         (br $do-once)
        )
        (block
         (local.set $$124
          (f64.neg
           (local.get $$123)
          )
         )
         (f64.store
          (local.get $$1)
          (local.get $$124)
         )
         (local.set $$125
          (i32.add
           (local.get $$3)
           (i32.const 8)
          )
         )
         (local.set $$126
          (f64.load
           (local.get $$125)
          )
         )
         (local.set $$127
          (f64.neg
           (local.get $$126)
          )
         )
         (local.set $$128
          (i32.add
           (local.get $$1)
           (i32.const 8)
          )
         )
         (f64.store
          (local.get $$128)
          (local.get $$127)
         )
         (local.set $$129
          (i32.sub
           (i32.const 0)
           (local.get $$121)
          )
         )
         (local.set $$$0144
          (local.get $$129)
         )
         (br $do-once)
        )
       )
      )
     )
    )
   )
  )
  (if
   (i32.eq
    (local.get $label)
    (i32.const 21)
   )
   (block
    (local.set $$62
     (f64.mul
      (local.get $$0)
      (f64.const 0.6366197723675814)
     )
    )
    (local.set $$63
     (f64.add
      (local.get $$62)
      (f64.const 6755399441055744)
     )
    )
    (local.set $$64
     (f64.add
      (local.get $$63)
      (f64.const -6755399441055744)
     )
    )
    (local.set $$65
     (i32.trunc_f64_s
      (local.get $$64)
     )
    )
    (local.set $$66
     (f64.mul
      (local.get $$64)
      (f64.const 1.5707963267341256)
     )
    )
    (local.set $$67
     (f64.sub
      (local.get $$0)
      (local.get $$66)
     )
    )
    (local.set $$68
     (f64.mul
      (local.get $$64)
      (f64.const 6.077100506506192e-11)
     )
    )
    (local.set $$69
     (f64.sub
      (local.get $$67)
      (local.get $$68)
     )
    )
    (f64.store
     (local.get $$1)
     (local.get $$69)
    )
    (local.set $$70
     (i64.reinterpret_f64
      (local.get $$69)
     )
    )
    (local.set $$71
     (i64.shr_u
      (local.get $$70)
      (i64.const 52)
     )
    )
    (local.set $$72
     (i32.wrap_i64
      (local.get $$71)
     )
    )
    (local.set $$73
     (i32.and
      (local.get $$72)
      (i32.const 2047)
     )
    )
    (local.set $$74
     (i32.shr_u
      (local.get $$9)
      (i32.const 20)
     )
    )
    (local.set $$75
     (i32.sub
      (local.get $$74)
      (local.get $$73)
     )
    )
    (local.set $$76
     (i32.gt_s
      (local.get $$75)
      (i32.const 16)
     )
    )
    (if
     (local.get $$76)
     (block
      (local.set $$77
       (f64.mul
        (local.get $$64)
        (f64.const 6.077100506303966e-11)
       )
      )
      (local.set $$78
       (f64.sub
        (local.get $$67)
        (local.get $$77)
       )
      )
      (local.set $$79
       (f64.mul
        (local.get $$64)
        (f64.const 2.0222662487959506e-21)
       )
      )
      (local.set $$80
       (f64.sub
        (local.get $$67)
        (local.get $$78)
       )
      )
      (local.set $$81
       (f64.sub
        (local.get $$80)
        (local.get $$77)
       )
      )
      (local.set $$82
       (f64.sub
        (local.get $$79)
        (local.get $$81)
       )
      )
      (local.set $$83
       (f64.sub
        (local.get $$78)
        (local.get $$82)
       )
      )
      (f64.store
       (local.get $$1)
       (local.get $$83)
      )
      (local.set $$84
       (i64.reinterpret_f64
        (local.get $$83)
       )
      )
      (local.set $$85
       (i64.shr_u
        (local.get $$84)
        (i64.const 52)
       )
      )
      (local.set $$86
       (i32.wrap_i64
        (local.get $$85)
       )
      )
      (local.set $$87
       (i32.and
        (local.get $$86)
        (i32.const 2047)
       )
      )
      (local.set $$88
       (i32.sub
        (local.get $$74)
        (local.get $$87)
       )
      )
      (local.set $$89
       (i32.gt_s
        (local.get $$88)
        (i32.const 49)
       )
      )
      (local.set $$90
       (f64.mul
        (local.get $$64)
        (f64.const 2.0222662487111665e-21)
       )
      )
      (local.set $$91
       (f64.sub
        (local.get $$78)
        (local.get $$90)
       )
      )
      (local.set $$92
       (f64.mul
        (local.get $$64)
        (f64.const 8.4784276603689e-32)
       )
      )
      (local.set $$93
       (f64.sub
        (local.get $$78)
        (local.get $$91)
       )
      )
      (local.set $$94
       (f64.sub
        (local.get $$93)
        (local.get $$90)
       )
      )
      (local.set $$95
       (f64.sub
        (local.get $$92)
        (local.get $$94)
       )
      )
      (if
       (local.get $$89)
       (block
        (local.set $$96
         (f64.sub
          (local.get $$91)
          (local.get $$95)
         )
        )
        (f64.store
         (local.get $$1)
         (local.get $$96)
        )
        (local.set $$$0146
         (local.get $$95)
        )
        (local.set $$$0147
         (local.get $$91)
        )
        (local.set $$98
         (local.get $$96)
        )
       )
       (block
        (local.set $$$0146
         (local.get $$82)
        )
        (local.set $$$0147
         (local.get $$78)
        )
        (local.set $$98
         (local.get $$83)
        )
       )
      )
     )
     (block
      (local.set $$$0146
       (local.get $$68)
      )
      (local.set $$$0147
       (local.get $$67)
      )
      (local.set $$98
       (local.get $$69)
      )
     )
    )
    (local.set $$97
     (f64.sub
      (local.get $$$0147)
      (local.get $$98)
     )
    )
    (local.set $$99
     (f64.sub
      (local.get $$97)
      (local.get $$$0146)
     )
    )
    (local.set $$100
     (i32.add
      (local.get $$1)
      (i32.const 8)
     )
    )
    (f64.store
     (local.get $$100)
     (local.get $$99)
    )
    (local.set $$$0144
     (local.get $$65)
    )
   )
  )
  (global.set $STACKTOP
   (local.get $sp)
  )
  (return
   (local.get $$$0144)
  )
 )
 (func $_cos (; 33 ;) (param $$0 f64) (result f64)
  (local $$$0 f64)
  (local $$1 i32)
  (local $$10 f64)
  (local $$11 i32)
  (local $$12 f64)
  (local $$13 i32)
  (local $$14 f64)
  (local $$15 f64)
  (local $$16 f64)
  (local $$17 i32)
  (local $$18 f64)
  (local $$19 f64)
  (local $$2 i64)
  (local $$20 f64)
  (local $$21 f64)
  (local $$22 i32)
  (local $$23 f64)
  (local $$24 f64)
  (local $$25 f64)
  (local $$26 f64)
  (local $$27 i32)
  (local $$28 f64)
  (local $$29 f64)
  (local $$3 i64)
  (local $$4 i32)
  (local $$5 i32)
  (local $$6 i32)
  (local $$7 i32)
  (local $$8 f64)
  (local $$9 i32)
  (local $$trunc i32)
  (local $$trunc$clear i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (global.set $STACKTOP
   (i32.add
    (global.get $STACKTOP)
    (i32.const 16)
   )
  )
  (if
   (i32.ge_s
    (global.get $STACKTOP)
    (global.get $STACK_MAX)
   )
   (call $abortStackOverflow
    (i32.const 16)
   )
  )
  (local.set $$1
   (local.get $sp)
  )
  (local.set $$2
   (i64.reinterpret_f64
    (local.get $$0)
   )
  )
  (local.set $$3
   (i64.shr_u
    (local.get $$2)
    (i64.const 32)
   )
  )
  (local.set $$4
   (i32.wrap_i64
    (local.get $$3)
   )
  )
  (local.set $$5
   (i32.and
    (local.get $$4)
    (i32.const 2147483647)
   )
  )
  (local.set $$6
   (i32.lt_u
    (local.get $$5)
    (i32.const 1072243196)
   )
  )
  (block $label$break$L1
   (if
    (local.get $$6)
    (block
     (local.set $$7
      (i32.lt_u
       (local.get $$5)
       (i32.const 1044816030)
      )
     )
     (if
      (local.get $$7)
      (local.set $$$0
       (f64.const 1)
      )
      (block
       (local.set $$8
        (call $___cos
         (local.get $$0)
         (f64.const 0)
        )
       )
       (local.set $$$0
        (local.get $$8)
       )
      )
     )
    )
    (block
     (local.set $$9
      (i32.gt_u
       (local.get $$5)
       (i32.const 2146435071)
      )
     )
     (if
      (local.get $$9)
      (block
       (local.set $$10
        (f64.sub
         (local.get $$0)
         (local.get $$0)
        )
       )
       (local.set $$$0
        (local.get $$10)
       )
       (br $label$break$L1)
      )
     )
     (local.set $$11
      (call $___rem_pio2
       (local.get $$0)
       (local.get $$1)
      )
     )
     (local.set $$trunc
      (i32.and
       (local.get $$11)
       (i32.const 255)
      )
     )
     (local.set $$trunc$clear
      (i32.and
       (local.get $$trunc)
       (i32.const 3)
      )
     )
     (block $switch
      (block $switch-default
       (block $switch-case1
        (block $switch-case0
         (block $switch-case
          (br_table $switch-case $switch-case0 $switch-case1 $switch-default
           (i32.sub
            (i32.shr_s
             (i32.shl
              (local.get $$trunc$clear)
              (i32.const 24)
             )
             (i32.const 24)
            )
            (i32.const 0)
           )
          )
         )
         (block
          (local.set $$12
           (f64.load
            (local.get $$1)
           )
          )
          (local.set $$13
           (i32.add
            (local.get $$1)
            (i32.const 8)
           )
          )
          (local.set $$14
           (f64.load
            (local.get $$13)
           )
          )
          (local.set $$15
           (call $___cos
            (local.get $$12)
            (local.get $$14)
           )
          )
          (local.set $$$0
           (local.get $$15)
          )
          (br $label$break$L1)
          (br $switch)
         )
        )
        (block
         (local.set $$16
          (f64.load
           (local.get $$1)
          )
         )
         (local.set $$17
          (i32.add
           (local.get $$1)
           (i32.const 8)
          )
         )
         (local.set $$18
          (f64.load
           (local.get $$17)
          )
         )
         (local.set $$19
          (call $___sin
           (local.get $$16)
           (local.get $$18)
           (i32.const 1)
          )
         )
         (local.set $$20
          (f64.neg
           (local.get $$19)
          )
         )
         (local.set $$$0
          (local.get $$20)
         )
         (br $label$break$L1)
         (br $switch)
        )
       )
       (block
        (local.set $$21
         (f64.load
          (local.get $$1)
         )
        )
        (local.set $$22
         (i32.add
          (local.get $$1)
          (i32.const 8)
         )
        )
        (local.set $$23
         (f64.load
          (local.get $$22)
         )
        )
        (local.set $$24
         (call $___cos
          (local.get $$21)
          (local.get $$23)
         )
        )
        (local.set $$25
         (f64.neg
          (local.get $$24)
         )
        )
        (local.set $$$0
         (local.get $$25)
        )
        (br $label$break$L1)
        (br $switch)
       )
      )
      (block
       (local.set $$26
        (f64.load
         (local.get $$1)
        )
       )
       (local.set $$27
        (i32.add
         (local.get $$1)
         (i32.const 8)
        )
       )
       (local.set $$28
        (f64.load
         (local.get $$27)
        )
       )
       (local.set $$29
        (call $___sin
         (local.get $$26)
         (local.get $$28)
         (i32.const 1)
        )
       )
       (local.set $$$0
        (local.get $$29)
       )
       (br $label$break$L1)
      )
     )
    )
   )
  )
  (global.set $STACKTOP
   (local.get $sp)
  )
  (return
   (local.get $$$0)
  )
 )
 (func $_malloc (; 34 ;) (param $$0 i32) (result i32)
  (local $$$0 i32)
  (local $$$0$i i32)
  (local $$$0$i$i i32)
  (local $$$0$i$i$i i32)
  (local $$$0$i20$i i32)
  (local $$$0169$i i32)
  (local $$$0170$i i32)
  (local $$$0171$i i32)
  (local $$$0192 i32)
  (local $$$0194 i32)
  (local $$$02014$i$i i32)
  (local $$$0202$lcssa$i$i i32)
  (local $$$02023$i$i i32)
  (local $$$0206$i$i i32)
  (local $$$0207$i$i i32)
  (local $$$024372$i i32)
  (local $$$0259$i$i i32)
  (local $$$02604$i$i i32)
  (local $$$0261$lcssa$i$i i32)
  (local $$$02613$i$i i32)
  (local $$$0267$i$i i32)
  (local $$$0268$i$i i32)
  (local $$$0318$i i32)
  (local $$$032012$i i32)
  (local $$$0321$lcssa$i i32)
  (local $$$032111$i i32)
  (local $$$0323$i i32)
  (local $$$0329$i i32)
  (local $$$0335$i i32)
  (local $$$0336$i i32)
  (local $$$0338$i i32)
  (local $$$0339$i i32)
  (local $$$0344$i i32)
  (local $$$1174$i i32)
  (local $$$1174$i$be i32)
  (local $$$1174$i$ph i32)
  (local $$$1176$i i32)
  (local $$$1176$i$be i32)
  (local $$$1176$i$ph i32)
  (local $$$124471$i i32)
  (local $$$1263$i$i i32)
  (local $$$1263$i$i$be i32)
  (local $$$1263$i$i$ph i32)
  (local $$$1265$i$i i32)
  (local $$$1265$i$i$be i32)
  (local $$$1265$i$i$ph i32)
  (local $$$1319$i i32)
  (local $$$1324$i i32)
  (local $$$1340$i i32)
  (local $$$1346$i i32)
  (local $$$1346$i$be i32)
  (local $$$1346$i$ph i32)
  (local $$$1350$i i32)
  (local $$$1350$i$be i32)
  (local $$$1350$i$ph i32)
  (local $$$2234243136$i i32)
  (local $$$2247$ph$i i32)
  (local $$$2253$ph$i i32)
  (local $$$2331$i i32)
  (local $$$3$i i32)
  (local $$$3$i$i i32)
  (local $$$3$i198 i32)
  (local $$$3$i198211 i32)
  (local $$$3326$i i32)
  (local $$$3348$i i32)
  (local $$$4$lcssa$i i32)
  (local $$$415$i i32)
  (local $$$415$i$ph i32)
  (local $$$4236$i i32)
  (local $$$4327$lcssa$i i32)
  (local $$$432714$i i32)
  (local $$$432714$i$ph i32)
  (local $$$4333$i i32)
  (local $$$533413$i i32)
  (local $$$533413$i$ph i32)
  (local $$$723947$i i32)
  (local $$$748$i i32)
  (local $$$pre i32)
  (local $$$pre$i i32)
  (local $$$pre$i$i i32)
  (local $$$pre$i16$i i32)
  (local $$$pre$i195 i32)
  (local $$$pre$i204 i32)
  (local $$$pre$phi$i$iZ2D i32)
  (local $$$pre$phi$i17$iZ2D i32)
  (local $$$pre$phi$i205Z2D i32)
  (local $$$pre$phi$iZ2D i32)
  (local $$$pre$phiZ2D i32)
  (local $$$sink i32)
  (local $$$sink320 i32)
  (local $$$sink321 i32)
  (local $$1 i32)
  (local $$10 i32)
  (local $$100 i32)
  (local $$101 i32)
  (local $$102 i32)
  (local $$103 i32)
  (local $$104 i32)
  (local $$105 i32)
  (local $$106 i32)
  (local $$107 i32)
  (local $$108 i32)
  (local $$109 i32)
  (local $$11 i32)
  (local $$110 i32)
  (local $$111 i32)
  (local $$112 i32)
  (local $$113 i32)
  (local $$114 i32)
  (local $$115 i32)
  (local $$116 i32)
  (local $$117 i32)
  (local $$118 i32)
  (local $$119 i32)
  (local $$12 i32)
  (local $$120 i32)
  (local $$121 i32)
  (local $$122 i32)
  (local $$123 i32)
  (local $$124 i32)
  (local $$125 i32)
  (local $$126 i32)
  (local $$127 i32)
  (local $$128 i32)
  (local $$129 i32)
  (local $$13 i32)
  (local $$130 i32)
  (local $$131 i32)
  (local $$132 i32)
  (local $$133 i32)
  (local $$134 i32)
  (local $$135 i32)
  (local $$136 i32)
  (local $$137 i32)
  (local $$138 i32)
  (local $$139 i32)
  (local $$14 i32)
  (local $$140 i32)
  (local $$141 i32)
  (local $$142 i32)
  (local $$143 i32)
  (local $$144 i32)
  (local $$145 i32)
  (local $$146 i32)
  (local $$147 i32)
  (local $$148 i32)
  (local $$149 i32)
  (local $$15 i32)
  (local $$150 i32)
  (local $$151 i32)
  (local $$152 i32)
  (local $$153 i32)
  (local $$154 i32)
  (local $$155 i32)
  (local $$156 i32)
  (local $$157 i32)
  (local $$158 i32)
  (local $$159 i32)
  (local $$16 i32)
  (local $$160 i32)
  (local $$161 i32)
  (local $$162 i32)
  (local $$163 i32)
  (local $$164 i32)
  (local $$165 i32)
  (local $$166 i32)
  (local $$167 i32)
  (local $$168 i32)
  (local $$169 i32)
  (local $$17 i32)
  (local $$170 i32)
  (local $$171 i32)
  (local $$172 i32)
  (local $$173 i32)
  (local $$174 i32)
  (local $$175 i32)
  (local $$176 i32)
  (local $$177 i32)
  (local $$178 i32)
  (local $$179 i32)
  (local $$18 i32)
  (local $$180 i32)
  (local $$181 i32)
  (local $$182 i32)
  (local $$183 i32)
  (local $$184 i32)
  (local $$185 i32)
  (local $$186 i32)
  (local $$187 i32)
  (local $$188 i32)
  (local $$189 i32)
  (local $$19 i32)
  (local $$190 i32)
  (local $$191 i32)
  (local $$192 i32)
  (local $$193 i32)
  (local $$194 i32)
  (local $$195 i32)
  (local $$196 i32)
  (local $$197 i32)
  (local $$198 i32)
  (local $$199 i32)
  (local $$2 i32)
  (local $$20 i32)
  (local $$200 i32)
  (local $$201 i32)
  (local $$202 i32)
  (local $$203 i32)
  (local $$204 i32)
  (local $$205 i32)
  (local $$206 i32)
  (local $$207 i32)
  (local $$208 i32)
  (local $$209 i32)
  (local $$21 i32)
  (local $$210 i32)
  (local $$211 i32)
  (local $$212 i32)
  (local $$213 i32)
  (local $$214 i32)
  (local $$215 i32)
  (local $$216 i32)
  (local $$217 i32)
  (local $$218 i32)
  (local $$219 i32)
  (local $$22 i32)
  (local $$220 i32)
  (local $$221 i32)
  (local $$222 i32)
  (local $$223 i32)
  (local $$224 i32)
  (local $$225 i32)
  (local $$226 i32)
  (local $$227 i32)
  (local $$228 i32)
  (local $$229 i32)
  (local $$23 i32)
  (local $$230 i32)
  (local $$231 i32)
  (local $$232 i32)
  (local $$233 i32)
  (local $$234 i32)
  (local $$235 i32)
  (local $$236 i32)
  (local $$237 i32)
  (local $$238 i32)
  (local $$239 i32)
  (local $$24 i32)
  (local $$240 i32)
  (local $$241 i32)
  (local $$242 i32)
  (local $$243 i32)
  (local $$244 i32)
  (local $$245 i32)
  (local $$246 i32)
  (local $$247 i32)
  (local $$248 i32)
  (local $$249 i32)
  (local $$25 i32)
  (local $$250 i32)
  (local $$251 i32)
  (local $$252 i32)
  (local $$253 i32)
  (local $$254 i32)
  (local $$255 i32)
  (local $$256 i32)
  (local $$257 i32)
  (local $$258 i32)
  (local $$259 i32)
  (local $$26 i32)
  (local $$260 i32)
  (local $$261 i32)
  (local $$262 i32)
  (local $$263 i32)
  (local $$264 i32)
  (local $$265 i32)
  (local $$266 i32)
  (local $$267 i32)
  (local $$268 i32)
  (local $$269 i32)
  (local $$27 i32)
  (local $$270 i32)
  (local $$271 i32)
  (local $$272 i32)
  (local $$273 i32)
  (local $$274 i32)
  (local $$275 i32)
  (local $$276 i32)
  (local $$277 i32)
  (local $$278 i32)
  (local $$279 i32)
  (local $$28 i32)
  (local $$280 i32)
  (local $$281 i32)
  (local $$282 i32)
  (local $$283 i32)
  (local $$284 i32)
  (local $$285 i32)
  (local $$286 i32)
  (local $$287 i32)
  (local $$288 i32)
  (local $$289 i32)
  (local $$29 i32)
  (local $$290 i32)
  (local $$291 i32)
  (local $$292 i32)
  (local $$293 i32)
  (local $$294 i32)
  (local $$295 i32)
  (local $$296 i32)
  (local $$297 i32)
  (local $$298 i32)
  (local $$299 i32)
  (local $$3 i32)
  (local $$30 i32)
  (local $$300 i32)
  (local $$301 i32)
  (local $$302 i32)
  (local $$303 i32)
  (local $$304 i32)
  (local $$305 i32)
  (local $$306 i32)
  (local $$307 i32)
  (local $$308 i32)
  (local $$309 i32)
  (local $$31 i32)
  (local $$310 i32)
  (local $$311 i32)
  (local $$312 i32)
  (local $$313 i32)
  (local $$314 i32)
  (local $$315 i32)
  (local $$316 i32)
  (local $$317 i32)
  (local $$318 i32)
  (local $$319 i32)
  (local $$32 i32)
  (local $$320 i32)
  (local $$321 i32)
  (local $$322 i32)
  (local $$323 i32)
  (local $$324 i32)
  (local $$325 i32)
  (local $$326 i32)
  (local $$327 i32)
  (local $$328 i32)
  (local $$329 i32)
  (local $$33 i32)
  (local $$330 i32)
  (local $$331 i32)
  (local $$332 i32)
  (local $$333 i32)
  (local $$334 i32)
  (local $$335 i32)
  (local $$336 i32)
  (local $$337 i32)
  (local $$338 i32)
  (local $$339 i32)
  (local $$34 i32)
  (local $$340 i32)
  (local $$341 i32)
  (local $$342 i32)
  (local $$343 i32)
  (local $$344 i32)
  (local $$345 i32)
  (local $$346 i32)
  (local $$347 i32)
  (local $$348 i32)
  (local $$349 i32)
  (local $$35 i32)
  (local $$350 i32)
  (local $$351 i32)
  (local $$352 i32)
  (local $$353 i32)
  (local $$354 i32)
  (local $$355 i32)
  (local $$356 i32)
  (local $$357 i32)
  (local $$358 i32)
  (local $$359 i32)
  (local $$36 i32)
  (local $$360 i32)
  (local $$361 i32)
  (local $$362 i32)
  (local $$363 i32)
  (local $$364 i32)
  (local $$365 i32)
  (local $$366 i32)
  (local $$367 i32)
  (local $$368 i32)
  (local $$369 i32)
  (local $$37 i32)
  (local $$370 i32)
  (local $$371 i32)
  (local $$372 i32)
  (local $$373 i32)
  (local $$374 i32)
  (local $$375 i32)
  (local $$376 i32)
  (local $$377 i32)
  (local $$378 i32)
  (local $$379 i32)
  (local $$38 i32)
  (local $$380 i32)
  (local $$381 i32)
  (local $$382 i32)
  (local $$383 i32)
  (local $$384 i32)
  (local $$385 i32)
  (local $$386 i32)
  (local $$387 i32)
  (local $$388 i32)
  (local $$389 i32)
  (local $$39 i32)
  (local $$390 i32)
  (local $$391 i32)
  (local $$392 i32)
  (local $$393 i32)
  (local $$394 i32)
  (local $$395 i32)
  (local $$396 i32)
  (local $$397 i32)
  (local $$398 i32)
  (local $$399 i32)
  (local $$4 i32)
  (local $$40 i32)
  (local $$400 i32)
  (local $$401 i32)
  (local $$402 i32)
  (local $$403 i32)
  (local $$404 i32)
  (local $$405 i32)
  (local $$406 i32)
  (local $$407 i32)
  (local $$408 i32)
  (local $$409 i32)
  (local $$41 i32)
  (local $$410 i32)
  (local $$411 i32)
  (local $$412 i32)
  (local $$413 i32)
  (local $$414 i32)
  (local $$415 i32)
  (local $$416 i32)
  (local $$417 i32)
  (local $$418 i32)
  (local $$419 i32)
  (local $$42 i32)
  (local $$420 i32)
  (local $$421 i32)
  (local $$422 i32)
  (local $$423 i32)
  (local $$424 i32)
  (local $$425 i32)
  (local $$426 i32)
  (local $$427 i32)
  (local $$428 i32)
  (local $$429 i32)
  (local $$43 i32)
  (local $$430 i32)
  (local $$431 i32)
  (local $$432 i32)
  (local $$433 i32)
  (local $$434 i32)
  (local $$435 i32)
  (local $$436 i32)
  (local $$437 i32)
  (local $$438 i32)
  (local $$439 i32)
  (local $$44 i32)
  (local $$440 i32)
  (local $$441 i32)
  (local $$442 i32)
  (local $$443 i32)
  (local $$444 i32)
  (local $$445 i32)
  (local $$446 i32)
  (local $$447 i32)
  (local $$448 i32)
  (local $$449 i32)
  (local $$45 i32)
  (local $$450 i32)
  (local $$451 i32)
  (local $$452 i32)
  (local $$453 i32)
  (local $$454 i32)
  (local $$455 i32)
  (local $$456 i32)
  (local $$457 i32)
  (local $$458 i32)
  (local $$459 i32)
  (local $$46 i32)
  (local $$460 i32)
  (local $$461 i32)
  (local $$462 i32)
  (local $$463 i32)
  (local $$464 i32)
  (local $$465 i32)
  (local $$466 i32)
  (local $$467 i32)
  (local $$468 i32)
  (local $$469 i32)
  (local $$47 i32)
  (local $$470 i32)
  (local $$471 i32)
  (local $$472 i32)
  (local $$473 i32)
  (local $$474 i32)
  (local $$475 i32)
  (local $$476 i32)
  (local $$477 i32)
  (local $$478 i32)
  (local $$479 i32)
  (local $$48 i32)
  (local $$480 i32)
  (local $$481 i32)
  (local $$482 i32)
  (local $$483 i32)
  (local $$484 i32)
  (local $$485 i32)
  (local $$486 i32)
  (local $$487 i32)
  (local $$488 i32)
  (local $$489 i32)
  (local $$49 i32)
  (local $$490 i32)
  (local $$491 i32)
  (local $$492 i32)
  (local $$493 i32)
  (local $$494 i32)
  (local $$495 i32)
  (local $$496 i32)
  (local $$497 i32)
  (local $$498 i32)
  (local $$499 i32)
  (local $$5 i32)
  (local $$50 i32)
  (local $$500 i32)
  (local $$501 i32)
  (local $$502 i32)
  (local $$503 i32)
  (local $$504 i32)
  (local $$505 i32)
  (local $$506 i32)
  (local $$507 i32)
  (local $$508 i32)
  (local $$509 i32)
  (local $$51 i32)
  (local $$510 i32)
  (local $$511 i32)
  (local $$512 i32)
  (local $$513 i32)
  (local $$514 i32)
  (local $$515 i32)
  (local $$516 i32)
  (local $$517 i32)
  (local $$518 i32)
  (local $$519 i32)
  (local $$52 i32)
  (local $$520 i32)
  (local $$521 i32)
  (local $$522 i32)
  (local $$523 i32)
  (local $$524 i32)
  (local $$525 i32)
  (local $$526 i32)
  (local $$527 i32)
  (local $$528 i32)
  (local $$529 i32)
  (local $$53 i32)
  (local $$530 i32)
  (local $$531 i32)
  (local $$532 i32)
  (local $$533 i32)
  (local $$534 i32)
  (local $$535 i32)
  (local $$536 i32)
  (local $$537 i32)
  (local $$538 i32)
  (local $$539 i32)
  (local $$54 i32)
  (local $$540 i32)
  (local $$541 i32)
  (local $$542 i32)
  (local $$543 i32)
  (local $$544 i32)
  (local $$545 i32)
  (local $$546 i32)
  (local $$547 i32)
  (local $$548 i32)
  (local $$549 i32)
  (local $$55 i32)
  (local $$550 i32)
  (local $$551 i32)
  (local $$552 i32)
  (local $$553 i32)
  (local $$554 i32)
  (local $$555 i32)
  (local $$556 i32)
  (local $$557 i32)
  (local $$558 i32)
  (local $$559 i32)
  (local $$56 i32)
  (local $$560 i32)
  (local $$561 i32)
  (local $$562 i32)
  (local $$563 i32)
  (local $$564 i32)
  (local $$565 i32)
  (local $$566 i32)
  (local $$567 i32)
  (local $$568 i32)
  (local $$569 i32)
  (local $$57 i32)
  (local $$570 i32)
  (local $$571 i32)
  (local $$572 i32)
  (local $$573 i32)
  (local $$574 i32)
  (local $$575 i32)
  (local $$576 i32)
  (local $$577 i32)
  (local $$578 i32)
  (local $$579 i32)
  (local $$58 i32)
  (local $$580 i32)
  (local $$581 i32)
  (local $$582 i32)
  (local $$583 i32)
  (local $$584 i32)
  (local $$585 i32)
  (local $$586 i32)
  (local $$587 i32)
  (local $$588 i32)
  (local $$589 i32)
  (local $$59 i32)
  (local $$590 i32)
  (local $$591 i32)
  (local $$592 i32)
  (local $$593 i32)
  (local $$594 i32)
  (local $$595 i32)
  (local $$596 i32)
  (local $$597 i32)
  (local $$598 i32)
  (local $$599 i32)
  (local $$6 i32)
  (local $$60 i32)
  (local $$600 i32)
  (local $$601 i32)
  (local $$602 i32)
  (local $$603 i32)
  (local $$604 i32)
  (local $$605 i32)
  (local $$606 i32)
  (local $$607 i32)
  (local $$608 i32)
  (local $$609 i32)
  (local $$61 i32)
  (local $$610 i32)
  (local $$611 i32)
  (local $$612 i32)
  (local $$613 i32)
  (local $$614 i32)
  (local $$615 i32)
  (local $$616 i32)
  (local $$617 i32)
  (local $$618 i32)
  (local $$619 i32)
  (local $$62 i32)
  (local $$620 i32)
  (local $$621 i32)
  (local $$622 i32)
  (local $$623 i32)
  (local $$624 i32)
  (local $$625 i32)
  (local $$626 i32)
  (local $$627 i32)
  (local $$628 i32)
  (local $$629 i32)
  (local $$63 i32)
  (local $$630 i32)
  (local $$631 i32)
  (local $$632 i32)
  (local $$633 i32)
  (local $$634 i32)
  (local $$635 i32)
  (local $$636 i32)
  (local $$637 i32)
  (local $$638 i32)
  (local $$639 i32)
  (local $$64 i32)
  (local $$640 i32)
  (local $$641 i32)
  (local $$642 i32)
  (local $$643 i32)
  (local $$644 i32)
  (local $$645 i32)
  (local $$646 i32)
  (local $$647 i32)
  (local $$648 i32)
  (local $$649 i32)
  (local $$65 i32)
  (local $$650 i32)
  (local $$651 i32)
  (local $$652 i32)
  (local $$653 i32)
  (local $$654 i32)
  (local $$655 i32)
  (local $$656 i32)
  (local $$657 i32)
  (local $$658 i32)
  (local $$659 i32)
  (local $$66 i32)
  (local $$660 i32)
  (local $$661 i32)
  (local $$662 i32)
  (local $$663 i32)
  (local $$664 i32)
  (local $$665 i32)
  (local $$666 i32)
  (local $$667 i32)
  (local $$668 i32)
  (local $$669 i32)
  (local $$67 i32)
  (local $$670 i32)
  (local $$671 i32)
  (local $$672 i32)
  (local $$673 i32)
  (local $$674 i32)
  (local $$675 i32)
  (local $$676 i32)
  (local $$677 i32)
  (local $$678 i32)
  (local $$679 i32)
  (local $$68 i32)
  (local $$680 i32)
  (local $$681 i32)
  (local $$682 i32)
  (local $$683 i32)
  (local $$684 i32)
  (local $$685 i32)
  (local $$686 i32)
  (local $$687 i32)
  (local $$688 i32)
  (local $$689 i32)
  (local $$69 i32)
  (local $$690 i32)
  (local $$691 i32)
  (local $$692 i32)
  (local $$693 i32)
  (local $$694 i32)
  (local $$695 i32)
  (local $$696 i32)
  (local $$697 i32)
  (local $$698 i32)
  (local $$699 i32)
  (local $$7 i32)
  (local $$70 i32)
  (local $$700 i32)
  (local $$701 i32)
  (local $$702 i32)
  (local $$703 i32)
  (local $$704 i32)
  (local $$705 i32)
  (local $$706 i32)
  (local $$707 i32)
  (local $$708 i32)
  (local $$709 i32)
  (local $$71 i32)
  (local $$710 i32)
  (local $$711 i32)
  (local $$712 i32)
  (local $$713 i32)
  (local $$714 i32)
  (local $$715 i32)
  (local $$716 i32)
  (local $$717 i32)
  (local $$718 i32)
  (local $$719 i32)
  (local $$72 i32)
  (local $$720 i32)
  (local $$721 i32)
  (local $$722 i32)
  (local $$723 i32)
  (local $$724 i32)
  (local $$725 i32)
  (local $$726 i32)
  (local $$727 i32)
  (local $$728 i32)
  (local $$729 i32)
  (local $$73 i32)
  (local $$730 i32)
  (local $$731 i32)
  (local $$732 i32)
  (local $$733 i32)
  (local $$734 i32)
  (local $$735 i32)
  (local $$736 i32)
  (local $$737 i32)
  (local $$738 i32)
  (local $$739 i32)
  (local $$74 i32)
  (local $$740 i32)
  (local $$741 i32)
  (local $$742 i32)
  (local $$743 i32)
  (local $$744 i32)
  (local $$745 i32)
  (local $$746 i32)
  (local $$747 i32)
  (local $$748 i32)
  (local $$749 i32)
  (local $$75 i32)
  (local $$750 i32)
  (local $$751 i32)
  (local $$752 i32)
  (local $$753 i32)
  (local $$754 i32)
  (local $$755 i32)
  (local $$756 i32)
  (local $$757 i32)
  (local $$758 i32)
  (local $$759 i32)
  (local $$76 i32)
  (local $$760 i32)
  (local $$761 i32)
  (local $$762 i32)
  (local $$763 i32)
  (local $$764 i32)
  (local $$765 i32)
  (local $$766 i32)
  (local $$767 i32)
  (local $$768 i32)
  (local $$769 i32)
  (local $$77 i32)
  (local $$770 i32)
  (local $$771 i32)
  (local $$772 i32)
  (local $$773 i32)
  (local $$774 i32)
  (local $$775 i32)
  (local $$776 i32)
  (local $$777 i32)
  (local $$778 i32)
  (local $$779 i32)
  (local $$78 i32)
  (local $$780 i32)
  (local $$781 i32)
  (local $$782 i32)
  (local $$783 i32)
  (local $$784 i32)
  (local $$785 i32)
  (local $$786 i32)
  (local $$787 i32)
  (local $$788 i32)
  (local $$789 i32)
  (local $$79 i32)
  (local $$790 i32)
  (local $$791 i32)
  (local $$792 i32)
  (local $$793 i32)
  (local $$794 i32)
  (local $$795 i32)
  (local $$796 i32)
  (local $$797 i32)
  (local $$798 i32)
  (local $$799 i32)
  (local $$8 i32)
  (local $$80 i32)
  (local $$800 i32)
  (local $$801 i32)
  (local $$802 i32)
  (local $$803 i32)
  (local $$804 i32)
  (local $$805 i32)
  (local $$806 i32)
  (local $$807 i32)
  (local $$808 i32)
  (local $$809 i32)
  (local $$81 i32)
  (local $$810 i32)
  (local $$811 i32)
  (local $$812 i32)
  (local $$813 i32)
  (local $$814 i32)
  (local $$815 i32)
  (local $$816 i32)
  (local $$817 i32)
  (local $$818 i32)
  (local $$819 i32)
  (local $$82 i32)
  (local $$820 i32)
  (local $$821 i32)
  (local $$822 i32)
  (local $$823 i32)
  (local $$824 i32)
  (local $$825 i32)
  (local $$826 i32)
  (local $$827 i32)
  (local $$828 i32)
  (local $$829 i32)
  (local $$83 i32)
  (local $$830 i32)
  (local $$831 i32)
  (local $$832 i32)
  (local $$833 i32)
  (local $$834 i32)
  (local $$835 i32)
  (local $$836 i32)
  (local $$837 i32)
  (local $$838 i32)
  (local $$839 i32)
  (local $$84 i32)
  (local $$840 i32)
  (local $$841 i32)
  (local $$842 i32)
  (local $$843 i32)
  (local $$844 i32)
  (local $$845 i32)
  (local $$846 i32)
  (local $$847 i32)
  (local $$848 i32)
  (local $$849 i32)
  (local $$85 i32)
  (local $$850 i32)
  (local $$851 i32)
  (local $$852 i32)
  (local $$853 i32)
  (local $$854 i32)
  (local $$855 i32)
  (local $$856 i32)
  (local $$857 i32)
  (local $$858 i32)
  (local $$859 i32)
  (local $$86 i32)
  (local $$860 i32)
  (local $$861 i32)
  (local $$862 i32)
  (local $$863 i32)
  (local $$864 i32)
  (local $$865 i32)
  (local $$866 i32)
  (local $$867 i32)
  (local $$868 i32)
  (local $$869 i32)
  (local $$87 i32)
  (local $$870 i32)
  (local $$871 i32)
  (local $$872 i32)
  (local $$873 i32)
  (local $$874 i32)
  (local $$875 i32)
  (local $$876 i32)
  (local $$877 i32)
  (local $$878 i32)
  (local $$879 i32)
  (local $$88 i32)
  (local $$880 i32)
  (local $$881 i32)
  (local $$882 i32)
  (local $$883 i32)
  (local $$884 i32)
  (local $$885 i32)
  (local $$886 i32)
  (local $$887 i32)
  (local $$888 i32)
  (local $$889 i32)
  (local $$89 i32)
  (local $$890 i32)
  (local $$891 i32)
  (local $$892 i32)
  (local $$893 i32)
  (local $$894 i32)
  (local $$895 i32)
  (local $$896 i32)
  (local $$897 i32)
  (local $$898 i32)
  (local $$899 i32)
  (local $$9 i32)
  (local $$90 i32)
  (local $$900 i32)
  (local $$901 i32)
  (local $$902 i32)
  (local $$903 i32)
  (local $$904 i32)
  (local $$905 i32)
  (local $$906 i32)
  (local $$907 i32)
  (local $$908 i32)
  (local $$909 i32)
  (local $$91 i32)
  (local $$910 i32)
  (local $$911 i32)
  (local $$912 i32)
  (local $$913 i32)
  (local $$914 i32)
  (local $$915 i32)
  (local $$916 i32)
  (local $$917 i32)
  (local $$918 i32)
  (local $$919 i32)
  (local $$92 i32)
  (local $$920 i32)
  (local $$921 i32)
  (local $$922 i32)
  (local $$923 i32)
  (local $$924 i32)
  (local $$925 i32)
  (local $$926 i32)
  (local $$927 i32)
  (local $$928 i32)
  (local $$929 i32)
  (local $$93 i32)
  (local $$930 i32)
  (local $$931 i32)
  (local $$932 i32)
  (local $$933 i32)
  (local $$934 i32)
  (local $$935 i32)
  (local $$936 i32)
  (local $$937 i32)
  (local $$938 i32)
  (local $$939 i32)
  (local $$94 i32)
  (local $$940 i32)
  (local $$941 i32)
  (local $$942 i32)
  (local $$943 i32)
  (local $$944 i32)
  (local $$945 i32)
  (local $$946 i32)
  (local $$947 i32)
  (local $$948 i32)
  (local $$949 i32)
  (local $$95 i32)
  (local $$950 i32)
  (local $$951 i32)
  (local $$952 i32)
  (local $$953 i32)
  (local $$954 i32)
  (local $$955 i32)
  (local $$956 i32)
  (local $$957 i32)
  (local $$958 i32)
  (local $$959 i32)
  (local $$96 i32)
  (local $$960 i32)
  (local $$961 i32)
  (local $$962 i32)
  (local $$963 i32)
  (local $$964 i32)
  (local $$965 i32)
  (local $$966 i32)
  (local $$967 i32)
  (local $$968 i32)
  (local $$969 i32)
  (local $$97 i32)
  (local $$970 i32)
  (local $$971 i32)
  (local $$972 i32)
  (local $$973 i32)
  (local $$974 i32)
  (local $$975 i32)
  (local $$976 i32)
  (local $$977 i32)
  (local $$978 i32)
  (local $$979 i32)
  (local $$98 i32)
  (local $$99 i32)
  (local $$cond$i i32)
  (local $$cond$i$i i32)
  (local $$cond$i203 i32)
  (local $$not$$i i32)
  (local $$or$cond$i i32)
  (local $$or$cond$i199 i32)
  (local $$or$cond1$i i32)
  (local $$or$cond1$i197 i32)
  (local $$or$cond11$i i32)
  (local $$or$cond2$i i32)
  (local $$or$cond5$i i32)
  (local $$or$cond50$i i32)
  (local $$or$cond51$i i32)
  (local $$or$cond6$i i32)
  (local $$or$cond7$i i32)
  (local $$or$cond8$i i32)
  (local $$or$cond8$not$i i32)
  (local $$spec$select$i i32)
  (local $$spec$select$i201 i32)
  (local $$spec$select1$i i32)
  (local $$spec$select2$i i32)
  (local $$spec$select4$i i32)
  (local $$spec$select49$i i32)
  (local $$spec$select9$i i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (global.set $STACKTOP
   (i32.add
    (global.get $STACKTOP)
    (i32.const 16)
   )
  )
  (if
   (i32.ge_s
    (global.get $STACKTOP)
    (global.get $STACK_MAX)
   )
   (call $abortStackOverflow
    (i32.const 16)
   )
  )
  (local.set $$1
   (local.get $sp)
  )
  (local.set $$2
   (i32.lt_u
    (local.get $$0)
    (i32.const 245)
   )
  )
  (block $do-once
   (if
    (local.get $$2)
    (block
     (local.set $$3
      (i32.lt_u
       (local.get $$0)
       (i32.const 11)
      )
     )
     (local.set $$4
      (i32.add
       (local.get $$0)
       (i32.const 11)
      )
     )
     (local.set $$5
      (i32.and
       (local.get $$4)
       (i32.const -8)
      )
     )
     (local.set $$6
      (if (result i32)
       (local.get $$3)
       (i32.const 16)
       (local.get $$5)
      )
     )
     (local.set $$7
      (i32.shr_u
       (local.get $$6)
       (i32.const 3)
      )
     )
     (local.set $$8
      (i32.load
       (i32.const 2592)
      )
     )
     (local.set $$9
      (i32.shr_u
       (local.get $$8)
       (local.get $$7)
      )
     )
     (local.set $$10
      (i32.and
       (local.get $$9)
       (i32.const 3)
      )
     )
     (local.set $$11
      (i32.eq
       (local.get $$10)
       (i32.const 0)
      )
     )
     (if
      (i32.eqz
       (local.get $$11)
      )
      (block
       (local.set $$12
        (i32.and
         (local.get $$9)
         (i32.const 1)
        )
       )
       (local.set $$13
        (i32.xor
         (local.get $$12)
         (i32.const 1)
        )
       )
       (local.set $$14
        (i32.add
         (local.get $$13)
         (local.get $$7)
        )
       )
       (local.set $$15
        (i32.shl
         (local.get $$14)
         (i32.const 1)
        )
       )
       (local.set $$16
        (i32.add
         (i32.const 2632)
         (i32.shl
          (local.get $$15)
          (i32.const 2)
         )
        )
       )
       (local.set $$17
        (i32.add
         (local.get $$16)
         (i32.const 8)
        )
       )
       (local.set $$18
        (i32.load
         (local.get $$17)
        )
       )
       (local.set $$19
        (i32.add
         (local.get $$18)
         (i32.const 8)
        )
       )
       (local.set $$20
        (i32.load
         (local.get $$19)
        )
       )
       (local.set $$21
        (i32.eq
         (local.get $$20)
         (local.get $$16)
        )
       )
       (if
        (local.get $$21)
        (block
         (local.set $$22
          (i32.shl
           (i32.const 1)
           (local.get $$14)
          )
         )
         (local.set $$23
          (i32.xor
           (local.get $$22)
           (i32.const -1)
          )
         )
         (local.set $$24
          (i32.and
           (local.get $$8)
           (local.get $$23)
          )
         )
         (i32.store
          (i32.const 2592)
          (local.get $$24)
         )
        )
        (block
         (local.set $$25
          (i32.add
           (local.get $$20)
           (i32.const 12)
          )
         )
         (i32.store
          (local.get $$25)
          (local.get $$16)
         )
         (i32.store
          (local.get $$17)
          (local.get $$20)
         )
        )
       )
       (local.set $$26
        (i32.shl
         (local.get $$14)
         (i32.const 3)
        )
       )
       (local.set $$27
        (i32.or
         (local.get $$26)
         (i32.const 3)
        )
       )
       (local.set $$28
        (i32.add
         (local.get $$18)
         (i32.const 4)
        )
       )
       (i32.store
        (local.get $$28)
        (local.get $$27)
       )
       (local.set $$29
        (i32.add
         (local.get $$18)
         (local.get $$26)
        )
       )
       (local.set $$30
        (i32.add
         (local.get $$29)
         (i32.const 4)
        )
       )
       (local.set $$31
        (i32.load
         (local.get $$30)
        )
       )
       (local.set $$32
        (i32.or
         (local.get $$31)
         (i32.const 1)
        )
       )
       (i32.store
        (local.get $$30)
        (local.get $$32)
       )
       (local.set $$$0
        (local.get $$19)
       )
       (global.set $STACKTOP
        (local.get $sp)
       )
       (return
        (local.get $$$0)
       )
      )
     )
     (local.set $$33
      (i32.load
       (i32.const 2600)
      )
     )
     (local.set $$34
      (i32.gt_u
       (local.get $$6)
       (local.get $$33)
      )
     )
     (if
      (local.get $$34)
      (block
       (local.set $$35
        (i32.eq
         (local.get $$9)
         (i32.const 0)
        )
       )
       (if
        (i32.eqz
         (local.get $$35)
        )
        (block
         (local.set $$36
          (i32.shl
           (local.get $$9)
           (local.get $$7)
          )
         )
         (local.set $$37
          (i32.shl
           (i32.const 2)
           (local.get $$7)
          )
         )
         (local.set $$38
          (i32.sub
           (i32.const 0)
           (local.get $$37)
          )
         )
         (local.set $$39
          (i32.or
           (local.get $$37)
           (local.get $$38)
          )
         )
         (local.set $$40
          (i32.and
           (local.get $$36)
           (local.get $$39)
          )
         )
         (local.set $$41
          (i32.sub
           (i32.const 0)
           (local.get $$40)
          )
         )
         (local.set $$42
          (i32.and
           (local.get $$40)
           (local.get $$41)
          )
         )
         (local.set $$43
          (i32.add
           (local.get $$42)
           (i32.const -1)
          )
         )
         (local.set $$44
          (i32.shr_u
           (local.get $$43)
           (i32.const 12)
          )
         )
         (local.set $$45
          (i32.and
           (local.get $$44)
           (i32.const 16)
          )
         )
         (local.set $$46
          (i32.shr_u
           (local.get $$43)
           (local.get $$45)
          )
         )
         (local.set $$47
          (i32.shr_u
           (local.get $$46)
           (i32.const 5)
          )
         )
         (local.set $$48
          (i32.and
           (local.get $$47)
           (i32.const 8)
          )
         )
         (local.set $$49
          (i32.or
           (local.get $$48)
           (local.get $$45)
          )
         )
         (local.set $$50
          (i32.shr_u
           (local.get $$46)
           (local.get $$48)
          )
         )
         (local.set $$51
          (i32.shr_u
           (local.get $$50)
           (i32.const 2)
          )
         )
         (local.set $$52
          (i32.and
           (local.get $$51)
           (i32.const 4)
          )
         )
         (local.set $$53
          (i32.or
           (local.get $$49)
           (local.get $$52)
          )
         )
         (local.set $$54
          (i32.shr_u
           (local.get $$50)
           (local.get $$52)
          )
         )
         (local.set $$55
          (i32.shr_u
           (local.get $$54)
           (i32.const 1)
          )
         )
         (local.set $$56
          (i32.and
           (local.get $$55)
           (i32.const 2)
          )
         )
         (local.set $$57
          (i32.or
           (local.get $$53)
           (local.get $$56)
          )
         )
         (local.set $$58
          (i32.shr_u
           (local.get $$54)
           (local.get $$56)
          )
         )
         (local.set $$59
          (i32.shr_u
           (local.get $$58)
           (i32.const 1)
          )
         )
         (local.set $$60
          (i32.and
           (local.get $$59)
           (i32.const 1)
          )
         )
         (local.set $$61
          (i32.or
           (local.get $$57)
           (local.get $$60)
          )
         )
         (local.set $$62
          (i32.shr_u
           (local.get $$58)
           (local.get $$60)
          )
         )
         (local.set $$63
          (i32.add
           (local.get $$61)
           (local.get $$62)
          )
         )
         (local.set $$64
          (i32.shl
           (local.get $$63)
           (i32.const 1)
          )
         )
         (local.set $$65
          (i32.add
           (i32.const 2632)
           (i32.shl
            (local.get $$64)
            (i32.const 2)
           )
          )
         )
         (local.set $$66
          (i32.add
           (local.get $$65)
           (i32.const 8)
          )
         )
         (local.set $$67
          (i32.load
           (local.get $$66)
          )
         )
         (local.set $$68
          (i32.add
           (local.get $$67)
           (i32.const 8)
          )
         )
         (local.set $$69
          (i32.load
           (local.get $$68)
          )
         )
         (local.set $$70
          (i32.eq
           (local.get $$69)
           (local.get $$65)
          )
         )
         (if
          (local.get $$70)
          (block
           (local.set $$71
            (i32.shl
             (i32.const 1)
             (local.get $$63)
            )
           )
           (local.set $$72
            (i32.xor
             (local.get $$71)
             (i32.const -1)
            )
           )
           (local.set $$73
            (i32.and
             (local.get $$8)
             (local.get $$72)
            )
           )
           (i32.store
            (i32.const 2592)
            (local.get $$73)
           )
           (local.set $$90
            (local.get $$73)
           )
          )
          (block
           (local.set $$74
            (i32.add
             (local.get $$69)
             (i32.const 12)
            )
           )
           (i32.store
            (local.get $$74)
            (local.get $$65)
           )
           (i32.store
            (local.get $$66)
            (local.get $$69)
           )
           (local.set $$90
            (local.get $$8)
           )
          )
         )
         (local.set $$75
          (i32.shl
           (local.get $$63)
           (i32.const 3)
          )
         )
         (local.set $$76
          (i32.sub
           (local.get $$75)
           (local.get $$6)
          )
         )
         (local.set $$77
          (i32.or
           (local.get $$6)
           (i32.const 3)
          )
         )
         (local.set $$78
          (i32.add
           (local.get $$67)
           (i32.const 4)
          )
         )
         (i32.store
          (local.get $$78)
          (local.get $$77)
         )
         (local.set $$79
          (i32.add
           (local.get $$67)
           (local.get $$6)
          )
         )
         (local.set $$80
          (i32.or
           (local.get $$76)
           (i32.const 1)
          )
         )
         (local.set $$81
          (i32.add
           (local.get $$79)
           (i32.const 4)
          )
         )
         (i32.store
          (local.get $$81)
          (local.get $$80)
         )
         (local.set $$82
          (i32.add
           (local.get $$67)
           (local.get $$75)
          )
         )
         (i32.store
          (local.get $$82)
          (local.get $$76)
         )
         (local.set $$83
          (i32.eq
           (local.get $$33)
           (i32.const 0)
          )
         )
         (if
          (i32.eqz
           (local.get $$83)
          )
          (block
           (local.set $$84
            (i32.load
             (i32.const 2612)
            )
           )
           (local.set $$85
            (i32.shr_u
             (local.get $$33)
             (i32.const 3)
            )
           )
           (local.set $$86
            (i32.shl
             (local.get $$85)
             (i32.const 1)
            )
           )
           (local.set $$87
            (i32.add
             (i32.const 2632)
             (i32.shl
              (local.get $$86)
              (i32.const 2)
             )
            )
           )
           (local.set $$88
            (i32.shl
             (i32.const 1)
             (local.get $$85)
            )
           )
           (local.set $$89
            (i32.and
             (local.get $$90)
             (local.get $$88)
            )
           )
           (local.set $$91
            (i32.eq
             (local.get $$89)
             (i32.const 0)
            )
           )
           (if
            (local.get $$91)
            (block
             (local.set $$92
              (i32.or
               (local.get $$90)
               (local.get $$88)
              )
             )
             (i32.store
              (i32.const 2592)
              (local.get $$92)
             )
             (local.set $$$pre
              (i32.add
               (local.get $$87)
               (i32.const 8)
              )
             )
             (local.set $$$0194
              (local.get $$87)
             )
             (local.set $$$pre$phiZ2D
              (local.get $$$pre)
             )
            )
            (block
             (local.set $$93
              (i32.add
               (local.get $$87)
               (i32.const 8)
              )
             )
             (local.set $$94
              (i32.load
               (local.get $$93)
              )
             )
             (local.set $$$0194
              (local.get $$94)
             )
             (local.set $$$pre$phiZ2D
              (local.get $$93)
             )
            )
           )
           (i32.store
            (local.get $$$pre$phiZ2D)
            (local.get $$84)
           )
           (local.set $$95
            (i32.add
             (local.get $$$0194)
             (i32.const 12)
            )
           )
           (i32.store
            (local.get $$95)
            (local.get $$84)
           )
           (local.set $$96
            (i32.add
             (local.get $$84)
             (i32.const 8)
            )
           )
           (i32.store
            (local.get $$96)
            (local.get $$$0194)
           )
           (local.set $$97
            (i32.add
             (local.get $$84)
             (i32.const 12)
            )
           )
           (i32.store
            (local.get $$97)
            (local.get $$87)
           )
          )
         )
         (i32.store
          (i32.const 2600)
          (local.get $$76)
         )
         (i32.store
          (i32.const 2612)
          (local.get $$79)
         )
         (local.set $$$0
          (local.get $$68)
         )
         (global.set $STACKTOP
          (local.get $sp)
         )
         (return
          (local.get $$$0)
         )
        )
       )
       (local.set $$98
        (i32.load
         (i32.const 2596)
        )
       )
       (local.set $$99
        (i32.eq
         (local.get $$98)
         (i32.const 0)
        )
       )
       (if
        (local.get $$99)
        (local.set $$$0192
         (local.get $$6)
        )
        (block
         (local.set $$100
          (i32.sub
           (i32.const 0)
           (local.get $$98)
          )
         )
         (local.set $$101
          (i32.and
           (local.get $$98)
           (local.get $$100)
          )
         )
         (local.set $$102
          (i32.add
           (local.get $$101)
           (i32.const -1)
          )
         )
         (local.set $$103
          (i32.shr_u
           (local.get $$102)
           (i32.const 12)
          )
         )
         (local.set $$104
          (i32.and
           (local.get $$103)
           (i32.const 16)
          )
         )
         (local.set $$105
          (i32.shr_u
           (local.get $$102)
           (local.get $$104)
          )
         )
         (local.set $$106
          (i32.shr_u
           (local.get $$105)
           (i32.const 5)
          )
         )
         (local.set $$107
          (i32.and
           (local.get $$106)
           (i32.const 8)
          )
         )
         (local.set $$108
          (i32.or
           (local.get $$107)
           (local.get $$104)
          )
         )
         (local.set $$109
          (i32.shr_u
           (local.get $$105)
           (local.get $$107)
          )
         )
         (local.set $$110
          (i32.shr_u
           (local.get $$109)
           (i32.const 2)
          )
         )
         (local.set $$111
          (i32.and
           (local.get $$110)
           (i32.const 4)
          )
         )
         (local.set $$112
          (i32.or
           (local.get $$108)
           (local.get $$111)
          )
         )
         (local.set $$113
          (i32.shr_u
           (local.get $$109)
           (local.get $$111)
          )
         )
         (local.set $$114
          (i32.shr_u
           (local.get $$113)
           (i32.const 1)
          )
         )
         (local.set $$115
          (i32.and
           (local.get $$114)
           (i32.const 2)
          )
         )
         (local.set $$116
          (i32.or
           (local.get $$112)
           (local.get $$115)
          )
         )
         (local.set $$117
          (i32.shr_u
           (local.get $$113)
           (local.get $$115)
          )
         )
         (local.set $$118
          (i32.shr_u
           (local.get $$117)
           (i32.const 1)
          )
         )
         (local.set $$119
          (i32.and
           (local.get $$118)
           (i32.const 1)
          )
         )
         (local.set $$120
          (i32.or
           (local.get $$116)
           (local.get $$119)
          )
         )
         (local.set $$121
          (i32.shr_u
           (local.get $$117)
           (local.get $$119)
          )
         )
         (local.set $$122
          (i32.add
           (local.get $$120)
           (local.get $$121)
          )
         )
         (local.set $$123
          (i32.add
           (i32.const 2896)
           (i32.shl
            (local.get $$122)
            (i32.const 2)
           )
          )
         )
         (local.set $$124
          (i32.load
           (local.get $$123)
          )
         )
         (local.set $$125
          (i32.add
           (local.get $$124)
           (i32.const 4)
          )
         )
         (local.set $$126
          (i32.load
           (local.get $$125)
          )
         )
         (local.set $$127
          (i32.and
           (local.get $$126)
           (i32.const -8)
          )
         )
         (local.set $$128
          (i32.sub
           (local.get $$127)
           (local.get $$6)
          )
         )
         (local.set $$$0169$i
          (local.get $$124)
         )
         (local.set $$$0170$i
          (local.get $$124)
         )
         (local.set $$$0171$i
          (local.get $$128)
         )
         (loop $while-in
          (block $while-out
           (local.set $$129
            (i32.add
             (local.get $$$0169$i)
             (i32.const 16)
            )
           )
           (local.set $$130
            (i32.load
             (local.get $$129)
            )
           )
           (local.set $$131
            (i32.eq
             (local.get $$130)
             (i32.const 0)
            )
           )
           (if
            (local.get $$131)
            (block
             (local.set $$132
              (i32.add
               (local.get $$$0169$i)
               (i32.const 20)
              )
             )
             (local.set $$133
              (i32.load
               (local.get $$132)
              )
             )
             (local.set $$134
              (i32.eq
               (local.get $$133)
               (i32.const 0)
              )
             )
             (if
              (local.get $$134)
              (br $while-out)
              (local.set $$136
               (local.get $$133)
              )
             )
            )
            (local.set $$136
             (local.get $$130)
            )
           )
           (local.set $$135
            (i32.add
             (local.get $$136)
             (i32.const 4)
            )
           )
           (local.set $$137
            (i32.load
             (local.get $$135)
            )
           )
           (local.set $$138
            (i32.and
             (local.get $$137)
             (i32.const -8)
            )
           )
           (local.set $$139
            (i32.sub
             (local.get $$138)
             (local.get $$6)
            )
           )
           (local.set $$140
            (i32.lt_u
             (local.get $$139)
             (local.get $$$0171$i)
            )
           )
           (local.set $$spec$select$i
            (if (result i32)
             (local.get $$140)
             (local.get $$139)
             (local.get $$$0171$i)
            )
           )
           (local.set $$spec$select1$i
            (if (result i32)
             (local.get $$140)
             (local.get $$136)
             (local.get $$$0170$i)
            )
           )
           (local.set $$$0169$i
            (local.get $$136)
           )
           (local.set $$$0170$i
            (local.get $$spec$select1$i)
           )
           (local.set $$$0171$i
            (local.get $$spec$select$i)
           )
           (br $while-in)
          )
         )
         (local.set $$141
          (i32.add
           (local.get $$$0170$i)
           (local.get $$6)
          )
         )
         (local.set $$142
          (i32.gt_u
           (local.get $$141)
           (local.get $$$0170$i)
          )
         )
         (if
          (local.get $$142)
          (block
           (local.set $$143
            (i32.add
             (local.get $$$0170$i)
             (i32.const 24)
            )
           )
           (local.set $$144
            (i32.load
             (local.get $$143)
            )
           )
           (local.set $$145
            (i32.add
             (local.get $$$0170$i)
             (i32.const 12)
            )
           )
           (local.set $$146
            (i32.load
             (local.get $$145)
            )
           )
           (local.set $$147
            (i32.eq
             (local.get $$146)
             (local.get $$$0170$i)
            )
           )
           (block $do-once0
            (if
             (local.get $$147)
             (block
              (local.set $$152
               (i32.add
                (local.get $$$0170$i)
                (i32.const 20)
               )
              )
              (local.set $$153
               (i32.load
                (local.get $$152)
               )
              )
              (local.set $$154
               (i32.eq
                (local.get $$153)
                (i32.const 0)
               )
              )
              (if
               (local.get $$154)
               (block
                (local.set $$155
                 (i32.add
                  (local.get $$$0170$i)
                  (i32.const 16)
                 )
                )
                (local.set $$156
                 (i32.load
                  (local.get $$155)
                 )
                )
                (local.set $$157
                 (i32.eq
                  (local.get $$156)
                  (i32.const 0)
                 )
                )
                (if
                 (local.get $$157)
                 (block
                  (local.set $$$3$i
                   (i32.const 0)
                  )
                  (br $do-once0)
                 )
                 (block
                  (local.set $$$1174$i$ph
                   (local.get $$156)
                  )
                  (local.set $$$1176$i$ph
                   (local.get $$155)
                  )
                 )
                )
               )
               (block
                (local.set $$$1174$i$ph
                 (local.get $$153)
                )
                (local.set $$$1176$i$ph
                 (local.get $$152)
                )
               )
              )
              (local.set $$$1174$i
               (local.get $$$1174$i$ph)
              )
              (local.set $$$1176$i
               (local.get $$$1176$i$ph)
              )
              (loop $while-in3
               (block $while-out2
                (local.set $$158
                 (i32.add
                  (local.get $$$1174$i)
                  (i32.const 20)
                 )
                )
                (local.set $$159
                 (i32.load
                  (local.get $$158)
                 )
                )
                (local.set $$160
                 (i32.eq
                  (local.get $$159)
                  (i32.const 0)
                 )
                )
                (if
                 (local.get $$160)
                 (block
                  (local.set $$161
                   (i32.add
                    (local.get $$$1174$i)
                    (i32.const 16)
                   )
                  )
                  (local.set $$162
                   (i32.load
                    (local.get $$161)
                   )
                  )
                  (local.set $$163
                   (i32.eq
                    (local.get $$162)
                    (i32.const 0)
                   )
                  )
                  (if
                   (local.get $$163)
                   (br $while-out2)
                   (block
                    (local.set $$$1174$i$be
                     (local.get $$162)
                    )
                    (local.set $$$1176$i$be
                     (local.get $$161)
                    )
                   )
                  )
                 )
                 (block
                  (local.set $$$1174$i$be
                   (local.get $$159)
                  )
                  (local.set $$$1176$i$be
                   (local.get $$158)
                  )
                 )
                )
                (local.set $$$1174$i
                 (local.get $$$1174$i$be)
                )
                (local.set $$$1176$i
                 (local.get $$$1176$i$be)
                )
                (br $while-in3)
               )
              )
              (i32.store
               (local.get $$$1176$i)
               (i32.const 0)
              )
              (local.set $$$3$i
               (local.get $$$1174$i)
              )
             )
             (block
              (local.set $$148
               (i32.add
                (local.get $$$0170$i)
                (i32.const 8)
               )
              )
              (local.set $$149
               (i32.load
                (local.get $$148)
               )
              )
              (local.set $$150
               (i32.add
                (local.get $$149)
                (i32.const 12)
               )
              )
              (i32.store
               (local.get $$150)
               (local.get $$146)
              )
              (local.set $$151
               (i32.add
                (local.get $$146)
                (i32.const 8)
               )
              )
              (i32.store
               (local.get $$151)
               (local.get $$149)
              )
              (local.set $$$3$i
               (local.get $$146)
              )
             )
            )
           )
           (local.set $$164
            (i32.eq
             (local.get $$144)
             (i32.const 0)
            )
           )
           (block $do-once4
            (if
             (i32.eqz
              (local.get $$164)
             )
             (block
              (local.set $$165
               (i32.add
                (local.get $$$0170$i)
                (i32.const 28)
               )
              )
              (local.set $$166
               (i32.load
                (local.get $$165)
               )
              )
              (local.set $$167
               (i32.add
                (i32.const 2896)
                (i32.shl
                 (local.get $$166)
                 (i32.const 2)
                )
               )
              )
              (local.set $$168
               (i32.load
                (local.get $$167)
               )
              )
              (local.set $$169
               (i32.eq
                (local.get $$$0170$i)
                (local.get $$168)
               )
              )
              (if
               (local.get $$169)
               (block
                (i32.store
                 (local.get $$167)
                 (local.get $$$3$i)
                )
                (local.set $$cond$i
                 (i32.eq
                  (local.get $$$3$i)
                  (i32.const 0)
                 )
                )
                (if
                 (local.get $$cond$i)
                 (block
                  (local.set $$170
                   (i32.shl
                    (i32.const 1)
                    (local.get $$166)
                   )
                  )
                  (local.set $$171
                   (i32.xor
                    (local.get $$170)
                    (i32.const -1)
                   )
                  )
                  (local.set $$172
                   (i32.and
                    (local.get $$98)
                    (local.get $$171)
                   )
                  )
                  (i32.store
                   (i32.const 2596)
                   (local.get $$172)
                  )
                  (br $do-once4)
                 )
                )
               )
               (block
                (local.set $$173
                 (i32.add
                  (local.get $$144)
                  (i32.const 16)
                 )
                )
                (local.set $$174
                 (i32.load
                  (local.get $$173)
                 )
                )
                (local.set $$175
                 (i32.eq
                  (local.get $$174)
                  (local.get $$$0170$i)
                 )
                )
                (local.set $$176
                 (i32.add
                  (local.get $$144)
                  (i32.const 20)
                 )
                )
                (local.set $$$sink
                 (if (result i32)
                  (local.get $$175)
                  (local.get $$173)
                  (local.get $$176)
                 )
                )
                (i32.store
                 (local.get $$$sink)
                 (local.get $$$3$i)
                )
                (local.set $$177
                 (i32.eq
                  (local.get $$$3$i)
                  (i32.const 0)
                 )
                )
                (if
                 (local.get $$177)
                 (br $do-once4)
                )
               )
              )
              (local.set $$178
               (i32.add
                (local.get $$$3$i)
                (i32.const 24)
               )
              )
              (i32.store
               (local.get $$178)
               (local.get $$144)
              )
              (local.set $$179
               (i32.add
                (local.get $$$0170$i)
                (i32.const 16)
               )
              )
              (local.set $$180
               (i32.load
                (local.get $$179)
               )
              )
              (local.set $$181
               (i32.eq
                (local.get $$180)
                (i32.const 0)
               )
              )
              (if
               (i32.eqz
                (local.get $$181)
               )
               (block
                (local.set $$182
                 (i32.add
                  (local.get $$$3$i)
                  (i32.const 16)
                 )
                )
                (i32.store
                 (local.get $$182)
                 (local.get $$180)
                )
                (local.set $$183
                 (i32.add
                  (local.get $$180)
                  (i32.const 24)
                 )
                )
                (i32.store
                 (local.get $$183)
                 (local.get $$$3$i)
                )
               )
              )
              (local.set $$184
               (i32.add
                (local.get $$$0170$i)
                (i32.const 20)
               )
              )
              (local.set $$185
               (i32.load
                (local.get $$184)
               )
              )
              (local.set $$186
               (i32.eq
                (local.get $$185)
                (i32.const 0)
               )
              )
              (if
               (i32.eqz
                (local.get $$186)
               )
               (block
                (local.set $$187
                 (i32.add
                  (local.get $$$3$i)
                  (i32.const 20)
                 )
                )
                (i32.store
                 (local.get $$187)
                 (local.get $$185)
                )
                (local.set $$188
                 (i32.add
                  (local.get $$185)
                  (i32.const 24)
                 )
                )
                (i32.store
                 (local.get $$188)
                 (local.get $$$3$i)
                )
               )
              )
             )
            )
           )
           (local.set $$189
            (i32.lt_u
             (local.get $$$0171$i)
             (i32.const 16)
            )
           )
           (if
            (local.get $$189)
            (block
             (local.set $$190
              (i32.add
               (local.get $$$0171$i)
               (local.get $$6)
              )
             )
             (local.set $$191
              (i32.or
               (local.get $$190)
               (i32.const 3)
              )
             )
             (local.set $$192
              (i32.add
               (local.get $$$0170$i)
               (i32.const 4)
              )
             )
             (i32.store
              (local.get $$192)
              (local.get $$191)
             )
             (local.set $$193
              (i32.add
               (local.get $$$0170$i)
               (local.get $$190)
              )
             )
             (local.set $$194
              (i32.add
               (local.get $$193)
               (i32.const 4)
              )
             )
             (local.set $$195
              (i32.load
               (local.get $$194)
              )
             )
             (local.set $$196
              (i32.or
               (local.get $$195)
               (i32.const 1)
              )
             )
             (i32.store
              (local.get $$194)
              (local.get $$196)
             )
            )
            (block
             (local.set $$197
              (i32.or
               (local.get $$6)
               (i32.const 3)
              )
             )
             (local.set $$198
              (i32.add
               (local.get $$$0170$i)
               (i32.const 4)
              )
             )
             (i32.store
              (local.get $$198)
              (local.get $$197)
             )
             (local.set $$199
              (i32.or
               (local.get $$$0171$i)
               (i32.const 1)
              )
             )
             (local.set $$200
              (i32.add
               (local.get $$141)
               (i32.const 4)
              )
             )
             (i32.store
              (local.get $$200)
              (local.get $$199)
             )
             (local.set $$201
              (i32.add
               (local.get $$141)
               (local.get $$$0171$i)
              )
             )
             (i32.store
              (local.get $$201)
              (local.get $$$0171$i)
             )
             (local.set $$202
              (i32.eq
               (local.get $$33)
               (i32.const 0)
              )
             )
             (if
              (i32.eqz
               (local.get $$202)
              )
              (block
               (local.set $$203
                (i32.load
                 (i32.const 2612)
                )
               )
               (local.set $$204
                (i32.shr_u
                 (local.get $$33)
                 (i32.const 3)
                )
               )
               (local.set $$205
                (i32.shl
                 (local.get $$204)
                 (i32.const 1)
                )
               )
               (local.set $$206
                (i32.add
                 (i32.const 2632)
                 (i32.shl
                  (local.get $$205)
                  (i32.const 2)
                 )
                )
               )
               (local.set $$207
                (i32.shl
                 (i32.const 1)
                 (local.get $$204)
                )
               )
               (local.set $$208
                (i32.and
                 (local.get $$207)
                 (local.get $$8)
                )
               )
               (local.set $$209
                (i32.eq
                 (local.get $$208)
                 (i32.const 0)
                )
               )
               (if
                (local.get $$209)
                (block
                 (local.set $$210
                  (i32.or
                   (local.get $$207)
                   (local.get $$8)
                  )
                 )
                 (i32.store
                  (i32.const 2592)
                  (local.get $$210)
                 )
                 (local.set $$$pre$i
                  (i32.add
                   (local.get $$206)
                   (i32.const 8)
                  )
                 )
                 (local.set $$$0$i
                  (local.get $$206)
                 )
                 (local.set $$$pre$phi$iZ2D
                  (local.get $$$pre$i)
                 )
                )
                (block
                 (local.set $$211
                  (i32.add
                   (local.get $$206)
                   (i32.const 8)
                  )
                 )
                 (local.set $$212
                  (i32.load
                   (local.get $$211)
                  )
                 )
                 (local.set $$$0$i
                  (local.get $$212)
                 )
                 (local.set $$$pre$phi$iZ2D
                  (local.get $$211)
                 )
                )
               )
               (i32.store
                (local.get $$$pre$phi$iZ2D)
                (local.get $$203)
               )
               (local.set $$213
                (i32.add
                 (local.get $$$0$i)
                 (i32.const 12)
                )
               )
               (i32.store
                (local.get $$213)
                (local.get $$203)
               )
               (local.set $$214
                (i32.add
                 (local.get $$203)
                 (i32.const 8)
                )
               )
               (i32.store
                (local.get $$214)
                (local.get $$$0$i)
               )
               (local.set $$215
                (i32.add
                 (local.get $$203)
                 (i32.const 12)
                )
               )
               (i32.store
                (local.get $$215)
                (local.get $$206)
               )
              )
             )
             (i32.store
              (i32.const 2600)
              (local.get $$$0171$i)
             )
             (i32.store
              (i32.const 2612)
              (local.get $$141)
             )
            )
           )
           (local.set $$216
            (i32.add
             (local.get $$$0170$i)
             (i32.const 8)
            )
           )
           (local.set $$$0
            (local.get $$216)
           )
           (global.set $STACKTOP
            (local.get $sp)
           )
           (return
            (local.get $$$0)
           )
          )
          (local.set $$$0192
           (local.get $$6)
          )
         )
        )
       )
      )
      (local.set $$$0192
       (local.get $$6)
      )
     )
    )
    (block
     (local.set $$217
      (i32.gt_u
       (local.get $$0)
       (i32.const -65)
      )
     )
     (if
      (local.get $$217)
      (local.set $$$0192
       (i32.const -1)
      )
      (block
       (local.set $$218
        (i32.add
         (local.get $$0)
         (i32.const 11)
        )
       )
       (local.set $$219
        (i32.and
         (local.get $$218)
         (i32.const -8)
        )
       )
       (local.set $$220
        (i32.load
         (i32.const 2596)
        )
       )
       (local.set $$221
        (i32.eq
         (local.get $$220)
         (i32.const 0)
        )
       )
       (if
        (local.get $$221)
        (local.set $$$0192
         (local.get $$219)
        )
        (block
         (local.set $$222
          (i32.sub
           (i32.const 0)
           (local.get $$219)
          )
         )
         (local.set $$223
          (i32.shr_u
           (local.get $$218)
           (i32.const 8)
          )
         )
         (local.set $$224
          (i32.eq
           (local.get $$223)
           (i32.const 0)
          )
         )
         (if
          (local.get $$224)
          (local.set $$$0335$i
           (i32.const 0)
          )
          (block
           (local.set $$225
            (i32.gt_u
             (local.get $$219)
             (i32.const 16777215)
            )
           )
           (if
            (local.get $$225)
            (local.set $$$0335$i
             (i32.const 31)
            )
            (block
             (local.set $$226
              (i32.add
               (local.get $$223)
               (i32.const 1048320)
              )
             )
             (local.set $$227
              (i32.shr_u
               (local.get $$226)
               (i32.const 16)
              )
             )
             (local.set $$228
              (i32.and
               (local.get $$227)
               (i32.const 8)
              )
             )
             (local.set $$229
              (i32.shl
               (local.get $$223)
               (local.get $$228)
              )
             )
             (local.set $$230
              (i32.add
               (local.get $$229)
               (i32.const 520192)
              )
             )
             (local.set $$231
              (i32.shr_u
               (local.get $$230)
               (i32.const 16)
              )
             )
             (local.set $$232
              (i32.and
               (local.get $$231)
               (i32.const 4)
              )
             )
             (local.set $$233
              (i32.or
               (local.get $$232)
               (local.get $$228)
              )
             )
             (local.set $$234
              (i32.shl
               (local.get $$229)
               (local.get $$232)
              )
             )
             (local.set $$235
              (i32.add
               (local.get $$234)
               (i32.const 245760)
              )
             )
             (local.set $$236
              (i32.shr_u
               (local.get $$235)
               (i32.const 16)
              )
             )
             (local.set $$237
              (i32.and
               (local.get $$236)
               (i32.const 2)
              )
             )
             (local.set $$238
              (i32.or
               (local.get $$233)
               (local.get $$237)
              )
             )
             (local.set $$239
              (i32.sub
               (i32.const 14)
               (local.get $$238)
              )
             )
             (local.set $$240
              (i32.shl
               (local.get $$234)
               (local.get $$237)
              )
             )
             (local.set $$241
              (i32.shr_u
               (local.get $$240)
               (i32.const 15)
              )
             )
             (local.set $$242
              (i32.add
               (local.get $$239)
               (local.get $$241)
              )
             )
             (local.set $$243
              (i32.shl
               (local.get $$242)
               (i32.const 1)
              )
             )
             (local.set $$244
              (i32.add
               (local.get $$242)
               (i32.const 7)
              )
             )
             (local.set $$245
              (i32.shr_u
               (local.get $$219)
               (local.get $$244)
              )
             )
             (local.set $$246
              (i32.and
               (local.get $$245)
               (i32.const 1)
              )
             )
             (local.set $$247
              (i32.or
               (local.get $$246)
               (local.get $$243)
              )
             )
             (local.set $$$0335$i
              (local.get $$247)
             )
            )
           )
          )
         )
         (local.set $$248
          (i32.add
           (i32.const 2896)
           (i32.shl
            (local.get $$$0335$i)
            (i32.const 2)
           )
          )
         )
         (local.set $$249
          (i32.load
           (local.get $$248)
          )
         )
         (local.set $$250
          (i32.eq
           (local.get $$249)
           (i32.const 0)
          )
         )
         (block $label$break$L79
          (if
           (local.get $$250)
           (block
            (local.set $$$2331$i
             (i32.const 0)
            )
            (local.set $$$3$i198
             (i32.const 0)
            )
            (local.set $$$3326$i
             (local.get $$222)
            )
            (local.set $label
             (i32.const 61)
            )
           )
           (block
            (local.set $$251
             (i32.eq
              (local.get $$$0335$i)
              (i32.const 31)
             )
            )
            (local.set $$252
             (i32.shr_u
              (local.get $$$0335$i)
              (i32.const 1)
             )
            )
            (local.set $$253
             (i32.sub
              (i32.const 25)
              (local.get $$252)
             )
            )
            (local.set $$254
             (if (result i32)
              (local.get $$251)
              (i32.const 0)
              (local.get $$253)
             )
            )
            (local.set $$255
             (i32.shl
              (local.get $$219)
              (local.get $$254)
             )
            )
            (local.set $$$0318$i
             (i32.const 0)
            )
            (local.set $$$0323$i
             (local.get $$222)
            )
            (local.set $$$0329$i
             (local.get $$249)
            )
            (local.set $$$0336$i
             (local.get $$255)
            )
            (local.set $$$0339$i
             (i32.const 0)
            )
            (loop $while-in8
             (block $while-out7
              (local.set $$256
               (i32.add
                (local.get $$$0329$i)
                (i32.const 4)
               )
              )
              (local.set $$257
               (i32.load
                (local.get $$256)
               )
              )
              (local.set $$258
               (i32.and
                (local.get $$257)
                (i32.const -8)
               )
              )
              (local.set $$259
               (i32.sub
                (local.get $$258)
                (local.get $$219)
               )
              )
              (local.set $$260
               (i32.lt_u
                (local.get $$259)
                (local.get $$$0323$i)
               )
              )
              (if
               (local.get $$260)
               (block
                (local.set $$261
                 (i32.eq
                  (local.get $$259)
                  (i32.const 0)
                 )
                )
                (if
                 (local.get $$261)
                 (block
                  (local.set $$$415$i$ph
                   (local.get $$$0329$i)
                  )
                  (local.set $$$432714$i$ph
                   (i32.const 0)
                  )
                  (local.set $$$533413$i$ph
                   (local.get $$$0329$i)
                  )
                  (local.set $label
                   (i32.const 65)
                  )
                  (br $label$break$L79)
                 )
                 (block
                  (local.set $$$1319$i
                   (local.get $$$0329$i)
                  )
                  (local.set $$$1324$i
                   (local.get $$259)
                  )
                 )
                )
               )
               (block
                (local.set $$$1319$i
                 (local.get $$$0318$i)
                )
                (local.set $$$1324$i
                 (local.get $$$0323$i)
                )
               )
              )
              (local.set $$262
               (i32.add
                (local.get $$$0329$i)
                (i32.const 20)
               )
              )
              (local.set $$263
               (i32.load
                (local.get $$262)
               )
              )
              (local.set $$264
               (i32.shr_u
                (local.get $$$0336$i)
                (i32.const 31)
               )
              )
              (local.set $$265
               (i32.add
                (i32.add
                 (local.get $$$0329$i)
                 (i32.const 16)
                )
                (i32.shl
                 (local.get $$264)
                 (i32.const 2)
                )
               )
              )
              (local.set $$266
               (i32.load
                (local.get $$265)
               )
              )
              (local.set $$267
               (i32.eq
                (local.get $$263)
                (i32.const 0)
               )
              )
              (local.set $$268
               (i32.eq
                (local.get $$263)
                (local.get $$266)
               )
              )
              (local.set $$or$cond1$i197
               (i32.or
                (local.get $$267)
                (local.get $$268)
               )
              )
              (local.set $$$1340$i
               (if (result i32)
                (local.get $$or$cond1$i197)
                (local.get $$$0339$i)
                (local.get $$263)
               )
              )
              (local.set $$269
               (i32.eq
                (local.get $$266)
                (i32.const 0)
               )
              )
              (local.set $$spec$select4$i
               (i32.shl
                (local.get $$$0336$i)
                (i32.const 1)
               )
              )
              (if
               (local.get $$269)
               (block
                (local.set $$$2331$i
                 (local.get $$$1340$i)
                )
                (local.set $$$3$i198
                 (local.get $$$1319$i)
                )
                (local.set $$$3326$i
                 (local.get $$$1324$i)
                )
                (local.set $label
                 (i32.const 61)
                )
                (br $while-out7)
               )
               (block
                (local.set $$$0318$i
                 (local.get $$$1319$i)
                )
                (local.set $$$0323$i
                 (local.get $$$1324$i)
                )
                (local.set $$$0329$i
                 (local.get $$266)
                )
                (local.set $$$0336$i
                 (local.get $$spec$select4$i)
                )
                (local.set $$$0339$i
                 (local.get $$$1340$i)
                )
               )
              )
              (br $while-in8)
             )
            )
           )
          )
         )
         (if
          (i32.eq
           (local.get $label)
           (i32.const 61)
          )
          (block
           (local.set $$270
            (i32.eq
             (local.get $$$2331$i)
             (i32.const 0)
            )
           )
           (local.set $$271
            (i32.eq
             (local.get $$$3$i198)
             (i32.const 0)
            )
           )
           (local.set $$or$cond$i199
            (i32.and
             (local.get $$270)
             (local.get $$271)
            )
           )
           (if
            (local.get $$or$cond$i199)
            (block
             (local.set $$272
              (i32.shl
               (i32.const 2)
               (local.get $$$0335$i)
              )
             )
             (local.set $$273
              (i32.sub
               (i32.const 0)
               (local.get $$272)
              )
             )
             (local.set $$274
              (i32.or
               (local.get $$272)
               (local.get $$273)
              )
             )
             (local.set $$275
              (i32.and
               (local.get $$274)
               (local.get $$220)
              )
             )
             (local.set $$276
              (i32.eq
               (local.get $$275)
               (i32.const 0)
              )
             )
             (if
              (local.get $$276)
              (block
               (local.set $$$0192
                (local.get $$219)
               )
               (br $do-once)
              )
             )
             (local.set $$277
              (i32.sub
               (i32.const 0)
               (local.get $$275)
              )
             )
             (local.set $$278
              (i32.and
               (local.get $$275)
               (local.get $$277)
              )
             )
             (local.set $$279
              (i32.add
               (local.get $$278)
               (i32.const -1)
              )
             )
             (local.set $$280
              (i32.shr_u
               (local.get $$279)
               (i32.const 12)
              )
             )
             (local.set $$281
              (i32.and
               (local.get $$280)
               (i32.const 16)
              )
             )
             (local.set $$282
              (i32.shr_u
               (local.get $$279)
               (local.get $$281)
              )
             )
             (local.set $$283
              (i32.shr_u
               (local.get $$282)
               (i32.const 5)
              )
             )
             (local.set $$284
              (i32.and
               (local.get $$283)
               (i32.const 8)
              )
             )
             (local.set $$285
              (i32.or
               (local.get $$284)
               (local.get $$281)
              )
             )
             (local.set $$286
              (i32.shr_u
               (local.get $$282)
               (local.get $$284)
              )
             )
             (local.set $$287
              (i32.shr_u
               (local.get $$286)
               (i32.const 2)
              )
             )
             (local.set $$288
              (i32.and
               (local.get $$287)
               (i32.const 4)
              )
             )
             (local.set $$289
              (i32.or
               (local.get $$285)
               (local.get $$288)
              )
             )
             (local.set $$290
              (i32.shr_u
               (local.get $$286)
               (local.get $$288)
              )
             )
             (local.set $$291
              (i32.shr_u
               (local.get $$290)
               (i32.const 1)
              )
             )
             (local.set $$292
              (i32.and
               (local.get $$291)
               (i32.const 2)
              )
             )
             (local.set $$293
              (i32.or
               (local.get $$289)
               (local.get $$292)
              )
             )
             (local.set $$294
              (i32.shr_u
               (local.get $$290)
               (local.get $$292)
              )
             )
             (local.set $$295
              (i32.shr_u
               (local.get $$294)
               (i32.const 1)
              )
             )
             (local.set $$296
              (i32.and
               (local.get $$295)
               (i32.const 1)
              )
             )
             (local.set $$297
              (i32.or
               (local.get $$293)
               (local.get $$296)
              )
             )
             (local.set $$298
              (i32.shr_u
               (local.get $$294)
               (local.get $$296)
              )
             )
             (local.set $$299
              (i32.add
               (local.get $$297)
               (local.get $$298)
              )
             )
             (local.set $$300
              (i32.add
               (i32.const 2896)
               (i32.shl
                (local.get $$299)
                (i32.const 2)
               )
              )
             )
             (local.set $$301
              (i32.load
               (local.get $$300)
              )
             )
             (local.set $$$3$i198211
              (i32.const 0)
             )
             (local.set $$$4333$i
              (local.get $$301)
             )
            )
            (block
             (local.set $$$3$i198211
              (local.get $$$3$i198)
             )
             (local.set $$$4333$i
              (local.get $$$2331$i)
             )
            )
           )
           (local.set $$302
            (i32.eq
             (local.get $$$4333$i)
             (i32.const 0)
            )
           )
           (if
            (local.get $$302)
            (block
             (local.set $$$4$lcssa$i
              (local.get $$$3$i198211)
             )
             (local.set $$$4327$lcssa$i
              (local.get $$$3326$i)
             )
            )
            (block
             (local.set $$$415$i$ph
              (local.get $$$3$i198211)
             )
             (local.set $$$432714$i$ph
              (local.get $$$3326$i)
             )
             (local.set $$$533413$i$ph
              (local.get $$$4333$i)
             )
             (local.set $label
              (i32.const 65)
             )
            )
           )
          )
         )
         (if
          (i32.eq
           (local.get $label)
           (i32.const 65)
          )
          (block
           (local.set $$$415$i
            (local.get $$$415$i$ph)
           )
           (local.set $$$432714$i
            (local.get $$$432714$i$ph)
           )
           (local.set $$$533413$i
            (local.get $$$533413$i$ph)
           )
           (loop $while-in10
            (block $while-out9
             (local.set $$303
              (i32.add
               (local.get $$$533413$i)
               (i32.const 4)
              )
             )
             (local.set $$304
              (i32.load
               (local.get $$303)
              )
             )
             (local.set $$305
              (i32.and
               (local.get $$304)
               (i32.const -8)
              )
             )
             (local.set $$306
              (i32.sub
               (local.get $$305)
               (local.get $$219)
              )
             )
             (local.set $$307
              (i32.lt_u
               (local.get $$306)
               (local.get $$$432714$i)
              )
             )
             (local.set $$spec$select$i201
              (if (result i32)
               (local.get $$307)
               (local.get $$306)
               (local.get $$$432714$i)
              )
             )
             (local.set $$spec$select2$i
              (if (result i32)
               (local.get $$307)
               (local.get $$$533413$i)
               (local.get $$$415$i)
              )
             )
             (local.set $$308
              (i32.add
               (local.get $$$533413$i)
               (i32.const 16)
              )
             )
             (local.set $$309
              (i32.load
               (local.get $$308)
              )
             )
             (local.set $$310
              (i32.eq
               (local.get $$309)
               (i32.const 0)
              )
             )
             (if
              (local.get $$310)
              (block
               (local.set $$311
                (i32.add
                 (local.get $$$533413$i)
                 (i32.const 20)
                )
               )
               (local.set $$312
                (i32.load
                 (local.get $$311)
                )
               )
               (local.set $$313
                (local.get $$312)
               )
              )
              (local.set $$313
               (local.get $$309)
              )
             )
             (local.set $$314
              (i32.eq
               (local.get $$313)
               (i32.const 0)
              )
             )
             (if
              (local.get $$314)
              (block
               (local.set $$$4$lcssa$i
                (local.get $$spec$select2$i)
               )
               (local.set $$$4327$lcssa$i
                (local.get $$spec$select$i201)
               )
               (br $while-out9)
              )
              (block
               (local.set $$$415$i
                (local.get $$spec$select2$i)
               )
               (local.set $$$432714$i
                (local.get $$spec$select$i201)
               )
               (local.set $$$533413$i
                (local.get $$313)
               )
              )
             )
             (br $while-in10)
            )
           )
          )
         )
         (local.set $$315
          (i32.eq
           (local.get $$$4$lcssa$i)
           (i32.const 0)
          )
         )
         (if
          (local.get $$315)
          (local.set $$$0192
           (local.get $$219)
          )
          (block
           (local.set $$316
            (i32.load
             (i32.const 2600)
            )
           )
           (local.set $$317
            (i32.sub
             (local.get $$316)
             (local.get $$219)
            )
           )
           (local.set $$318
            (i32.lt_u
             (local.get $$$4327$lcssa$i)
             (local.get $$317)
            )
           )
           (if
            (local.get $$318)
            (block
             (local.set $$319
              (i32.add
               (local.get $$$4$lcssa$i)
               (local.get $$219)
              )
             )
             (local.set $$320
              (i32.gt_u
               (local.get $$319)
               (local.get $$$4$lcssa$i)
              )
             )
             (if
              (local.get $$320)
              (block
               (local.set $$321
                (i32.add
                 (local.get $$$4$lcssa$i)
                 (i32.const 24)
                )
               )
               (local.set $$322
                (i32.load
                 (local.get $$321)
                )
               )
               (local.set $$323
                (i32.add
                 (local.get $$$4$lcssa$i)
                 (i32.const 12)
                )
               )
               (local.set $$324
                (i32.load
                 (local.get $$323)
                )
               )
               (local.set $$325
                (i32.eq
                 (local.get $$324)
                 (local.get $$$4$lcssa$i)
                )
               )
               (block $do-once11
                (if
                 (local.get $$325)
                 (block
                  (local.set $$330
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (i32.const 20)
                   )
                  )
                  (local.set $$331
                   (i32.load
                    (local.get $$330)
                   )
                  )
                  (local.set $$332
                   (i32.eq
                    (local.get $$331)
                    (i32.const 0)
                   )
                  )
                  (if
                   (local.get $$332)
                   (block
                    (local.set $$333
                     (i32.add
                      (local.get $$$4$lcssa$i)
                      (i32.const 16)
                     )
                    )
                    (local.set $$334
                     (i32.load
                      (local.get $$333)
                     )
                    )
                    (local.set $$335
                     (i32.eq
                      (local.get $$334)
                      (i32.const 0)
                     )
                    )
                    (if
                     (local.get $$335)
                     (block
                      (local.set $$$3348$i
                       (i32.const 0)
                      )
                      (br $do-once11)
                     )
                     (block
                      (local.set $$$1346$i$ph
                       (local.get $$334)
                      )
                      (local.set $$$1350$i$ph
                       (local.get $$333)
                      )
                     )
                    )
                   )
                   (block
                    (local.set $$$1346$i$ph
                     (local.get $$331)
                    )
                    (local.set $$$1350$i$ph
                     (local.get $$330)
                    )
                   )
                  )
                  (local.set $$$1346$i
                   (local.get $$$1346$i$ph)
                  )
                  (local.set $$$1350$i
                   (local.get $$$1350$i$ph)
                  )
                  (loop $while-in14
                   (block $while-out13
                    (local.set $$336
                     (i32.add
                      (local.get $$$1346$i)
                      (i32.const 20)
                     )
                    )
                    (local.set $$337
                     (i32.load
                      (local.get $$336)
                     )
                    )
                    (local.set $$338
                     (i32.eq
                      (local.get $$337)
                      (i32.const 0)
                     )
                    )
                    (if
                     (local.get $$338)
                     (block
                      (local.set $$339
                       (i32.add
                        (local.get $$$1346$i)
                        (i32.const 16)
                       )
                      )
                      (local.set $$340
                       (i32.load
                        (local.get $$339)
                       )
                      )
                      (local.set $$341
                       (i32.eq
                        (local.get $$340)
                        (i32.const 0)
                       )
                      )
                      (if
                       (local.get $$341)
                       (br $while-out13)
                       (block
                        (local.set $$$1346$i$be
                         (local.get $$340)
                        )
                        (local.set $$$1350$i$be
                         (local.get $$339)
                        )
                       )
                      )
                     )
                     (block
                      (local.set $$$1346$i$be
                       (local.get $$337)
                      )
                      (local.set $$$1350$i$be
                       (local.get $$336)
                      )
                     )
                    )
                    (local.set $$$1346$i
                     (local.get $$$1346$i$be)
                    )
                    (local.set $$$1350$i
                     (local.get $$$1350$i$be)
                    )
                    (br $while-in14)
                   )
                  )
                  (i32.store
                   (local.get $$$1350$i)
                   (i32.const 0)
                  )
                  (local.set $$$3348$i
                   (local.get $$$1346$i)
                  )
                 )
                 (block
                  (local.set $$326
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (i32.const 8)
                   )
                  )
                  (local.set $$327
                   (i32.load
                    (local.get $$326)
                   )
                  )
                  (local.set $$328
                   (i32.add
                    (local.get $$327)
                    (i32.const 12)
                   )
                  )
                  (i32.store
                   (local.get $$328)
                   (local.get $$324)
                  )
                  (local.set $$329
                   (i32.add
                    (local.get $$324)
                    (i32.const 8)
                   )
                  )
                  (i32.store
                   (local.get $$329)
                   (local.get $$327)
                  )
                  (local.set $$$3348$i
                   (local.get $$324)
                  )
                 )
                )
               )
               (local.set $$342
                (i32.eq
                 (local.get $$322)
                 (i32.const 0)
                )
               )
               (block $do-once15
                (if
                 (local.get $$342)
                 (local.set $$425
                  (local.get $$220)
                 )
                 (block
                  (local.set $$343
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (i32.const 28)
                   )
                  )
                  (local.set $$344
                   (i32.load
                    (local.get $$343)
                   )
                  )
                  (local.set $$345
                   (i32.add
                    (i32.const 2896)
                    (i32.shl
                     (local.get $$344)
                     (i32.const 2)
                    )
                   )
                  )
                  (local.set $$346
                   (i32.load
                    (local.get $$345)
                   )
                  )
                  (local.set $$347
                   (i32.eq
                    (local.get $$$4$lcssa$i)
                    (local.get $$346)
                   )
                  )
                  (if
                   (local.get $$347)
                   (block
                    (i32.store
                     (local.get $$345)
                     (local.get $$$3348$i)
                    )
                    (local.set $$cond$i203
                     (i32.eq
                      (local.get $$$3348$i)
                      (i32.const 0)
                     )
                    )
                    (if
                     (local.get $$cond$i203)
                     (block
                      (local.set $$348
                       (i32.shl
                        (i32.const 1)
                        (local.get $$344)
                       )
                      )
                      (local.set $$349
                       (i32.xor
                        (local.get $$348)
                        (i32.const -1)
                       )
                      )
                      (local.set $$350
                       (i32.and
                        (local.get $$220)
                        (local.get $$349)
                       )
                      )
                      (i32.store
                       (i32.const 2596)
                       (local.get $$350)
                      )
                      (local.set $$425
                       (local.get $$350)
                      )
                      (br $do-once15)
                     )
                    )
                   )
                   (block
                    (local.set $$351
                     (i32.add
                      (local.get $$322)
                      (i32.const 16)
                     )
                    )
                    (local.set $$352
                     (i32.load
                      (local.get $$351)
                     )
                    )
                    (local.set $$353
                     (i32.eq
                      (local.get $$352)
                      (local.get $$$4$lcssa$i)
                     )
                    )
                    (local.set $$354
                     (i32.add
                      (local.get $$322)
                      (i32.const 20)
                     )
                    )
                    (local.set $$$sink320
                     (if (result i32)
                      (local.get $$353)
                      (local.get $$351)
                      (local.get $$354)
                     )
                    )
                    (i32.store
                     (local.get $$$sink320)
                     (local.get $$$3348$i)
                    )
                    (local.set $$355
                     (i32.eq
                      (local.get $$$3348$i)
                      (i32.const 0)
                     )
                    )
                    (if
                     (local.get $$355)
                     (block
                      (local.set $$425
                       (local.get $$220)
                      )
                      (br $do-once15)
                     )
                    )
                   )
                  )
                  (local.set $$356
                   (i32.add
                    (local.get $$$3348$i)
                    (i32.const 24)
                   )
                  )
                  (i32.store
                   (local.get $$356)
                   (local.get $$322)
                  )
                  (local.set $$357
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (i32.const 16)
                   )
                  )
                  (local.set $$358
                   (i32.load
                    (local.get $$357)
                   )
                  )
                  (local.set $$359
                   (i32.eq
                    (local.get $$358)
                    (i32.const 0)
                   )
                  )
                  (if
                   (i32.eqz
                    (local.get $$359)
                   )
                   (block
                    (local.set $$360
                     (i32.add
                      (local.get $$$3348$i)
                      (i32.const 16)
                     )
                    )
                    (i32.store
                     (local.get $$360)
                     (local.get $$358)
                    )
                    (local.set $$361
                     (i32.add
                      (local.get $$358)
                      (i32.const 24)
                     )
                    )
                    (i32.store
                     (local.get $$361)
                     (local.get $$$3348$i)
                    )
                   )
                  )
                  (local.set $$362
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (i32.const 20)
                   )
                  )
                  (local.set $$363
                   (i32.load
                    (local.get $$362)
                   )
                  )
                  (local.set $$364
                   (i32.eq
                    (local.get $$363)
                    (i32.const 0)
                   )
                  )
                  (if
                   (local.get $$364)
                   (local.set $$425
                    (local.get $$220)
                   )
                   (block
                    (local.set $$365
                     (i32.add
                      (local.get $$$3348$i)
                      (i32.const 20)
                     )
                    )
                    (i32.store
                     (local.get $$365)
                     (local.get $$363)
                    )
                    (local.set $$366
                     (i32.add
                      (local.get $$363)
                      (i32.const 24)
                     )
                    )
                    (i32.store
                     (local.get $$366)
                     (local.get $$$3348$i)
                    )
                    (local.set $$425
                     (local.get $$220)
                    )
                   )
                  )
                 )
                )
               )
               (local.set $$367
                (i32.lt_u
                 (local.get $$$4327$lcssa$i)
                 (i32.const 16)
                )
               )
               (block $label$break$L128
                (if
                 (local.get $$367)
                 (block
                  (local.set $$368
                   (i32.add
                    (local.get $$$4327$lcssa$i)
                    (local.get $$219)
                   )
                  )
                  (local.set $$369
                   (i32.or
                    (local.get $$368)
                    (i32.const 3)
                   )
                  )
                  (local.set $$370
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (i32.const 4)
                   )
                  )
                  (i32.store
                   (local.get $$370)
                   (local.get $$369)
                  )
                  (local.set $$371
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (local.get $$368)
                   )
                  )
                  (local.set $$372
                   (i32.add
                    (local.get $$371)
                    (i32.const 4)
                   )
                  )
                  (local.set $$373
                   (i32.load
                    (local.get $$372)
                   )
                  )
                  (local.set $$374
                   (i32.or
                    (local.get $$373)
                    (i32.const 1)
                   )
                  )
                  (i32.store
                   (local.get $$372)
                   (local.get $$374)
                  )
                 )
                 (block
                  (local.set $$375
                   (i32.or
                    (local.get $$219)
                    (i32.const 3)
                   )
                  )
                  (local.set $$376
                   (i32.add
                    (local.get $$$4$lcssa$i)
                    (i32.const 4)
                   )
                  )
                  (i32.store
                   (local.get $$376)
                   (local.get $$375)
                  )
                  (local.set $$377
                   (i32.or
                    (local.get $$$4327$lcssa$i)
                    (i32.const 1)
                   )
                  )
                  (local.set $$378
                   (i32.add
                    (local.get $$319)
                    (i32.const 4)
                   )
                  )
                  (i32.store
                   (local.get $$378)
                   (local.get $$377)
                  )
                  (local.set $$379
                   (i32.add
                    (local.get $$319)
                    (local.get $$$4327$lcssa$i)
                   )
                  )
                  (i32.store
                   (local.get $$379)
                   (local.get $$$4327$lcssa$i)
                  )
                  (local.set $$380
                   (i32.shr_u
                    (local.get $$$4327$lcssa$i)
                    (i32.const 3)
                   )
                  )
                  (local.set $$381
                   (i32.lt_u
                    (local.get $$$4327$lcssa$i)
                    (i32.const 256)
                   )
                  )
                  (if
                   (local.get $$381)
                   (block
                    (local.set $$382
                     (i32.shl
                      (local.get $$380)
                      (i32.const 1)
                     )
                    )
                    (local.set $$383
                     (i32.add
                      (i32.const 2632)
                      (i32.shl
                       (local.get $$382)
                       (i32.const 2)
                      )
                     )
                    )
                    (local.set $$384
                     (i32.load
                      (i32.const 2592)
                     )
                    )
                    (local.set $$385
                     (i32.shl
                      (i32.const 1)
                      (local.get $$380)
                     )
                    )
                    (local.set $$386
                     (i32.and
                      (local.get $$384)
                      (local.get $$385)
                     )
                    )
                    (local.set $$387
                     (i32.eq
                      (local.get $$386)
                      (i32.const 0)
                     )
                    )
                    (if
                     (local.get $$387)
                     (block
                      (local.set $$388
                       (i32.or
                        (local.get $$384)
                        (local.get $$385)
                       )
                      )
                      (i32.store
                       (i32.const 2592)
                       (local.get $$388)
                      )
                      (local.set $$$pre$i204
                       (i32.add
                        (local.get $$383)
                        (i32.const 8)
                       )
                      )
                      (local.set $$$0344$i
                       (local.get $$383)
                      )
                      (local.set $$$pre$phi$i205Z2D
                       (local.get $$$pre$i204)
                      )
                     )
                     (block
                      (local.set $$389
                       (i32.add
                        (local.get $$383)
                        (i32.const 8)
                       )
                      )
                      (local.set $$390
                       (i32.load
                        (local.get $$389)
                       )
                      )
                      (local.set $$$0344$i
                       (local.get $$390)
                      )
                      (local.set $$$pre$phi$i205Z2D
                       (local.get $$389)
                      )
                     )
                    )
                    (i32.store
                     (local.get $$$pre$phi$i205Z2D)
                     (local.get $$319)
                    )
                    (local.set $$391
                     (i32.add
                      (local.get $$$0344$i)
                      (i32.const 12)
                     )
                    )
                    (i32.store
                     (local.get $$391)
                     (local.get $$319)
                    )
                    (local.set $$392
                     (i32.add
                      (local.get $$319)
                      (i32.const 8)
                     )
                    )
                    (i32.store
                     (local.get $$392)
                     (local.get $$$0344$i)
                    )
                    (local.set $$393
                     (i32.add
                      (local.get $$319)
                      (i32.const 12)
                     )
                    )
                    (i32.store
                     (local.get $$393)
                     (local.get $$383)
                    )
                    (br $label$break$L128)
                   )
                  )
                  (local.set $$394
                   (i32.shr_u
                    (local.get $$$4327$lcssa$i)
                    (i32.const 8)
                   )
                  )
                  (local.set $$395
                   (i32.eq
                    (local.get $$394)
                    (i32.const 0)
                   )
                  )
                  (if
                   (local.get $$395)
                   (local.set $$$0338$i
                    (i32.const 0)
                   )
                   (block
                    (local.set $$396
                     (i32.gt_u
                      (local.get $$$4327$lcssa$i)
                      (i32.const 16777215)
                     )
                    )
                    (if
                     (local.get $$396)
                     (local.set $$$0338$i
                      (i32.const 31)
                     )
                     (block
                      (local.set $$397
                       (i32.add
                        (local.get $$394)
                        (i32.const 1048320)
                       )
                      )
                      (local.set $$398
                       (i32.shr_u
                        (local.get $$397)
                        (i32.const 16)
                       )
                      )
                      (local.set $$399
                       (i32.and
                        (local.get $$398)
                        (i32.const 8)
                       )
                      )
                      (local.set $$400
                       (i32.shl
                        (local.get $$394)
                        (local.get $$399)
                       )
                      )
                      (local.set $$401
                       (i32.add
                        (local.get $$400)
                        (i32.const 520192)
                       )
                      )
                      (local.set $$402
                       (i32.shr_u
                        (local.get $$401)
                        (i32.const 16)
                       )
                      )
                      (local.set $$403
                       (i32.and
                        (local.get $$402)
                        (i32.const 4)
                       )
                      )
                      (local.set $$404
                       (i32.or
                        (local.get $$403)
                        (local.get $$399)
                       )
                      )
                      (local.set $$405
                       (i32.shl
                        (local.get $$400)
                        (local.get $$403)
                       )
                      )
                      (local.set $$406
                       (i32.add
                        (local.get $$405)
                        (i32.const 245760)
                       )
                      )
                      (local.set $$407
                       (i32.shr_u
                        (local.get $$406)
                        (i32.const 16)
                       )
                      )
                      (local.set $$408
                       (i32.and
                        (local.get $$407)
                        (i32.const 2)
                       )
                      )
                      (local.set $$409
                       (i32.or
                        (local.get $$404)
                        (local.get $$408)
                       )
                      )
                      (local.set $$410
                       (i32.sub
                        (i32.const 14)
                        (local.get $$409)
                       )
                      )
                      (local.set $$411
                       (i32.shl
                        (local.get $$405)
                        (local.get $$408)
                       )
                      )
                      (local.set $$412
                       (i32.shr_u
                        (local.get $$411)
                        (i32.const 15)
                       )
                      )
                      (local.set $$413
                       (i32.add
                        (local.get $$410)
                        (local.get $$412)
                       )
                      )
                      (local.set $$414
                       (i32.shl
                        (local.get $$413)
                        (i32.const 1)
                       )
                      )
                      (local.set $$415
                       (i32.add
                        (local.get $$413)
                        (i32.const 7)
                       )
                      )
                      (local.set $$416
                       (i32.shr_u
                        (local.get $$$4327$lcssa$i)
                        (local.get $$415)
                       )
                      )
                      (local.set $$417
                       (i32.and
                        (local.get $$416)
                        (i32.const 1)
                       )
                      )
                      (local.set $$418
                       (i32.or
                        (local.get $$417)
                        (local.get $$414)
                       )
                      )
                      (local.set $$$0338$i
                       (local.get $$418)
                      )
                     )
                    )
                   )
                  )
                  (local.set $$419
                   (i32.add
                    (i32.const 2896)
                    (i32.shl
                     (local.get $$$0338$i)
                     (i32.const 2)
                    )
                   )
                  )
                  (local.set $$420
                   (i32.add
                    (local.get $$319)
                    (i32.const 28)
                   )
                  )
                  (i32.store
                   (local.get $$420)
                   (local.get $$$0338$i)
                  )
                  (local.set $$421
                   (i32.add
                    (local.get $$319)
                    (i32.const 16)
                   )
                  )
                  (local.set $$422
                   (i32.add
                    (local.get $$421)
                    (i32.const 4)
                   )
                  )
                  (i32.store
                   (local.get $$422)
                   (i32.const 0)
                  )
                  (i32.store
                   (local.get $$421)
                   (i32.const 0)
                  )
                  (local.set $$423
                   (i32.shl
                    (i32.const 1)
                    (local.get $$$0338$i)
                   )
                  )
                  (local.set $$424
                   (i32.and
                    (local.get $$425)
                    (local.get $$423)
                   )
                  )
                  (local.set $$426
                   (i32.eq
                    (local.get $$424)
                    (i32.const 0)
                   )
                  )
                  (if
                   (local.get $$426)
                   (block
                    (local.set $$427
                     (i32.or
                      (local.get $$425)
                      (local.get $$423)
                     )
                    )
                    (i32.store
                     (i32.const 2596)
                     (local.get $$427)
                    )
                    (i32.store
                     (local.get $$419)
                     (local.get $$319)
                    )
                    (local.set $$428
                     (i32.add
                      (local.get $$319)
                      (i32.const 24)
                     )
                    )
                    (i32.store
                     (local.get $$428)
                     (local.get $$419)
                    )
                    (local.set $$429
                     (i32.add
                      (local.get $$319)
                      (i32.const 12)
                     )
                    )
                    (i32.store
                     (local.get $$429)
                     (local.get $$319)
                    )
                    (local.set $$430
                     (i32.add
                      (local.get $$319)
                      (i32.const 8)
                     )
                    )
                    (i32.store
                     (local.get $$430)
                     (local.get $$319)
                    )
                    (br $label$break$L128)
                   )
                  )
                  (local.set $$431
                   (i32.load
                    (local.get $$419)
                   )
                  )
                  (local.set $$432
                   (i32.add
                    (local.get $$431)
                    (i32.const 4)
                   )
                  )
                  (local.set $$433
                   (i32.load
                    (local.get $$432)
                   )
                  )
                  (local.set $$434
                   (i32.and
                    (local.get $$433)
                    (i32.const -8)
                   )
                  )
                  (local.set $$435
                   (i32.eq
                    (local.get $$434)
                    (local.get $$$4327$lcssa$i)
                   )
                  )
                  (block $label$break$L145
                   (if
                    (local.get $$435)
                    (local.set $$$0321$lcssa$i
                     (local.get $$431)
                    )
                    (block
                     (local.set $$436
                      (i32.eq
                       (local.get $$$0338$i)
                       (i32.const 31)
                      )
                     )
                     (local.set $$437
                      (i32.shr_u
                       (local.get $$$0338$i)
                       (i32.const 1)
                      )
                     )
                     (local.set $$438
                      (i32.sub
                       (i32.const 25)
                       (local.get $$437)
                      )
                     )
                     (local.set $$439
                      (if (result i32)
                       (local.get $$436)
                       (i32.const 0)
                       (local.get $$438)
                      )
                     )
                     (local.set $$440
                      (i32.shl
                       (local.get $$$4327$lcssa$i)
                       (local.get $$439)
                      )
                     )
                     (local.set $$$032012$i
                      (local.get $$440)
                     )
                     (local.set $$$032111$i
                      (local.get $$431)
                     )
                     (loop $while-in20
                      (block $while-out19
                       (local.set $$447
                        (i32.shr_u
                         (local.get $$$032012$i)
                         (i32.const 31)
                        )
                       )
                       (local.set $$448
                        (i32.add
                         (i32.add
                          (local.get $$$032111$i)
                          (i32.const 16)
                         )
                         (i32.shl
                          (local.get $$447)
                          (i32.const 2)
                         )
                        )
                       )
                       (local.set $$443
                        (i32.load
                         (local.get $$448)
                        )
                       )
                       (local.set $$449
                        (i32.eq
                         (local.get $$443)
                         (i32.const 0)
                        )
                       )
                       (if
                        (local.get $$449)
                        (br $while-out19)
                       )
                       (local.set $$441
                        (i32.shl
                         (local.get $$$032012$i)
                         (i32.const 1)
                        )
                       )
                       (local.set $$442
                        (i32.add
                         (local.get $$443)
                         (i32.const 4)
                        )
                       )
                       (local.set $$444
                        (i32.load
                         (local.get $$442)
                        )
                       )
                       (local.set $$445
                        (i32.and
                         (local.get $$444)
                         (i32.const -8)
                        )
                       )
                       (local.set $$446
                        (i32.eq
                         (local.get $$445)
                         (local.get $$$4327$lcssa$i)
                        )
                       )
                       (if
                        (local.get $$446)
                        (block
                         (local.set $$$0321$lcssa$i
                          (local.get $$443)
                         )
                         (br $label$break$L145)
                        )
                        (block
                         (local.set $$$032012$i
                          (local.get $$441)
                         )
                         (local.set $$$032111$i
                          (local.get $$443)
                         )
                        )
                       )
                       (br $while-in20)
                      )
                     )
                     (i32.store
                      (local.get $$448)
                      (local.get $$319)
                     )
                     (local.set $$450
                      (i32.add
                       (local.get $$319)
                       (i32.const 24)
                      )
                     )
                     (i32.store
                      (local.get $$450)
                      (local.get $$$032111$i)
                     )
                     (local.set $$451
                      (i32.add
                       (local.get $$319)
                       (i32.const 12)
                      )
                     )
                     (i32.store
                      (local.get $$451)
                      (local.get $$319)
                     )
                     (local.set $$452
                      (i32.add
                       (local.get $$319)
                       (i32.const 8)
                      )
                     )
                     (i32.store
                      (local.get $$452)
                      (local.get $$319)
                     )
                     (br $label$break$L128)
                    )
                   )
                  )
                  (local.set $$453
                   (i32.add
                    (local.get $$$0321$lcssa$i)
                    (i32.const 8)
                   )
                  )
                  (local.set $$454
                   (i32.load
                    (local.get $$453)
                   )
                  )
                  (local.set $$455
                   (i32.add
                    (local.get $$454)
                    (i32.const 12)
                   )
                  )
                  (i32.store
                   (local.get $$455)
                   (local.get $$319)
                  )
                  (i32.store
                   (local.get $$453)
                   (local.get $$319)
                  )
                  (local.set $$456
                   (i32.add
                    (local.get $$319)
                    (i32.const 8)
                   )
                  )
                  (i32.store
                   (local.get $$456)
                   (local.get $$454)
                  )
                  (local.set $$457
                   (i32.add
                    (local.get $$319)
                    (i32.const 12)
                   )
                  )
                  (i32.store
                   (local.get $$457)
                   (local.get $$$0321$lcssa$i)
                  )
                  (local.set $$458
                   (i32.add
                    (local.get $$319)
                    (i32.const 24)
                   )
                  )
                  (i32.store
                   (local.get $$458)
                   (i32.const 0)
                  )
                 )
                )
               )
               (local.set $$459
                (i32.add
                 (local.get $$$4$lcssa$i)
                 (i32.const 8)
                )
               )
               (local.set $$$0
                (local.get $$459)
               )
               (global.set $STACKTOP
                (local.get $sp)
               )
               (return
                (local.get $$$0)
               )
              )
              (local.set $$$0192
               (local.get $$219)
              )
             )
            )
            (local.set $$$0192
             (local.get $$219)
            )
           )
          )
         )
        )
       )
      )
     )
    )
   )
  )
  (local.set $$460
   (i32.load
    (i32.const 2600)
   )
  )
  (local.set $$461
   (i32.lt_u
    (local.get $$460)
    (local.get $$$0192)
   )
  )
  (if
   (i32.eqz
    (local.get $$461)
   )
   (block
    (local.set $$462
     (i32.sub
      (local.get $$460)
      (local.get $$$0192)
     )
    )
    (local.set $$463
     (i32.load
      (i32.const 2612)
     )
    )
    (local.set $$464
     (i32.gt_u
      (local.get $$462)
      (i32.const 15)
     )
    )
    (if
     (local.get $$464)
     (block
      (local.set $$465
       (i32.add
        (local.get $$463)
        (local.get $$$0192)
       )
      )
      (i32.store
       (i32.const 2612)
       (local.get $$465)
      )
      (i32.store
       (i32.const 2600)
       (local.get $$462)
      )
      (local.set $$466
       (i32.or
        (local.get $$462)
        (i32.const 1)
       )
      )
      (local.set $$467
       (i32.add
        (local.get $$465)
        (i32.const 4)
       )
      )
      (i32.store
       (local.get $$467)
       (local.get $$466)
      )
      (local.set $$468
       (i32.add
        (local.get $$463)
        (local.get $$460)
       )
      )
      (i32.store
       (local.get $$468)
       (local.get $$462)
      )
      (local.set $$469
       (i32.or
        (local.get $$$0192)
        (i32.const 3)
       )
      )
      (local.set $$470
       (i32.add
        (local.get $$463)
        (i32.const 4)
       )
      )
      (i32.store
       (local.get $$470)
       (local.get $$469)
      )
     )
     (block
      (i32.store
       (i32.const 2600)
       (i32.const 0)
      )
      (i32.store
       (i32.const 2612)
       (i32.const 0)
      )
      (local.set $$471
       (i32.or
        (local.get $$460)
        (i32.const 3)
       )
      )
      (local.set $$472
       (i32.add
        (local.get $$463)
        (i32.const 4)
       )
      )
      (i32.store
       (local.get $$472)
       (local.get $$471)
      )
      (local.set $$473
       (i32.add
        (local.get $$463)
        (local.get $$460)
       )
      )
      (local.set $$474
       (i32.add
        (local.get $$473)
        (i32.const 4)
       )
      )
      (local.set $$475
       (i32.load
        (local.get $$474)
       )
      )
      (local.set $$476
       (i32.or
        (local.get $$475)
        (i32.const 1)
       )
      )
      (i32.store
       (local.get $$474)
       (local.get $$476)
      )
     )
    )
    (local.set $$477
     (i32.add
      (local.get $$463)
      (i32.const 8)
     )
    )
    (local.set $$$0
     (local.get $$477)
    )
    (global.set $STACKTOP
     (local.get $sp)
    )
    (return
     (local.get $$$0)
    )
   )
  )
  (local.set $$478
   (i32.load
    (i32.const 2604)
   )
  )
  (local.set $$479
   (i32.gt_u
    (local.get $$478)
    (local.get $$$0192)
   )
  )
  (if
   (local.get $$479)
   (block
    (local.set $$480
     (i32.sub
      (local.get $$478)
      (local.get $$$0192)
     )
    )
    (i32.store
     (i32.const 2604)
     (local.get $$480)
    )
    (local.set $$481
     (i32.load
      (i32.const 2616)
     )
    )
    (local.set $$482
     (i32.add
      (local.get $$481)
      (local.get $$$0192)
     )
    )
    (i32.store
     (i32.const 2616)
     (local.get $$482)
    )
    (local.set $$483
     (i32.or
      (local.get $$480)
      (i32.const 1)
     )
    )
    (local.set $$484
     (i32.add
      (local.get $$482)
      (i32.const 4)
     )
    )
    (i32.store
     (local.get $$484)
     (local.get $$483)
    )
    (local.set $$485
     (i32.or
      (local.get $$$0192)
      (i32.const 3)
     )
    )
    (local.set $$486
     (i32.add
      (local.get $$481)
      (i32.const 4)
     )
    )
    (i32.store
     (local.get $$486)
     (local.get $$485)
    )
    (local.set $$487
     (i32.add
      (local.get $$481)
      (i32.const 8)
     )
    )
    (local.set $$$0
     (local.get $$487)
    )
    (global.set $STACKTOP
     (local.get $sp)
    )
    (return
     (local.get $$$0)
    )
   )
  )
  (local.set $$488
   (i32.load
    (i32.const 3064)
   )
  )
  (local.set $$489
   (i32.eq
    (local.get $$488)
    (i32.const 0)
   )
  )
  (if
   (local.get $$489)
   (block
    (i32.store
     (i32.const 3072)
     (i32.const 4096)
    )
    (i32.store
     (i32.const 3068)
     (i32.const 4096)
    )
    (i32.store
     (i32.const 3076)
     (i32.const -1)
    )
    (i32.store
     (i32.const 3080)
     (i32.const -1)
    )
    (i32.store
     (i32.const 3084)
     (i32.const 0)
    )
    (i32.store
     (i32.const 3036)
     (i32.const 0)
    )
    (local.set $$490
     (local.get $$1)
    )
    (local.set $$491
     (i32.and
      (local.get $$490)
      (i32.const -16)
     )
    )
    (local.set $$492
     (i32.xor
      (local.get $$491)
      (i32.const 1431655768)
     )
    )
    (i32.store
     (i32.const 3064)
     (local.get $$492)
    )
    (local.set $$496
     (i32.const 4096)
    )
   )
   (block
    (local.set $$$pre$i195
     (i32.load
      (i32.const 3072)
     )
    )
    (local.set $$496
     (local.get $$$pre$i195)
    )
   )
  )
  (local.set $$493
   (i32.add
    (local.get $$$0192)
    (i32.const 48)
   )
  )
  (local.set $$494
   (i32.add
    (local.get $$$0192)
    (i32.const 47)
   )
  )
  (local.set $$495
   (i32.add
    (local.get $$496)
    (local.get $$494)
   )
  )
  (local.set $$497
   (i32.sub
    (i32.const 0)
    (local.get $$496)
   )
  )
  (local.set $$498
   (i32.and
    (local.get $$495)
    (local.get $$497)
   )
  )
  (local.set $$499
   (i32.gt_u
    (local.get $$498)
    (local.get $$$0192)
   )
  )
  (if
   (i32.eqz
    (local.get $$499)
   )
   (block
    (local.set $$$0
     (i32.const 0)
    )
    (global.set $STACKTOP
     (local.get $sp)
    )
    (return
     (local.get $$$0)
    )
   )
  )
  (local.set $$500
   (i32.load
    (i32.const 3032)
   )
  )
  (local.set $$501
   (i32.eq
    (local.get $$500)
    (i32.const 0)
   )
  )
  (if
   (i32.eqz
    (local.get $$501)
   )
   (block
    (local.set $$502
     (i32.load
      (i32.const 3024)
     )
    )
    (local.set $$503
     (i32.add
      (local.get $$502)
      (local.get $$498)
     )
    )
    (local.set $$504
     (i32.le_u
      (local.get $$503)
      (local.get $$502)
     )
    )
    (local.set $$505
     (i32.gt_u
      (local.get $$503)
      (local.get $$500)
     )
    )
    (local.set $$or$cond1$i
     (i32.or
      (local.get $$504)
      (local.get $$505)
     )
    )
    (if
     (local.get $$or$cond1$i)
     (block
      (local.set $$$0
       (i32.const 0)
      )
      (global.set $STACKTOP
       (local.get $sp)
      )
      (return
       (local.get $$$0)
      )
     )
    )
   )
  )
  (local.set $$506
   (i32.load
    (i32.const 3036)
   )
  )
  (local.set $$507
   (i32.and
    (local.get $$506)
    (i32.const 4)
   )
  )
  (local.set $$508
   (i32.eq
    (local.get $$507)
    (i32.const 0)
   )
  )
  (block $label$break$L178
   (if
    (local.get $$508)
    (block
     (local.set $$509
      (i32.load
       (i32.const 2616)
      )
     )
     (local.set $$510
      (i32.eq
       (local.get $$509)
       (i32.const 0)
      )
     )
     (block $label$break$L180
      (if
       (local.get $$510)
       (local.set $label
        (i32.const 128)
       )
       (block
        (local.set $$$0$i20$i
         (i32.const 3040)
        )
        (loop $while-in24
         (block $while-out23
          (local.set $$511
           (i32.load
            (local.get $$$0$i20$i)
           )
          )
          (local.set $$512
           (i32.gt_u
            (local.get $$511)
            (local.get $$509)
           )
          )
          (if
           (i32.eqz
            (local.get $$512)
           )
           (block
            (local.set $$513
             (i32.add
              (local.get $$$0$i20$i)
              (i32.const 4)
             )
            )
            (local.set $$514
             (i32.load
              (local.get $$513)
             )
            )
            (local.set $$515
             (i32.add
              (local.get $$511)
              (local.get $$514)
             )
            )
            (local.set $$516
             (i32.gt_u
              (local.get $$515)
              (local.get $$509)
             )
            )
            (if
             (local.get $$516)
             (br $while-out23)
            )
           )
          )
          (local.set $$517
           (i32.add
            (local.get $$$0$i20$i)
            (i32.const 8)
           )
          )
          (local.set $$518
           (i32.load
            (local.get $$517)
           )
          )
          (local.set $$519
           (i32.eq
            (local.get $$518)
            (i32.const 0)
           )
          )
          (if
           (local.get $$519)
           (block
            (local.set $label
             (i32.const 128)
            )
            (br $label$break$L180)
           )
           (local.set $$$0$i20$i
            (local.get $$518)
           )
          )
          (br $while-in24)
         )
        )
        (local.set $$542
         (i32.sub
          (local.get $$495)
          (local.get $$478)
         )
        )
        (local.set $$543
         (i32.and
          (local.get $$542)
          (local.get $$497)
         )
        )
        (local.set $$544
         (i32.lt_u
          (local.get $$543)
          (i32.const 2147483647)
         )
        )
        (if
         (local.get $$544)
         (block
          (local.set $$545
           (i32.add
            (local.get $$$0$i20$i)
            (i32.const 4)
           )
          )
          (local.set $$546
           (call $_sbrk
            (local.get $$543)
           )
          )
          (local.set $$547
           (i32.load
            (local.get $$$0$i20$i)
           )
          )
          (local.set $$548
           (i32.load
            (local.get $$545)
           )
          )
          (local.set $$549
           (i32.add
            (local.get $$547)
            (local.get $$548)
           )
          )
          (local.set $$550
           (i32.eq
            (local.get $$546)
            (local.get $$549)
           )
          )
          (if
           (local.get $$550)
           (block
            (local.set $$551
             (i32.eq
              (local.get $$546)
              (i32.const -1)
             )
            )
            (if
             (local.get $$551)
             (local.set $$$2234243136$i
              (local.get $$543)
             )
             (block
              (local.set $$$723947$i
               (local.get $$543)
              )
              (local.set $$$748$i
               (local.get $$546)
              )
              (local.set $label
               (i32.const 145)
              )
              (br $label$break$L178)
             )
            )
           )
           (block
            (local.set $$$2247$ph$i
             (local.get $$546)
            )
            (local.set $$$2253$ph$i
             (local.get $$543)
            )
            (local.set $label
             (i32.const 136)
            )
           )
          )
         )
         (local.set $$$2234243136$i
          (i32.const 0)
         )
        )
       )
      )
     )
     (block $do-once25
      (if
       (i32.eq
        (local.get $label)
        (i32.const 128)
       )
       (block
        (local.set $$520
         (call $_sbrk
          (i32.const 0)
         )
        )
        (local.set $$521
         (i32.eq
          (local.get $$520)
          (i32.const -1)
         )
        )
        (if
         (local.get $$521)
         (local.set $$$2234243136$i
          (i32.const 0)
         )
         (block
          (local.set $$522
           (local.get $$520)
          )
          (local.set $$523
           (i32.load
            (i32.const 3068)
           )
          )
          (local.set $$524
           (i32.add
            (local.get $$523)
            (i32.const -1)
           )
          )
          (local.set $$525
           (i32.and
            (local.get $$524)
            (local.get $$522)
           )
          )
          (local.set $$526
           (i32.eq
            (local.get $$525)
            (i32.const 0)
           )
          )
          (local.set $$527
           (i32.add
            (local.get $$524)
            (local.get $$522)
           )
          )
          (local.set $$528
           (i32.sub
            (i32.const 0)
            (local.get $$523)
           )
          )
          (local.set $$529
           (i32.and
            (local.get $$527)
            (local.get $$528)
           )
          )
          (local.set $$530
           (i32.sub
            (local.get $$529)
            (local.get $$522)
           )
          )
          (local.set $$531
           (if (result i32)
            (local.get $$526)
            (i32.const 0)
            (local.get $$530)
           )
          )
          (local.set $$spec$select49$i
           (i32.add
            (local.get $$531)
            (local.get $$498)
           )
          )
          (local.set $$532
           (i32.load
            (i32.const 3024)
           )
          )
          (local.set $$533
           (i32.add
            (local.get $$spec$select49$i)
            (local.get $$532)
           )
          )
          (local.set $$534
           (i32.gt_u
            (local.get $$spec$select49$i)
            (local.get $$$0192)
           )
          )
          (local.set $$535
           (i32.lt_u
            (local.get $$spec$select49$i)
            (i32.const 2147483647)
           )
          )
          (local.set $$or$cond$i
           (i32.and
            (local.get $$534)
            (local.get $$535)
           )
          )
          (if
           (local.get $$or$cond$i)
           (block
            (local.set $$536
             (i32.load
              (i32.const 3032)
             )
            )
            (local.set $$537
             (i32.eq
              (local.get $$536)
              (i32.const 0)
             )
            )
            (if
             (i32.eqz
              (local.get $$537)
             )
             (block
              (local.set $$538
               (i32.le_u
                (local.get $$533)
                (local.get $$532)
               )
              )
              (local.set $$539
               (i32.gt_u
                (local.get $$533)
                (local.get $$536)
               )
              )
              (local.set $$or$cond2$i
               (i32.or
                (local.get $$538)
                (local.get $$539)
               )
              )
              (if
               (local.get $$or$cond2$i)
               (block
                (local.set $$$2234243136$i
                 (i32.const 0)
                )
                (br $do-once25)
               )
              )
             )
            )
            (local.set $$540
             (call $_sbrk
              (local.get $$spec$select49$i)
             )
            )
            (local.set $$541
             (i32.eq
              (local.get $$540)
              (local.get $$520)
             )
            )
            (if
             (local.get $$541)
             (block
              (local.set $$$723947$i
               (local.get $$spec$select49$i)
              )
              (local.set $$$748$i
               (local.get $$520)
              )
              (local.set $label
               (i32.const 145)
              )
              (br $label$break$L178)
             )
             (block
              (local.set $$$2247$ph$i
               (local.get $$540)
              )
              (local.set $$$2253$ph$i
               (local.get $$spec$select49$i)
              )
              (local.set $label
               (i32.const 136)
              )
             )
            )
           )
           (local.set $$$2234243136$i
            (i32.const 0)
           )
          )
         )
        )
       )
      )
     )
     (block $do-once27
      (if
       (i32.eq
        (local.get $label)
        (i32.const 136)
       )
       (block
        (local.set $$552
         (i32.sub
          (i32.const 0)
          (local.get $$$2253$ph$i)
         )
        )
        (local.set $$553
         (i32.ne
          (local.get $$$2247$ph$i)
          (i32.const -1)
         )
        )
        (local.set $$554
         (i32.lt_u
          (local.get $$$2253$ph$i)
          (i32.const 2147483647)
         )
        )
        (local.set $$or$cond7$i
         (i32.and
          (local.get $$554)
          (local.get $$553)
         )
        )
        (local.set $$555
         (i32.gt_u
          (local.get $$493)
          (local.get $$$2253$ph$i)
         )
        )
        (local.set $$or$cond6$i
         (i32.and
          (local.get $$555)
          (local.get $$or$cond7$i)
         )
        )
        (if
         (i32.eqz
          (local.get $$or$cond6$i)
         )
         (block
          (local.set $$565
           (i32.eq
            (local.get $$$2247$ph$i)
            (i32.const -1)
           )
          )
          (if
           (local.get $$565)
           (block
            (local.set $$$2234243136$i
             (i32.const 0)
            )
            (br $do-once27)
           )
           (block
            (local.set $$$723947$i
             (local.get $$$2253$ph$i)
            )
            (local.set $$$748$i
             (local.get $$$2247$ph$i)
            )
            (local.set $label
             (i32.const 145)
            )
            (br $label$break$L178)
           )
          )
         )
        )
        (local.set $$556
         (i32.load
          (i32.const 3072)
         )
        )
        (local.set $$557
         (i32.sub
          (local.get $$494)
          (local.get $$$2253$ph$i)
         )
        )
        (local.set $$558
         (i32.add
          (local.get $$557)
          (local.get $$556)
         )
        )
        (local.set $$559
         (i32.sub
          (i32.const 0)
          (local.get $$556)
         )
        )
        (local.set $$560
         (i32.and
          (local.get $$558)
          (local.get $$559)
         )
        )
        (local.set $$561
         (i32.lt_u
          (local.get $$560)
          (i32.const 2147483647)
         )
        )
        (if
         (i32.eqz
          (local.get $$561)
         )
         (block
          (local.set $$$723947$i
           (local.get $$$2253$ph$i)
          )
          (local.set $$$748$i
           (local.get $$$2247$ph$i)
          )
          (local.set $label
           (i32.const 145)
          )
          (br $label$break$L178)
         )
        )
        (local.set $$562
         (call $_sbrk
          (local.get $$560)
         )
        )
        (local.set $$563
         (i32.eq
          (local.get $$562)
          (i32.const -1)
         )
        )
        (if
         (local.get $$563)
         (block
          (drop
           (call $_sbrk
            (local.get $$552)
           )
          )
          (local.set $$$2234243136$i
           (i32.const 0)
          )
          (br $do-once27)
         )
         (block
          (local.set $$564
           (i32.add
            (local.get $$560)
            (local.get $$$2253$ph$i)
           )
          )
          (local.set $$$723947$i
           (local.get $$564)
          )
          (local.set $$$748$i
           (local.get $$$2247$ph$i)
          )
          (local.set $label
           (i32.const 145)
          )
          (br $label$break$L178)
         )
        )
       )
      )
     )
     (local.set $$566
      (i32.load
       (i32.const 3036)
      )
     )
     (local.set $$567
      (i32.or
       (local.get $$566)
       (i32.const 4)
      )
     )
     (i32.store
      (i32.const 3036)
      (local.get $$567)
     )
     (local.set $$$4236$i
      (local.get $$$2234243136$i)
     )
     (local.set $label
      (i32.const 143)
     )
    )
    (block
     (local.set $$$4236$i
      (i32.const 0)
     )
     (local.set $label
      (i32.const 143)
     )
    )
   )
  )
  (if
   (i32.eq
    (local.get $label)
    (i32.const 143)
   )
   (block
    (local.set $$568
     (i32.lt_u
      (local.get $$498)
      (i32.const 2147483647)
     )
    )
    (if
     (local.get $$568)
     (block
      (local.set $$569
       (call $_sbrk
        (local.get $$498)
       )
      )
      (local.set $$570
       (call $_sbrk
        (i32.const 0)
       )
      )
      (local.set $$571
       (i32.ne
        (local.get $$569)
        (i32.const -1)
       )
      )
      (local.set $$572
       (i32.ne
        (local.get $$570)
        (i32.const -1)
       )
      )
      (local.set $$or$cond5$i
       (i32.and
        (local.get $$571)
        (local.get $$572)
       )
      )
      (local.set $$573
       (i32.lt_u
        (local.get $$569)
        (local.get $$570)
       )
      )
      (local.set $$or$cond8$i
       (i32.and
        (local.get $$573)
        (local.get $$or$cond5$i)
       )
      )
      (local.set $$574
       (local.get $$570)
      )
      (local.set $$575
       (local.get $$569)
      )
      (local.set $$576
       (i32.sub
        (local.get $$574)
        (local.get $$575)
       )
      )
      (local.set $$577
       (i32.add
        (local.get $$$0192)
        (i32.const 40)
       )
      )
      (local.set $$578
       (i32.gt_u
        (local.get $$576)
        (local.get $$577)
       )
      )
      (local.set $$spec$select9$i
       (if (result i32)
        (local.get $$578)
        (local.get $$576)
        (local.get $$$4236$i)
       )
      )
      (local.set $$or$cond8$not$i
       (i32.xor
        (local.get $$or$cond8$i)
        (i32.const 1)
       )
      )
      (local.set $$579
       (i32.eq
        (local.get $$569)
        (i32.const -1)
       )
      )
      (local.set $$not$$i
       (i32.xor
        (local.get $$578)
        (i32.const 1)
       )
      )
      (local.set $$580
       (i32.or
        (local.get $$579)
        (local.get $$not$$i)
       )
      )
      (local.set $$or$cond50$i
       (i32.or
        (local.get $$580)
        (local.get $$or$cond8$not$i)
       )
      )
      (if
       (i32.eqz
        (local.get $$or$cond50$i)
       )
       (block
        (local.set $$$723947$i
         (local.get $$spec$select9$i)
        )
        (local.set $$$748$i
         (local.get $$569)
        )
        (local.set $label
         (i32.const 145)
        )
       )
      )
     )
    )
   )
  )
  (if
   (i32.eq
    (local.get $label)
    (i32.const 145)
   )
   (block
    (local.set $$581
     (i32.load
      (i32.const 3024)
     )
    )
    (local.set $$582
     (i32.add
      (local.get $$581)
      (local.get $$$723947$i)
     )
    )
    (i32.store
     (i32.const 3024)
     (local.get $$582)
    )
    (local.set $$583
     (i32.load
      (i32.const 3028)
     )
    )
    (local.set $$584
     (i32.gt_u
      (local.get $$582)
      (local.get $$583)
     )
    )
    (if
     (local.get $$584)
     (i32.store
      (i32.const 3028)
      (local.get $$582)
     )
    )
    (local.set $$585
     (i32.load
      (i32.const 2616)
     )
    )
    (local.set $$586
     (i32.eq
      (local.get $$585)
      (i32.const 0)
     )
    )
    (block $label$break$L215
     (if
      (local.get $$586)
      (block
       (local.set $$587
        (i32.load
         (i32.const 2608)
        )
       )
       (local.set $$588
        (i32.eq
         (local.get $$587)
         (i32.const 0)
        )
       )
       (local.set $$589
        (i32.lt_u
         (local.get $$$748$i)
         (local.get $$587)
        )
       )
       (local.set $$or$cond11$i
        (i32.or
         (local.get $$588)
         (local.get $$589)
        )
       )
       (if
        (local.get $$or$cond11$i)
        (i32.store
         (i32.const 2608)
         (local.get $$$748$i)
        )
       )
       (i32.store
        (i32.const 3040)
        (local.get $$$748$i)
       )
       (i32.store
        (i32.const 3044)
        (local.get $$$723947$i)
       )
       (i32.store
        (i32.const 3052)
        (i32.const 0)
       )
       (local.set $$590
        (i32.load
         (i32.const 3064)
        )
       )
       (i32.store
        (i32.const 2628)
        (local.get $$590)
       )
       (i32.store
        (i32.const 2624)
        (i32.const -1)
       )
       (i32.store
        (i32.const 2644)
        (i32.const 2632)
       )
       (i32.store
        (i32.const 2640)
        (i32.const 2632)
       )
       (i32.store
        (i32.const 2652)
        (i32.const 2640)
       )
       (i32.store
        (i32.const 2648)
        (i32.const 2640)
       )
       (i32.store
        (i32.const 2660)
        (i32.const 2648)
       )
       (i32.store
        (i32.const 2656)
        (i32.const 2648)
       )
       (i32.store
        (i32.const 2668)
        (i32.const 2656)
       )
       (i32.store
        (i32.const 2664)
        (i32.const 2656)
       )
       (i32.store
        (i32.const 2676)
        (i32.const 2664)
       )
       (i32.store
        (i32.const 2672)
        (i32.const 2664)
       )
       (i32.store
        (i32.const 2684)
        (i32.const 2672)
       )
       (i32.store
        (i32.const 2680)
        (i32.const 2672)
       )
       (i32.store
        (i32.const 2692)
        (i32.const 2680)
       )
       (i32.store
        (i32.const 2688)
        (i32.const 2680)
       )
       (i32.store
        (i32.const 2700)
        (i32.const 2688)
       )
       (i32.store
        (i32.const 2696)
        (i32.const 2688)
       )
       (i32.store
        (i32.const 2708)
        (i32.const 2696)
       )
       (i32.store
        (i32.const 2704)
        (i32.const 2696)
       )
       (i32.store
        (i32.const 2716)
        (i32.const 2704)
       )
       (i32.store
        (i32.const 2712)
        (i32.const 2704)
       )
       (i32.store
        (i32.const 2724)
        (i32.const 2712)
       )
       (i32.store
        (i32.const 2720)
        (i32.const 2712)
       )
       (i32.store
        (i32.const 2732)
        (i32.const 2720)
       )
       (i32.store
        (i32.const 2728)
        (i32.const 2720)
       )
       (i32.store
        (i32.const 2740)
        (i32.const 2728)
       )
       (i32.store
        (i32.const 2736)
        (i32.const 2728)
       )
       (i32.store
        (i32.const 2748)
        (i32.const 2736)
       )
       (i32.store
        (i32.const 2744)
        (i32.const 2736)
       )
       (i32.store
        (i32.const 2756)
        (i32.const 2744)
       )
       (i32.store
        (i32.const 2752)
        (i32.const 2744)
       )
       (i32.store
        (i32.const 2764)
        (i32.const 2752)
       )
       (i32.store
        (i32.const 2760)
        (i32.const 2752)
       )
       (i32.store
        (i32.const 2772)
        (i32.const 2760)
       )
       (i32.store
        (i32.const 2768)
        (i32.const 2760)
       )
       (i32.store
        (i32.const 2780)
        (i32.const 2768)
       )
       (i32.store
        (i32.const 2776)
        (i32.const 2768)
       )
       (i32.store
        (i32.const 2788)
        (i32.const 2776)
       )
       (i32.store
        (i32.const 2784)
        (i32.const 2776)
       )
       (i32.store
        (i32.const 2796)
        (i32.const 2784)
       )
       (i32.store
        (i32.const 2792)
        (i32.const 2784)
       )
       (i32.store
        (i32.const 2804)
        (i32.const 2792)
       )
       (i32.store
        (i32.const 2800)
        (i32.const 2792)
       )
       (i32.store
        (i32.const 2812)
        (i32.const 2800)
       )
       (i32.store
        (i32.const 2808)
        (i32.const 2800)
       )
       (i32.store
        (i32.const 2820)
        (i32.const 2808)
       )
       (i32.store
        (i32.const 2816)
        (i32.const 2808)
       )
       (i32.store
        (i32.const 2828)
        (i32.const 2816)
       )
       (i32.store
        (i32.const 2824)
        (i32.const 2816)
       )
       (i32.store
        (i32.const 2836)
        (i32.const 2824)
       )
       (i32.store
        (i32.const 2832)
        (i32.const 2824)
       )
       (i32.store
        (i32.const 2844)
        (i32.const 2832)
       )
       (i32.store
        (i32.const 2840)
        (i32.const 2832)
       )
       (i32.store
        (i32.const 2852)
        (i32.const 2840)
       )
       (i32.store
        (i32.const 2848)
        (i32.const 2840)
       )
       (i32.store
        (i32.const 2860)
        (i32.const 2848)
       )
       (i32.store
        (i32.const 2856)
        (i32.const 2848)
       )
       (i32.store
        (i32.const 2868)
        (i32.const 2856)
       )
       (i32.store
        (i32.const 2864)
        (i32.const 2856)
       )
       (i32.store
        (i32.const 2876)
        (i32.const 2864)
       )
       (i32.store
        (i32.const 2872)
        (i32.const 2864)
       )
       (i32.store
        (i32.const 2884)
        (i32.const 2872)
       )
       (i32.store
        (i32.const 2880)
        (i32.const 2872)
       )
       (i32.store
        (i32.const 2892)
        (i32.const 2880)
       )
       (i32.store
        (i32.const 2888)
        (i32.const 2880)
       )
       (local.set $$591
        (i32.add
         (local.get $$$723947$i)
         (i32.const -40)
        )
       )
       (local.set $$592
        (i32.add
         (local.get $$$748$i)
         (i32.const 8)
        )
       )
       (local.set $$593
        (local.get $$592)
       )
       (local.set $$594
        (i32.and
         (local.get $$593)
         (i32.const 7)
        )
       )
       (local.set $$595
        (i32.eq
         (local.get $$594)
         (i32.const 0)
        )
       )
       (local.set $$596
        (i32.sub
         (i32.const 0)
         (local.get $$593)
        )
       )
       (local.set $$597
        (i32.and
         (local.get $$596)
         (i32.const 7)
        )
       )
       (local.set $$598
        (if (result i32)
         (local.get $$595)
         (i32.const 0)
         (local.get $$597)
        )
       )
       (local.set $$599
        (i32.add
         (local.get $$$748$i)
         (local.get $$598)
        )
       )
       (local.set $$600
        (i32.sub
         (local.get $$591)
         (local.get $$598)
        )
       )
       (i32.store
        (i32.const 2616)
        (local.get $$599)
       )
       (i32.store
        (i32.const 2604)
        (local.get $$600)
       )
       (local.set $$601
        (i32.or
         (local.get $$600)
         (i32.const 1)
        )
       )
       (local.set $$602
        (i32.add
         (local.get $$599)
         (i32.const 4)
        )
       )
       (i32.store
        (local.get $$602)
        (local.get $$601)
       )
       (local.set $$603
        (i32.add
         (local.get $$$748$i)
         (local.get $$591)
        )
       )
       (local.set $$604
        (i32.add
         (local.get $$603)
         (i32.const 4)
        )
       )
       (i32.store
        (local.get $$604)
        (i32.const 40)
       )
       (local.set $$605
        (i32.load
         (i32.const 3080)
        )
       )
       (i32.store
        (i32.const 2620)
        (local.get $$605)
       )
      )
      (block
       (local.set $$$024372$i
        (i32.const 3040)
       )
       (loop $while-in31
        (block $while-out30
         (local.set $$606
          (i32.load
           (local.get $$$024372$i)
          )
         )
         (local.set $$607
          (i32.add
           (local.get $$$024372$i)
           (i32.const 4)
          )
         )
         (local.set $$608
          (i32.load
           (local.get $$607)
          )
         )
         (local.set $$609
          (i32.add
           (local.get $$606)
           (local.get $$608)
          )
         )
         (local.set $$610
          (i32.eq
           (local.get $$$748$i)
           (local.get $$609)
          )
         )
         (if
          (local.get $$610)
          (block
           (local.set $label
            (i32.const 154)
           )
           (br $while-out30)
          )
         )
         (local.set $$611
          (i32.add
           (local.get $$$024372$i)
           (i32.const 8)
          )
         )
         (local.set $$612
          (i32.load
           (local.get $$611)
          )
         )
         (local.set $$613
          (i32.eq
           (local.get $$612)
           (i32.const 0)
          )
         )
         (if
          (local.get $$613)
          (br $while-out30)
          (local.set $$$024372$i
           (local.get $$612)
          )
         )
         (br $while-in31)
        )
       )
       (if
        (i32.eq
         (local.get $label)
         (i32.const 154)
        )
        (block
         (local.set $$614
          (i32.add
           (local.get $$$024372$i)
           (i32.const 4)
          )
         )
         (local.set $$615
          (i32.add
           (local.get $$$024372$i)
           (i32.const 12)
          )
         )
         (local.set $$616
          (i32.load
           (local.get $$615)
          )
         )
         (local.set $$617
          (i32.and
           (local.get $$616)
           (i32.const 8)
          )
         )
         (local.set $$618
          (i32.eq
           (local.get $$617)
           (i32.const 0)
          )
         )
         (if
          (local.get $$618)
          (block
           (local.set $$619
            (i32.le_u
             (local.get $$606)
             (local.get $$585)
            )
           )
           (local.set $$620
            (i32.gt_u
             (local.get $$$748$i)
             (local.get $$585)
            )
           )
           (local.set $$or$cond51$i
            (i32.and
             (local.get $$620)
             (local.get $$619)
            )
           )
           (if
            (local.get $$or$cond51$i)
            (block
             (local.set $$621
              (i32.add
               (local.get $$608)
               (local.get $$$723947$i)
              )
             )
             (i32.store
              (local.get $$614)
              (local.get $$621)
             )
             (local.set $$622
              (i32.load
               (i32.const 2604)
              )
             )
             (local.set $$623
              (i32.add
               (local.get $$622)
               (local.get $$$723947$i)
              )
             )
             (local.set $$624
              (i32.add
               (local.get $$585)
               (i32.const 8)
              )
             )
             (local.set $$625
              (local.get $$624)
             )
             (local.set $$626
              (i32.and
               (local.get $$625)
               (i32.const 7)
              )
             )
             (local.set $$627
              (i32.eq
               (local.get $$626)
               (i32.const 0)
              )
             )
             (local.set $$628
              (i32.sub
               (i32.const 0)
               (local.get $$625)
              )
             )
             (local.set $$629
              (i32.and
               (local.get $$628)
               (i32.const 7)
              )
             )
             (local.set $$630
              (if (result i32)
               (local.get $$627)
               (i32.const 0)
               (local.get $$629)
              )
             )
             (local.set $$631
              (i32.add
               (local.get $$585)
               (local.get $$630)
              )
             )
             (local.set $$632
              (i32.sub
               (local.get $$623)
               (local.get $$630)
              )
             )
             (i32.store
              (i32.const 2616)
              (local.get $$631)
             )
             (i32.store
              (i32.const 2604)
              (local.get $$632)
             )
             (local.set $$633
              (i32.or
               (local.get $$632)
               (i32.const 1)
              )
             )
             (local.set $$634
              (i32.add
               (local.get $$631)
               (i32.const 4)
              )
             )
             (i32.store
              (local.get $$634)
              (local.get $$633)
             )
             (local.set $$635
              (i32.add
               (local.get $$585)
               (local.get $$623)
              )
             )
             (local.set $$636
              (i32.add
               (local.get $$635)
               (i32.const 4)
              )
             )
             (i32.store
              (local.get $$636)
              (i32.const 40)
             )
             (local.set $$637
              (i32.load
               (i32.const 3080)
              )
             )
             (i32.store
              (i32.const 2620)
              (local.get $$637)
             )
             (br $label$break$L215)
            )
           )
          )
         )
        )
       )
       (local.set $$638
        (i32.load
         (i32.const 2608)
        )
       )
       (local.set $$639
        (i32.lt_u
         (local.get $$$748$i)
         (local.get $$638)
        )
       )
       (if
        (local.get $$639)
        (i32.store
         (i32.const 2608)
         (local.get $$$748$i)
        )
       )
       (local.set $$640
        (i32.add
         (local.get $$$748$i)
         (local.get $$$723947$i)
        )
       )
       (local.set $$$124471$i
        (i32.const 3040)
       )
       (loop $while-in33
        (block $while-out32
         (local.set $$641
          (i32.load
           (local.get $$$124471$i)
          )
         )
         (local.set $$642
          (i32.eq
           (local.get $$641)
           (local.get $$640)
          )
         )
         (if
          (local.get $$642)
          (block
           (local.set $label
            (i32.const 162)
           )
           (br $while-out32)
          )
         )
         (local.set $$643
          (i32.add
           (local.get $$$124471$i)
           (i32.const 8)
          )
         )
         (local.set $$644
          (i32.load
           (local.get $$643)
          )
         )
         (local.set $$645
          (i32.eq
           (local.get $$644)
           (i32.const 0)
          )
         )
         (if
          (local.get $$645)
          (br $while-out32)
          (local.set $$$124471$i
           (local.get $$644)
          )
         )
         (br $while-in33)
        )
       )
       (if
        (i32.eq
         (local.get $label)
         (i32.const 162)
        )
        (block
         (local.set $$646
          (i32.add
           (local.get $$$124471$i)
           (i32.const 12)
          )
         )
         (local.set $$647
          (i32.load
           (local.get $$646)
          )
         )
         (local.set $$648
          (i32.and
           (local.get $$647)
           (i32.const 8)
          )
         )
         (local.set $$649
          (i32.eq
           (local.get $$648)
           (i32.const 0)
          )
         )
         (if
          (local.get $$649)
          (block
           (i32.store
            (local.get $$$124471$i)
            (local.get $$$748$i)
           )
           (local.set $$650
            (i32.add
             (local.get $$$124471$i)
             (i32.const 4)
            )
           )
           (local.set $$651
            (i32.load
             (local.get $$650)
            )
           )
           (local.set $$652
            (i32.add
             (local.get $$651)
             (local.get $$$723947$i)
            )
           )
           (i32.store
            (local.get $$650)
            (local.get $$652)
           )
           (local.set $$653
            (i32.add
             (local.get $$$748$i)
             (i32.const 8)
            )
           )
           (local.set $$654
            (local.get $$653)
           )
           (local.set $$655
            (i32.and
             (local.get $$654)
             (i32.const 7)
            )
           )
           (local.set $$656
            (i32.eq
             (local.get $$655)
             (i32.const 0)
            )
           )
           (local.set $$657
            (i32.sub
             (i32.const 0)
             (local.get $$654)
            )
           )
           (local.set $$658
            (i32.and
             (local.get $$657)
             (i32.const 7)
            )
           )
           (local.set $$659
            (if (result i32)
             (local.get $$656)
             (i32.const 0)
             (local.get $$658)
            )
           )
           (local.set $$660
            (i32.add
             (local.get $$$748$i)
             (local.get $$659)
            )
           )
           (local.set $$661
            (i32.add
             (local.get $$640)
             (i32.const 8)
            )
           )
           (local.set $$662
            (local.get $$661)
           )
           (local.set $$663
            (i32.and
             (local.get $$662)
             (i32.const 7)
            )
           )
           (local.set $$664
            (i32.eq
             (local.get $$663)
             (i32.const 0)
            )
           )
           (local.set $$665
            (i32.sub
             (i32.const 0)
             (local.get $$662)
            )
           )
           (local.set $$666
            (i32.and
             (local.get $$665)
             (i32.const 7)
            )
           )
           (local.set $$667
            (if (result i32)
             (local.get $$664)
             (i32.const 0)
             (local.get $$666)
            )
           )
           (local.set $$668
            (i32.add
             (local.get $$640)
             (local.get $$667)
            )
           )
           (local.set $$669
            (local.get $$668)
           )
           (local.set $$670
            (local.get $$660)
           )
           (local.set $$671
            (i32.sub
             (local.get $$669)
             (local.get $$670)
            )
           )
           (local.set $$672
            (i32.add
             (local.get $$660)
             (local.get $$$0192)
            )
           )
           (local.set $$673
            (i32.sub
             (local.get $$671)
             (local.get $$$0192)
            )
           )
           (local.set $$674
            (i32.or
             (local.get $$$0192)
             (i32.const 3)
            )
           )
           (local.set $$675
            (i32.add
             (local.get $$660)
             (i32.const 4)
            )
           )
           (i32.store
            (local.get $$675)
            (local.get $$674)
           )
           (local.set $$676
            (i32.eq
             (local.get $$585)
             (local.get $$668)
            )
           )
           (block $label$break$L238
            (if
             (local.get $$676)
             (block
              (local.set $$677
               (i32.load
                (i32.const 2604)
               )
              )
              (local.set $$678
               (i32.add
                (local.get $$677)
                (local.get $$673)
               )
              )
              (i32.store
               (i32.const 2604)
               (local.get $$678)
              )
              (i32.store
               (i32.const 2616)
               (local.get $$672)
              )
              (local.set $$679
               (i32.or
                (local.get $$678)
                (i32.const 1)
               )
              )
              (local.set $$680
               (i32.add
                (local.get $$672)
                (i32.const 4)
               )
              )
              (i32.store
               (local.get $$680)
               (local.get $$679)
              )
             )
             (block
              (local.set $$681
               (i32.load
                (i32.const 2612)
               )
              )
              (local.set $$682
               (i32.eq
                (local.get $$681)
                (local.get $$668)
               )
              )
              (if
               (local.get $$682)
               (block
                (local.set $$683
                 (i32.load
                  (i32.const 2600)
                 )
                )
                (local.set $$684
                 (i32.add
                  (local.get $$683)
                  (local.get $$673)
                 )
                )
                (i32.store
                 (i32.const 2600)
                 (local.get $$684)
                )
                (i32.store
                 (i32.const 2612)
                 (local.get $$672)
                )
                (local.set $$685
                 (i32.or
                  (local.get $$684)
                  (i32.const 1)
                 )
                )
                (local.set $$686
                 (i32.add
                  (local.get $$672)
                  (i32.const 4)
                 )
                )
                (i32.store
                 (local.get $$686)
                 (local.get $$685)
                )
                (local.set $$687
                 (i32.add
                  (local.get $$672)
                  (local.get $$684)
                 )
                )
                (i32.store
                 (local.get $$687)
                 (local.get $$684)
                )
                (br $label$break$L238)
               )
              )
              (local.set $$688
               (i32.add
                (local.get $$668)
                (i32.const 4)
               )
              )
              (local.set $$689
               (i32.load
                (local.get $$688)
               )
              )
              (local.set $$690
               (i32.and
                (local.get $$689)
                (i32.const 3)
               )
              )
              (local.set $$691
               (i32.eq
                (local.get $$690)
                (i32.const 1)
               )
              )
              (if
               (local.get $$691)
               (block
                (local.set $$692
                 (i32.and
                  (local.get $$689)
                  (i32.const -8)
                 )
                )
                (local.set $$693
                 (i32.shr_u
                  (local.get $$689)
                  (i32.const 3)
                 )
                )
                (local.set $$694
                 (i32.lt_u
                  (local.get $$689)
                  (i32.const 256)
                 )
                )
                (block $label$break$L246
                 (if
                  (local.get $$694)
                  (block
                   (local.set $$695
                    (i32.add
                     (local.get $$668)
                     (i32.const 8)
                    )
                   )
                   (local.set $$696
                    (i32.load
                     (local.get $$695)
                    )
                   )
                   (local.set $$697
                    (i32.add
                     (local.get $$668)
                     (i32.const 12)
                    )
                   )
                   (local.set $$698
                    (i32.load
                     (local.get $$697)
                    )
                   )
                   (local.set $$699
                    (i32.eq
                     (local.get $$698)
                     (local.get $$696)
                    )
                   )
                   (if
                    (local.get $$699)
                    (block
                     (local.set $$700
                      (i32.shl
                       (i32.const 1)
                       (local.get $$693)
                      )
                     )
                     (local.set $$701
                      (i32.xor
                       (local.get $$700)
                       (i32.const -1)
                      )
                     )
                     (local.set $$702
                      (i32.load
                       (i32.const 2592)
                      )
                     )
                     (local.set $$703
                      (i32.and
                       (local.get $$702)
                       (local.get $$701)
                      )
                     )
                     (i32.store
                      (i32.const 2592)
                      (local.get $$703)
                     )
                     (br $label$break$L246)
                    )
                    (block
                     (local.set $$704
                      (i32.add
                       (local.get $$696)
                       (i32.const 12)
                      )
                     )
                     (i32.store
                      (local.get $$704)
                      (local.get $$698)
                     )
                     (local.set $$705
                      (i32.add
                       (local.get $$698)
                       (i32.const 8)
                      )
                     )
                     (i32.store
                      (local.get $$705)
                      (local.get $$696)
                     )
                     (br $label$break$L246)
                    )
                   )
                  )
                  (block
                   (local.set $$706
                    (i32.add
                     (local.get $$668)
                     (i32.const 24)
                    )
                   )
                   (local.set $$707
                    (i32.load
                     (local.get $$706)
                    )
                   )
                   (local.set $$708
                    (i32.add
                     (local.get $$668)
                     (i32.const 12)
                    )
                   )
                   (local.set $$709
                    (i32.load
                     (local.get $$708)
                    )
                   )
                   (local.set $$710
                    (i32.eq
                     (local.get $$709)
                     (local.get $$668)
                    )
                   )
                   (block $do-once36
                    (if
                     (local.get $$710)
                     (block
                      (local.set $$715
                       (i32.add
                        (local.get $$668)
                        (i32.const 16)
                       )
                      )
                      (local.set $$716
                       (i32.add
                        (local.get $$715)
                        (i32.const 4)
                       )
                      )
                      (local.set $$717
                       (i32.load
                        (local.get $$716)
                       )
                      )
                      (local.set $$718
                       (i32.eq
                        (local.get $$717)
                        (i32.const 0)
                       )
                      )
                      (if
                       (local.get $$718)
                       (block
                        (local.set $$719
                         (i32.load
                          (local.get $$715)
                         )
                        )
                        (local.set $$720
                         (i32.eq
                          (local.get $$719)
                          (i32.const 0)
                         )
                        )
                        (if
                         (local.get $$720)
                         (block
                          (local.set $$$3$i$i
                           (i32.const 0)
                          )
                          (br $do-once36)
                         )
                         (block
                          (local.set $$$1263$i$i$ph
                           (local.get $$719)
                          )
                          (local.set $$$1265$i$i$ph
                           (local.get $$715)
                          )
                         )
                        )
                       )
                       (block
                        (local.set $$$1263$i$i$ph
                         (local.get $$717)
                        )
                        (local.set $$$1265$i$i$ph
                         (local.get $$716)
                        )
                       )
                      )
                      (local.set $$$1263$i$i
                       (local.get $$$1263$i$i$ph)
                      )
                      (local.set $$$1265$i$i
                       (local.get $$$1265$i$i$ph)
                      )
                      (loop $while-in39
                       (block $while-out38
                        (local.set $$721
                         (i32.add
                          (local.get $$$1263$i$i)
                          (i32.const 20)
                         )
                        )
                        (local.set $$722
                         (i32.load
                          (local.get $$721)
                         )
                        )
                        (local.set $$723
                         (i32.eq
                          (local.get $$722)
                          (i32.const 0)
                         )
                        )
                        (if
                         (local.get $$723)
                         (block
                          (local.set $$724
                           (i32.add
                            (local.get $$$1263$i$i)
                            (i32.const 16)
                           )
                          )
                          (local.set $$725
                           (i32.load
                            (local.get $$724)
                           )
                          )
                          (local.set $$726
                           (i32.eq
                            (local.get $$725)
                            (i32.const 0)
                           )
                          )
                          (if
                           (local.get $$726)
                           (br $while-out38)
                           (block
                            (local.set $$$1263$i$i$be
                             (local.get $$725)
                            )
                            (local.set $$$1265$i$i$be
                             (local.get $$724)
                            )
                           )
                          )
                         )
                         (block
                          (local.set $$$1263$i$i$be
                           (local.get $$722)
                          )
                          (local.set $$$1265$i$i$be
                           (local.get $$721)
                          )
                         )
                        )
                        (local.set $$$1263$i$i
                         (local.get $$$1263$i$i$be)
                        )
                        (local.set $$$1265$i$i
                         (local.get $$$1265$i$i$be)
                        )
                        (br $while-in39)
                       )
                      )
                      (i32.store
                       (local.get $$$1265$i$i)
                       (i32.const 0)
                      )
                      (local.set $$$3$i$i
                       (local.get $$$1263$i$i)
                      )
                     )
                     (block
                      (local.set $$711
                       (i32.add
                        (local.get $$668)
                        (i32.const 8)
                       )
                      )
                      (local.set $$712
                       (i32.load
                        (local.get $$711)
                       )
                      )
                      (local.set $$713
                       (i32.add
                        (local.get $$712)
                        (i32.const 12)
                       )
                      )
                      (i32.store
                       (local.get $$713)
                       (local.get $$709)
                      )
                      (local.set $$714
                       (i32.add
                        (local.get $$709)
                        (i32.const 8)
                       )
                      )
                      (i32.store
                       (local.get $$714)
                       (local.get $$712)
                      )
                      (local.set $$$3$i$i
                       (local.get $$709)
                      )
                     )
                    )
                   )
                   (local.set $$727
                    (i32.eq
                     (local.get $$707)
                     (i32.const 0)
                    )
                   )
                   (if
                    (local.get $$727)
                    (br $label$break$L246)
                   )
                   (local.set $$728
                    (i32.add
                     (local.get $$668)
                     (i32.const 28)
                    )
                   )
                   (local.set $$729
                    (i32.load
                     (local.get $$728)
                    )
                   )
                   (local.set $$730
                    (i32.add
                     (i32.const 2896)
                     (i32.shl
                      (local.get $$729)
                      (i32.const 2)
                     )
                    )
                   )
                   (local.set $$731
                    (i32.load
                     (local.get $$730)
                    )
                   )
                   (local.set $$732
                    (i32.eq
                     (local.get $$731)
                     (local.get $$668)
                    )
                   )
                   (block $do-once40
                    (if
                     (local.get $$732)
                     (block
                      (i32.store
                       (local.get $$730)
                       (local.get $$$3$i$i)
                      )
                      (local.set $$cond$i$i
                       (i32.eq
                        (local.get $$$3$i$i)
                        (i32.const 0)
                       )
                      )
                      (if
                       (i32.eqz
                        (local.get $$cond$i$i)
                       )
                       (br $do-once40)
                      )
                      (local.set $$733
                       (i32.shl
                        (i32.const 1)
                        (local.get $$729)
                       )
                      )
                      (local.set $$734
                       (i32.xor
                        (local.get $$733)
                        (i32.const -1)
                       )
                      )
                      (local.set $$735
                       (i32.load
                        (i32.const 2596)
                       )
                      )
                      (local.set $$736
                       (i32.and
                        (local.get $$735)
                        (local.get $$734)
                       )
                      )
                      (i32.store
                       (i32.const 2596)
                       (local.get $$736)
                      )
                      (br $label$break$L246)
                     )
                     (block
                      (local.set $$737
                       (i32.add
                        (local.get $$707)
                        (i32.const 16)
                       )
                      )
                      (local.set $$738
                       (i32.load
                        (local.get $$737)
                       )
                      )
                      (local.set $$739
                       (i32.eq
                        (local.get $$738)
                        (local.get $$668)
                       )
                      )
                      (local.set $$740
                       (i32.add
                        (local.get $$707)
                        (i32.const 20)
                       )
                      )
                      (local.set $$$sink321
                       (if (result i32)
                        (local.get $$739)
                        (local.get $$737)
                        (local.get $$740)
                       )
                      )
                      (i32.store
                       (local.get $$$sink321)
                       (local.get $$$3$i$i)
                      )
                      (local.set $$741
                       (i32.eq
                        (local.get $$$3$i$i)
                        (i32.const 0)
                       )
                      )
                      (if
                       (local.get $$741)
                       (br $label$break$L246)
                      )
                     )
                    )
                   )
                   (local.set $$742
                    (i32.add
                     (local.get $$$3$i$i)
                     (i32.const 24)
                    )
                   )
                   (i32.store
                    (local.get $$742)
                    (local.get $$707)
                   )
                   (local.set $$743
                    (i32.add
                     (local.get $$668)
                     (i32.const 16)
                    )
                   )
                   (local.set $$744
                    (i32.load
                     (local.get $$743)
                    )
                   )
                   (local.set $$745
                    (i32.eq
                     (local.get $$744)
                     (i32.const 0)
                    )
                   )
                   (if
                    (i32.eqz
                     (local.get $$745)
                    )
                    (block
                     (local.set $$746
                      (i32.add
                       (local.get $$$3$i$i)
                       (i32.const 16)
                      )
                     )
                     (i32.store
                      (local.get $$746)
                      (local.get $$744)
                     )
                     (local.set $$747
                      (i32.add
                       (local.get $$744)
                       (i32.const 24)
                      )
                     )
                     (i32.store
                      (local.get $$747)
                      (local.get $$$3$i$i)
                     )
                    )
                   )
                   (local.set $$748
                    (i32.add
                     (local.get $$743)
                     (i32.const 4)
                    )
                   )
                   (local.set $$749
                    (i32.load
                     (local.get $$748)
                    )
                   )
                   (local.set $$750
                    (i32.eq
                     (local.get $$749)
                     (i32.const 0)
                    )
                   )
                   (if
                    (local.get $$750)
                    (br $label$break$L246)
                   )
                   (local.set $$751
                    (i32.add
                     (local.get $$$3$i$i)
                     (i32.const 20)
                    )
                   )
                   (i32.store
                    (local.get $$751)
                    (local.get $$749)
                   )
                   (local.set $$752
                    (i32.add
                     (local.get $$749)
                     (i32.const 24)
                    )
                   )
                   (i32.store
                    (local.get $$752)
                    (local.get $$$3$i$i)
                   )
                  )
                 )
                )
                (local.set $$753
                 (i32.add
                  (local.get $$668)
                  (local.get $$692)
                 )
                )
                (local.set $$754
                 (i32.add
                  (local.get $$692)
                  (local.get $$673)
                 )
                )
                (local.set $$$0$i$i
                 (local.get $$753)
                )
                (local.set $$$0259$i$i
                 (local.get $$754)
                )
               )
               (block
                (local.set $$$0$i$i
                 (local.get $$668)
                )
                (local.set $$$0259$i$i
                 (local.get $$673)
                )
               )
              )
              (local.set $$755
               (i32.add
                (local.get $$$0$i$i)
                (i32.const 4)
               )
              )
              (local.set $$756
               (i32.load
                (local.get $$755)
               )
              )
              (local.set $$757
               (i32.and
                (local.get $$756)
                (i32.const -2)
               )
              )
              (i32.store
               (local.get $$755)
               (local.get $$757)
              )
              (local.set $$758
               (i32.or
                (local.get $$$0259$i$i)
                (i32.const 1)
               )
              )
              (local.set $$759
               (i32.add
                (local.get $$672)
                (i32.const 4)
               )
              )
              (i32.store
               (local.get $$759)
               (local.get $$758)
              )
              (local.set $$760
               (i32.add
                (local.get $$672)
                (local.get $$$0259$i$i)
               )
              )
              (i32.store
               (local.get $$760)
               (local.get $$$0259$i$i)
              )
              (local.set $$761
               (i32.shr_u
                (local.get $$$0259$i$i)
                (i32.const 3)
               )
              )
              (local.set $$762
               (i32.lt_u
                (local.get $$$0259$i$i)
                (i32.const 256)
               )
              )
              (if
               (local.get $$762)
               (block
                (local.set $$763
                 (i32.shl
                  (local.get $$761)
                  (i32.const 1)
                 )
                )
                (local.set $$764
                 (i32.add
                  (i32.const 2632)
                  (i32.shl
                   (local.get $$763)
                   (i32.const 2)
                  )
                 )
                )
                (local.set $$765
                 (i32.load
                  (i32.const 2592)
                 )
                )
                (local.set $$766
                 (i32.shl
                  (i32.const 1)
                  (local.get $$761)
                 )
                )
                (local.set $$767
                 (i32.and
                  (local.get $$765)
                  (local.get $$766)
                 )
                )
                (local.set $$768
                 (i32.eq
                  (local.get $$767)
                  (i32.const 0)
                 )
                )
                (if
                 (local.get $$768)
                 (block
                  (local.set $$769
                   (i32.or
                    (local.get $$765)
                    (local.get $$766)
                   )
                  )
                  (i32.store
                   (i32.const 2592)
                   (local.get $$769)
                  )
                  (local.set $$$pre$i16$i
                   (i32.add
                    (local.get $$764)
                    (i32.const 8)
                   )
                  )
                  (local.set $$$0267$i$i
                   (local.get $$764)
                  )
                  (local.set $$$pre$phi$i17$iZ2D
                   (local.get $$$pre$i16$i)
                  )
                 )
                 (block
                  (local.set $$770
                   (i32.add
                    (local.get $$764)
                    (i32.const 8)
                   )
                  )
                  (local.set $$771
                   (i32.load
                    (local.get $$770)
                   )
                  )
                  (local.set $$$0267$i$i
                   (local.get $$771)
                  )
                  (local.set $$$pre$phi$i17$iZ2D
                   (local.get $$770)
                  )
                 )
                )
                (i32.store
                 (local.get $$$pre$phi$i17$iZ2D)
                 (local.get $$672)
                )
                (local.set $$772
                 (i32.add
                  (local.get $$$0267$i$i)
                  (i32.const 12)
                 )
                )
                (i32.store
                 (local.get $$772)
                 (local.get $$672)
                )
                (local.set $$773
                 (i32.add
                  (local.get $$672)
                  (i32.const 8)
                 )
                )
                (i32.store
                 (local.get $$773)
                 (local.get $$$0267$i$i)
                )
                (local.set $$774
                 (i32.add
                  (local.get $$672)
                  (i32.const 12)
                 )
                )
                (i32.store
                 (local.get $$774)
                 (local.get $$764)
                )
                (br $label$break$L238)
               )
              )
              (local.set $$775
               (i32.shr_u
                (local.get $$$0259$i$i)
                (i32.const 8)
               )
              )
              (local.set $$776
               (i32.eq
                (local.get $$775)
                (i32.const 0)
               )
              )
              (block $do-once42
               (if
                (local.get $$776)
                (local.set $$$0268$i$i
                 (i32.const 0)
                )
                (block
                 (local.set $$777
                  (i32.gt_u
                   (local.get $$$0259$i$i)
                   (i32.const 16777215)
                  )
                 )
                 (if
                  (local.get $$777)
                  (block
                   (local.set $$$0268$i$i
                    (i32.const 31)
                   )
                   (br $do-once42)
                  )
                 )
                 (local.set $$778
                  (i32.add
                   (local.get $$775)
                   (i32.const 1048320)
                  )
                 )
                 (local.set $$779
                  (i32.shr_u
                   (local.get $$778)
                   (i32.const 16)
                  )
                 )
                 (local.set $$780
                  (i32.and
                   (local.get $$779)
                   (i32.const 8)
                  )
                 )
                 (local.set $$781
                  (i32.shl
                   (local.get $$775)
                   (local.get $$780)
                  )
                 )
                 (local.set $$782
                  (i32.add
                   (local.get $$781)
                   (i32.const 520192)
                  )
                 )
                 (local.set $$783
                  (i32.shr_u
                   (local.get $$782)
                   (i32.const 16)
                  )
                 )
                 (local.set $$784
                  (i32.and
                   (local.get $$783)
                   (i32.const 4)
                  )
                 )
                 (local.set $$785
                  (i32.or
                   (local.get $$784)
                   (local.get $$780)
                  )
                 )
                 (local.set $$786
                  (i32.shl
                   (local.get $$781)
                   (local.get $$784)
                  )
                 )
                 (local.set $$787
                  (i32.add
                   (local.get $$786)
                   (i32.const 245760)
                  )
                 )
                 (local.set $$788
                  (i32.shr_u
                   (local.get $$787)
                   (i32.const 16)
                  )
                 )
                 (local.set $$789
                  (i32.and
                   (local.get $$788)
                   (i32.const 2)
                  )
                 )
                 (local.set $$790
                  (i32.or
                   (local.get $$785)
                   (local.get $$789)
                  )
                 )
                 (local.set $$791
                  (i32.sub
                   (i32.const 14)
                   (local.get $$790)
                  )
                 )
                 (local.set $$792
                  (i32.shl
                   (local.get $$786)
                   (local.get $$789)
                  )
                 )
                 (local.set $$793
                  (i32.shr_u
                   (local.get $$792)
                   (i32.const 15)
                  )
                 )
                 (local.set $$794
                  (i32.add
                   (local.get $$791)
                   (local.get $$793)
                  )
                 )
                 (local.set $$795
                  (i32.shl
                   (local.get $$794)
                   (i32.const 1)
                  )
                 )
                 (local.set $$796
                  (i32.add
                   (local.get $$794)
                   (i32.const 7)
                  )
                 )
                 (local.set $$797
                  (i32.shr_u
                   (local.get $$$0259$i$i)
                   (local.get $$796)
                  )
                 )
                 (local.set $$798
                  (i32.and
                   (local.get $$797)
                   (i32.const 1)
                  )
                 )
                 (local.set $$799
                  (i32.or
                   (local.get $$798)
                   (local.get $$795)
                  )
                 )
                 (local.set $$$0268$i$i
                  (local.get $$799)
                 )
                )
               )
              )
              (local.set $$800
               (i32.add
                (i32.const 2896)
                (i32.shl
                 (local.get $$$0268$i$i)
                 (i32.const 2)
                )
               )
              )
              (local.set $$801
               (i32.add
                (local.get $$672)
                (i32.const 28)
               )
              )
              (i32.store
               (local.get $$801)
               (local.get $$$0268$i$i)
              )
              (local.set $$802
               (i32.add
                (local.get $$672)
                (i32.const 16)
               )
              )
              (local.set $$803
               (i32.add
                (local.get $$802)
                (i32.const 4)
               )
              )
              (i32.store
               (local.get $$803)
               (i32.const 0)
              )
              (i32.store
               (local.get $$802)
               (i32.const 0)
              )
              (local.set $$804
               (i32.load
                (i32.const 2596)
               )
              )
              (local.set $$805
               (i32.shl
                (i32.const 1)
                (local.get $$$0268$i$i)
               )
              )
              (local.set $$806
               (i32.and
                (local.get $$804)
                (local.get $$805)
               )
              )
              (local.set $$807
               (i32.eq
                (local.get $$806)
                (i32.const 0)
               )
              )
              (if
               (local.get $$807)
               (block
                (local.set $$808
                 (i32.or
                  (local.get $$804)
                  (local.get $$805)
                 )
                )
                (i32.store
                 (i32.const 2596)
                 (local.get $$808)
                )
                (i32.store
                 (local.get $$800)
                 (local.get $$672)
                )
                (local.set $$809
                 (i32.add
                  (local.get $$672)
                  (i32.const 24)
                 )
                )
                (i32.store
                 (local.get $$809)
                 (local.get $$800)
                )
                (local.set $$810
                 (i32.add
                  (local.get $$672)
                  (i32.const 12)
                 )
                )
                (i32.store
                 (local.get $$810)
                 (local.get $$672)
                )
                (local.set $$811
                 (i32.add
                  (local.get $$672)
                  (i32.const 8)
                 )
                )
                (i32.store
                 (local.get $$811)
                 (local.get $$672)
                )
                (br $label$break$L238)
               )
              )
              (local.set $$812
               (i32.load
                (local.get $$800)
               )
              )
              (local.set $$813
               (i32.add
                (local.get $$812)
                (i32.const 4)
               )
              )
              (local.set $$814
               (i32.load
                (local.get $$813)
               )
              )
              (local.set $$815
               (i32.and
                (local.get $$814)
                (i32.const -8)
               )
              )
              (local.set $$816
               (i32.eq
                (local.get $$815)
                (local.get $$$0259$i$i)
               )
              )
              (block $label$break$L291
               (if
                (local.get $$816)
                (local.set $$$0261$lcssa$i$i
                 (local.get $$812)
                )
                (block
                 (local.set $$817
                  (i32.eq
                   (local.get $$$0268$i$i)
                   (i32.const 31)
                  )
                 )
                 (local.set $$818
                  (i32.shr_u
                   (local.get $$$0268$i$i)
                   (i32.const 1)
                  )
                 )
                 (local.set $$819
                  (i32.sub
                   (i32.const 25)
                   (local.get $$818)
                  )
                 )
                 (local.set $$820
                  (if (result i32)
                   (local.get $$817)
                   (i32.const 0)
                   (local.get $$819)
                  )
                 )
                 (local.set $$821
                  (i32.shl
                   (local.get $$$0259$i$i)
                   (local.get $$820)
                  )
                 )
                 (local.set $$$02604$i$i
                  (local.get $$821)
                 )
                 (local.set $$$02613$i$i
                  (local.get $$812)
                 )
                 (loop $while-in46
                  (block $while-out45
                   (local.set $$828
                    (i32.shr_u
                     (local.get $$$02604$i$i)
                     (i32.const 31)
                    )
                   )
                   (local.set $$829
                    (i32.add
                     (i32.add
                      (local.get $$$02613$i$i)
                      (i32.const 16)
                     )
                     (i32.shl
                      (local.get $$828)
                      (i32.const 2)
                     )
                    )
                   )
                   (local.set $$824
                    (i32.load
                     (local.get $$829)
                    )
                   )
                   (local.set $$830
                    (i32.eq
                     (local.get $$824)
                     (i32.const 0)
                    )
                   )
                   (if
                    (local.get $$830)
                    (br $while-out45)
                   )
                   (local.set $$822
                    (i32.shl
                     (local.get $$$02604$i$i)
                     (i32.const 1)
                    )
                   )
                   (local.set $$823
                    (i32.add
                     (local.get $$824)
                     (i32.const 4)
                    )
                   )
                   (local.set $$825
                    (i32.load
                     (local.get $$823)
                    )
                   )
                   (local.set $$826
                    (i32.and
                     (local.get $$825)
                     (i32.const -8)
                    )
                   )
                   (local.set $$827
                    (i32.eq
                     (local.get $$826)
                     (local.get $$$0259$i$i)
                    )
                   )
                   (if
                    (local.get $$827)
                    (block
                     (local.set $$$0261$lcssa$i$i
                      (local.get $$824)
                     )
                     (br $label$break$L291)
                    )
                    (block
                     (local.set $$$02604$i$i
                      (local.get $$822)
                     )
                     (local.set $$$02613$i$i
                      (local.get $$824)
                     )
                    )
                   )
                   (br $while-in46)
                  )
                 )
                 (i32.store
                  (local.get $$829)
                  (local.get $$672)
                 )
                 (local.set $$831
                  (i32.add
                   (local.get $$672)
                   (i32.const 24)
                  )
                 )
                 (i32.store
                  (local.get $$831)
                  (local.get $$$02613$i$i)
                 )
                 (local.set $$832
                  (i32.add
                   (local.get $$672)
                   (i32.const 12)
                  )
                 )
                 (i32.store
                  (local.get $$832)
                  (local.get $$672)
                 )
                 (local.set $$833
                  (i32.add
                   (local.get $$672)
                   (i32.const 8)
                  )
                 )
                 (i32.store
                  (local.get $$833)
                  (local.get $$672)
                 )
                 (br $label$break$L238)
                )
               )
              )
              (local.set $$834
               (i32.add
                (local.get $$$0261$lcssa$i$i)
                (i32.const 8)
               )
              )
              (local.set $$835
               (i32.load
                (local.get $$834)
               )
              )
              (local.set $$836
               (i32.add
                (local.get $$835)
                (i32.const 12)
               )
              )
              (i32.store
               (local.get $$836)
               (local.get $$672)
              )
              (i32.store
               (local.get $$834)
               (local.get $$672)
              )
              (local.set $$837
               (i32.add
                (local.get $$672)
                (i32.const 8)
               )
              )
              (i32.store
               (local.get $$837)
               (local.get $$835)
              )
              (local.set $$838
               (i32.add
                (local.get $$672)
                (i32.const 12)
               )
              )
              (i32.store
               (local.get $$838)
               (local.get $$$0261$lcssa$i$i)
              )
              (local.set $$839
               (i32.add
                (local.get $$672)
                (i32.const 24)
               )
              )
              (i32.store
               (local.get $$839)
               (i32.const 0)
              )
             )
            )
           )
           (local.set $$968
            (i32.add
             (local.get $$660)
             (i32.const 8)
            )
           )
           (local.set $$$0
            (local.get $$968)
           )
           (global.set $STACKTOP
            (local.get $sp)
           )
           (return
            (local.get $$$0)
           )
          )
         )
        )
       )
       (local.set $$$0$i$i$i
        (i32.const 3040)
       )
       (loop $while-in48
        (block $while-out47
         (local.set $$840
          (i32.load
           (local.get $$$0$i$i$i)
          )
         )
         (local.set $$841
          (i32.gt_u
           (local.get $$840)
           (local.get $$585)
          )
         )
         (if
          (i32.eqz
           (local.get $$841)
          )
          (block
           (local.set $$842
            (i32.add
             (local.get $$$0$i$i$i)
             (i32.const 4)
            )
           )
           (local.set $$843
            (i32.load
             (local.get $$842)
            )
           )
           (local.set $$844
            (i32.add
             (local.get $$840)
             (local.get $$843)
            )
           )
           (local.set $$845
            (i32.gt_u
             (local.get $$844)
             (local.get $$585)
            )
           )
           (if
            (local.get $$845)
            (br $while-out47)
           )
          )
         )
         (local.set $$846
          (i32.add
           (local.get $$$0$i$i$i)
           (i32.const 8)
          )
         )
         (local.set $$847
          (i32.load
           (local.get $$846)
          )
         )
         (local.set $$$0$i$i$i
          (local.get $$847)
         )
         (br $while-in48)
        )
       )
       (local.set $$848
        (i32.add
         (local.get $$844)
         (i32.const -47)
        )
       )
       (local.set $$849
        (i32.add
         (local.get $$848)
         (i32.const 8)
        )
       )
       (local.set $$850
        (local.get $$849)
       )
       (local.set $$851
        (i32.and
         (local.get $$850)
         (i32.const 7)
        )
       )
       (local.set $$852
        (i32.eq
         (local.get $$851)
         (i32.const 0)
        )
       )
       (local.set $$853
        (i32.sub
         (i32.const 0)
         (local.get $$850)
        )
       )
       (local.set $$854
        (i32.and
         (local.get $$853)
         (i32.const 7)
        )
       )
       (local.set $$855
        (if (result i32)
         (local.get $$852)
         (i32.const 0)
         (local.get $$854)
        )
       )
       (local.set $$856
        (i32.add
         (local.get $$848)
         (local.get $$855)
        )
       )
       (local.set $$857
        (i32.add
         (local.get $$585)
         (i32.const 16)
        )
       )
       (local.set $$858
        (i32.lt_u
         (local.get $$856)
         (local.get $$857)
        )
       )
       (local.set $$859
        (if (result i32)
         (local.get $$858)
         (local.get $$585)
         (local.get $$856)
        )
       )
       (local.set $$860
        (i32.add
         (local.get $$859)
         (i32.const 8)
        )
       )
       (local.set $$861
        (i32.add
         (local.get $$859)
         (i32.const 24)
        )
       )
       (local.set $$862
        (i32.add
         (local.get $$$723947$i)
         (i32.const -40)
        )
       )
       (local.set $$863
        (i32.add
         (local.get $$$748$i)
         (i32.const 8)
        )
       )
       (local.set $$864
        (local.get $$863)
       )
       (local.set $$865
        (i32.and
         (local.get $$864)
         (i32.const 7)
        )
       )
       (local.set $$866
        (i32.eq
         (local.get $$865)
         (i32.const 0)
        )
       )
       (local.set $$867
        (i32.sub
         (i32.const 0)
         (local.get $$864)
        )
       )
       (local.set $$868
        (i32.and
         (local.get $$867)
         (i32.const 7)
        )
       )
       (local.set $$869
        (if (result i32)
         (local.get $$866)
         (i32.const 0)
         (local.get $$868)
        )
       )
       (local.set $$870
        (i32.add
         (local.get $$$748$i)
         (local.get $$869)
        )
       )
       (local.set $$871
        (i32.sub
         (local.get $$862)
         (local.get $$869)
        )
       )
       (i32.store
        (i32.const 2616)
        (local.get $$870)
       )
       (i32.store
        (i32.const 2604)
        (local.get $$871)
       )
       (local.set $$872
        (i32.or
         (local.get $$871)
         (i32.const 1)
        )
       )
       (local.set $$873
        (i32.add
         (local.get $$870)
         (i32.const 4)
        )
       )
       (i32.store
        (local.get $$873)
        (local.get $$872)
       )
       (local.set $$874
        (i32.add
         (local.get $$$748$i)
         (local.get $$862)
        )
       )
       (local.set $$875
        (i32.add
         (local.get $$874)
         (i32.const 4)
        )
       )
       (i32.store
        (local.get $$875)
        (i32.const 40)
       )
       (local.set $$876
        (i32.load
         (i32.const 3080)
        )
       )
       (i32.store
        (i32.const 2620)
        (local.get $$876)
       )
       (local.set $$877
        (i32.add
         (local.get $$859)
         (i32.const 4)
        )
       )
       (i32.store
        (local.get $$877)
        (i32.const 27)
       )
       (i64.store align=4
        (local.get $$860)
        (i64.load align=4
         (i32.const 3040)
        )
       )
       (i64.store align=4
        (i32.add
         (local.get $$860)
         (i32.const 8)
        )
        (i64.load align=4
         (i32.add
          (i32.const 3040)
          (i32.const 8)
         )
        )
       )
       (i32.store
        (i32.const 3040)
        (local.get $$$748$i)
       )
       (i32.store
        (i32.const 3044)
        (local.get $$$723947$i)
       )
       (i32.store
        (i32.const 3052)
        (i32.const 0)
       )
       (i32.store
        (i32.const 3048)
        (local.get $$860)
       )
       (local.set $$879
        (local.get $$861)
       )
       (loop $while-in50
        (block $while-out49
         (local.set $$878
          (i32.add
           (local.get $$879)
           (i32.const 4)
          )
         )
         (i32.store
          (local.get $$878)
          (i32.const 7)
         )
         (local.set $$880
          (i32.add
           (local.get $$879)
           (i32.const 8)
          )
         )
         (local.set $$881
          (i32.lt_u
           (local.get $$880)
           (local.get $$844)
          )
         )
         (if
          (local.get $$881)
          (local.set $$879
           (local.get $$878)
          )
          (br $while-out49)
         )
         (br $while-in50)
        )
       )
       (local.set $$882
        (i32.eq
         (local.get $$859)
         (local.get $$585)
        )
       )
       (if
        (i32.eqz
         (local.get $$882)
        )
        (block
         (local.set $$883
          (local.get $$859)
         )
         (local.set $$884
          (local.get $$585)
         )
         (local.set $$885
          (i32.sub
           (local.get $$883)
           (local.get $$884)
          )
         )
         (local.set $$886
          (i32.load
           (local.get $$877)
          )
         )
         (local.set $$887
          (i32.and
           (local.get $$886)
           (i32.const -2)
          )
         )
         (i32.store
          (local.get $$877)
          (local.get $$887)
         )
         (local.set $$888
          (i32.or
           (local.get $$885)
           (i32.const 1)
          )
         )
         (local.set $$889
          (i32.add
           (local.get $$585)
           (i32.const 4)
          )
         )
         (i32.store
          (local.get $$889)
          (local.get $$888)
         )
         (i32.store
          (local.get $$859)
          (local.get $$885)
         )
         (local.set $$890
          (i32.shr_u
           (local.get $$885)
           (i32.const 3)
          )
         )
         (local.set $$891
          (i32.lt_u
           (local.get $$885)
           (i32.const 256)
          )
         )
         (if
          (local.get $$891)
          (block
           (local.set $$892
            (i32.shl
             (local.get $$890)
             (i32.const 1)
            )
           )
           (local.set $$893
            (i32.add
             (i32.const 2632)
             (i32.shl
              (local.get $$892)
              (i32.const 2)
             )
            )
           )
           (local.set $$894
            (i32.load
             (i32.const 2592)
            )
           )
           (local.set $$895
            (i32.shl
             (i32.const 1)
             (local.get $$890)
            )
           )
           (local.set $$896
            (i32.and
             (local.get $$894)
             (local.get $$895)
            )
           )
           (local.set $$897
            (i32.eq
             (local.get $$896)
             (i32.const 0)
            )
           )
           (if
            (local.get $$897)
            (block
             (local.set $$898
              (i32.or
               (local.get $$894)
               (local.get $$895)
              )
             )
             (i32.store
              (i32.const 2592)
              (local.get $$898)
             )
             (local.set $$$pre$i$i
              (i32.add
               (local.get $$893)
               (i32.const 8)
              )
             )
             (local.set $$$0206$i$i
              (local.get $$893)
             )
             (local.set $$$pre$phi$i$iZ2D
              (local.get $$$pre$i$i)
             )
            )
            (block
             (local.set $$899
              (i32.add
               (local.get $$893)
               (i32.const 8)
              )
             )
             (local.set $$900
              (i32.load
               (local.get $$899)
              )
             )
             (local.set $$$0206$i$i
              (local.get $$900)
             )
             (local.set $$$pre$phi$i$iZ2D
              (local.get $$899)
             )
            )
           )
           (i32.store
            (local.get $$$pre$phi$i$iZ2D)
            (local.get $$585)
           )
           (local.set $$901
            (i32.add
             (local.get $$$0206$i$i)
             (i32.const 12)
            )
           )
           (i32.store
            (local.get $$901)
            (local.get $$585)
           )
           (local.set $$902
            (i32.add
             (local.get $$585)
             (i32.const 8)
            )
           )
           (i32.store
            (local.get $$902)
            (local.get $$$0206$i$i)
           )
           (local.set $$903
            (i32.add
             (local.get $$585)
             (i32.const 12)
            )
           )
           (i32.store
            (local.get $$903)
            (local.get $$893)
           )
           (br $label$break$L215)
          )
         )
         (local.set $$904
          (i32.shr_u
           (local.get $$885)
           (i32.const 8)
          )
         )
         (local.set $$905
          (i32.eq
           (local.get $$904)
           (i32.const 0)
          )
         )
         (if
          (local.get $$905)
          (local.set $$$0207$i$i
           (i32.const 0)
          )
          (block
           (local.set $$906
            (i32.gt_u
             (local.get $$885)
             (i32.const 16777215)
            )
           )
           (if
            (local.get $$906)
            (local.set $$$0207$i$i
             (i32.const 31)
            )
            (block
             (local.set $$907
              (i32.add
               (local.get $$904)
               (i32.const 1048320)
              )
             )
             (local.set $$908
              (i32.shr_u
               (local.get $$907)
               (i32.const 16)
              )
             )
             (local.set $$909
              (i32.and
               (local.get $$908)
               (i32.const 8)
              )
             )
             (local.set $$910
              (i32.shl
               (local.get $$904)
               (local.get $$909)
              )
             )
             (local.set $$911
              (i32.add
               (local.get $$910)
               (i32.const 520192)
              )
             )
             (local.set $$912
              (i32.shr_u
               (local.get $$911)
               (i32.const 16)
              )
             )
             (local.set $$913
              (i32.and
               (local.get $$912)
               (i32.const 4)
              )
             )
             (local.set $$914
              (i32.or
               (local.get $$913)
               (local.get $$909)
              )
             )
             (local.set $$915
              (i32.shl
               (local.get $$910)
               (local.get $$913)
              )
             )
             (local.set $$916
              (i32.add
               (local.get $$915)
               (i32.const 245760)
              )
             )
             (local.set $$917
              (i32.shr_u
               (local.get $$916)
               (i32.const 16)
              )
             )
             (local.set $$918
              (i32.and
               (local.get $$917)
               (i32.const 2)
              )
             )
             (local.set $$919
              (i32.or
               (local.get $$914)
               (local.get $$918)
              )
             )
             (local.set $$920
              (i32.sub
               (i32.const 14)
               (local.get $$919)
              )
             )
             (local.set $$921
              (i32.shl
               (local.get $$915)
               (local.get $$918)
              )
             )
             (local.set $$922
              (i32.shr_u
               (local.get $$921)
               (i32.const 15)
              )
             )
             (local.set $$923
              (i32.add
               (local.get $$920)
               (local.get $$922)
              )
             )
             (local.set $$924
              (i32.shl
               (local.get $$923)
               (i32.const 1)
              )
             )
             (local.set $$925
              (i32.add
               (local.get $$923)
               (i32.const 7)
              )
             )
             (local.set $$926
              (i32.shr_u
               (local.get $$885)
               (local.get $$925)
              )
             )
             (local.set $$927
              (i32.and
               (local.get $$926)
               (i32.const 1)
              )
             )
             (local.set $$928
              (i32.or
               (local.get $$927)
               (local.get $$924)
              )
             )
             (local.set $$$0207$i$i
              (local.get $$928)
             )
            )
           )
          )
         )
         (local.set $$929
          (i32.add
           (i32.const 2896)
           (i32.shl
            (local.get $$$0207$i$i)
            (i32.const 2)
           )
          )
         )
         (local.set $$930
          (i32.add
           (local.get $$585)
           (i32.const 28)
          )
         )
         (i32.store
          (local.get $$930)
          (local.get $$$0207$i$i)
         )
         (local.set $$931
          (i32.add
           (local.get $$585)
           (i32.const 20)
          )
         )
         (i32.store
          (local.get $$931)
          (i32.const 0)
         )
         (i32.store
          (local.get $$857)
          (i32.const 0)
         )
         (local.set $$932
          (i32.load
           (i32.const 2596)
          )
         )
         (local.set $$933
          (i32.shl
           (i32.const 1)
           (local.get $$$0207$i$i)
          )
         )
         (local.set $$934
          (i32.and
           (local.get $$932)
           (local.get $$933)
          )
         )
         (local.set $$935
          (i32.eq
           (local.get $$934)
           (i32.const 0)
          )
         )
         (if
          (local.get $$935)
          (block
           (local.set $$936
            (i32.or
             (local.get $$932)
             (local.get $$933)
            )
           )
           (i32.store
            (i32.const 2596)
            (local.get $$936)
           )
           (i32.store
            (local.get $$929)
            (local.get $$585)
           )
           (local.set $$937
            (i32.add
             (local.get $$585)
             (i32.const 24)
            )
           )
           (i32.store
            (local.get $$937)
            (local.get $$929)
           )
           (local.set $$938
            (i32.add
             (local.get $$585)
             (i32.const 12)
            )
           )
           (i32.store
            (local.get $$938)
            (local.get $$585)
           )
           (local.set $$939
            (i32.add
             (local.get $$585)
             (i32.const 8)
            )
           )
           (i32.store
            (local.get $$939)
            (local.get $$585)
           )
           (br $label$break$L215)
          )
         )
         (local.set $$940
          (i32.load
           (local.get $$929)
          )
         )
         (local.set $$941
          (i32.add
           (local.get $$940)
           (i32.const 4)
          )
         )
         (local.set $$942
          (i32.load
           (local.get $$941)
          )
         )
         (local.set $$943
          (i32.and
           (local.get $$942)
           (i32.const -8)
          )
         )
         (local.set $$944
          (i32.eq
           (local.get $$943)
           (local.get $$885)
          )
         )
         (block $label$break$L325
          (if
           (local.get $$944)
           (local.set $$$0202$lcssa$i$i
            (local.get $$940)
           )
           (block
            (local.set $$945
             (i32.eq
              (local.get $$$0207$i$i)
              (i32.const 31)
             )
            )
            (local.set $$946
             (i32.shr_u
              (local.get $$$0207$i$i)
              (i32.const 1)
             )
            )
            (local.set $$947
             (i32.sub
              (i32.const 25)
              (local.get $$946)
             )
            )
            (local.set $$948
             (if (result i32)
              (local.get $$945)
              (i32.const 0)
              (local.get $$947)
             )
            )
            (local.set $$949
             (i32.shl
              (local.get $$885)
              (local.get $$948)
             )
            )
            (local.set $$$02014$i$i
             (local.get $$949)
            )
            (local.set $$$02023$i$i
             (local.get $$940)
            )
            (loop $while-in53
             (block $while-out52
              (local.set $$956
               (i32.shr_u
                (local.get $$$02014$i$i)
                (i32.const 31)
               )
              )
              (local.set $$957
               (i32.add
                (i32.add
                 (local.get $$$02023$i$i)
                 (i32.const 16)
                )
                (i32.shl
                 (local.get $$956)
                 (i32.const 2)
                )
               )
              )
              (local.set $$952
               (i32.load
                (local.get $$957)
               )
              )
              (local.set $$958
               (i32.eq
                (local.get $$952)
                (i32.const 0)
               )
              )
              (if
               (local.get $$958)
               (br $while-out52)
              )
              (local.set $$950
               (i32.shl
                (local.get $$$02014$i$i)
                (i32.const 1)
               )
              )
              (local.set $$951
               (i32.add
                (local.get $$952)
                (i32.const 4)
               )
              )
              (local.set $$953
               (i32.load
                (local.get $$951)
               )
              )
              (local.set $$954
               (i32.and
                (local.get $$953)
                (i32.const -8)
               )
              )
              (local.set $$955
               (i32.eq
                (local.get $$954)
                (local.get $$885)
               )
              )
              (if
               (local.get $$955)
               (block
                (local.set $$$0202$lcssa$i$i
                 (local.get $$952)
                )
                (br $label$break$L325)
               )
               (block
                (local.set $$$02014$i$i
                 (local.get $$950)
                )
                (local.set $$$02023$i$i
                 (local.get $$952)
                )
               )
              )
              (br $while-in53)
             )
            )
            (i32.store
             (local.get $$957)
             (local.get $$585)
            )
            (local.set $$959
             (i32.add
              (local.get $$585)
              (i32.const 24)
             )
            )
            (i32.store
             (local.get $$959)
             (local.get $$$02023$i$i)
            )
            (local.set $$960
             (i32.add
              (local.get $$585)
              (i32.const 12)
             )
            )
            (i32.store
             (local.get $$960)
             (local.get $$585)
            )
            (local.set $$961
             (i32.add
              (local.get $$585)
              (i32.const 8)
             )
            )
            (i32.store
             (local.get $$961)
             (local.get $$585)
            )
            (br $label$break$L215)
           )
          )
         )
         (local.set $$962
          (i32.add
           (local.get $$$0202$lcssa$i$i)
           (i32.const 8)
          )
         )
         (local.set $$963
          (i32.load
           (local.get $$962)
          )
         )
         (local.set $$964
          (i32.add
           (local.get $$963)
           (i32.const 12)
          )
         )
         (i32.store
          (local.get $$964)
          (local.get $$585)
         )
         (i32.store
          (local.get $$962)
          (local.get $$585)
         )
         (local.set $$965
          (i32.add
           (local.get $$585)
           (i32.const 8)
          )
         )
         (i32.store
          (local.get $$965)
          (local.get $$963)
         )
         (local.set $$966
          (i32.add
           (local.get $$585)
           (i32.const 12)
          )
         )
         (i32.store
          (local.get $$966)
          (local.get $$$0202$lcssa$i$i)
         )
         (local.set $$967
          (i32.add
           (local.get $$585)
           (i32.const 24)
          )
         )
         (i32.store
          (local.get $$967)
          (i32.const 0)
         )
        )
       )
      )
     )
    )
    (local.set $$969
     (i32.load
      (i32.const 2604)
     )
    )
    (local.set $$970
     (i32.gt_u
      (local.get $$969)
      (local.get $$$0192)
     )
    )
    (if
     (local.get $$970)
     (block
      (local.set $$971
       (i32.sub
        (local.get $$969)
        (local.get $$$0192)
       )
      )
      (i32.store
       (i32.const 2604)
       (local.get $$971)
      )
      (local.set $$972
       (i32.load
        (i32.const 2616)
       )
      )
      (local.set $$973
       (i32.add
        (local.get $$972)
        (local.get $$$0192)
       )
      )
      (i32.store
       (i32.const 2616)
       (local.get $$973)
      )
      (local.set $$974
       (i32.or
        (local.get $$971)
        (i32.const 1)
       )
      )
      (local.set $$975
       (i32.add
        (local.get $$973)
        (i32.const 4)
       )
      )
      (i32.store
       (local.get $$975)
       (local.get $$974)
      )
      (local.set $$976
       (i32.or
        (local.get $$$0192)
        (i32.const 3)
       )
      )
      (local.set $$977
       (i32.add
        (local.get $$972)
        (i32.const 4)
       )
      )
      (i32.store
       (local.get $$977)
       (local.get $$976)
      )
      (local.set $$978
       (i32.add
        (local.get $$972)
        (i32.const 8)
       )
      )
      (local.set $$$0
       (local.get $$978)
      )
      (global.set $STACKTOP
       (local.get $sp)
      )
      (return
       (local.get $$$0)
      )
     )
    )
   )
  )
  (local.set $$979
   (call $___errno_location)
  )
  (i32.store
   (local.get $$979)
   (i32.const 12)
  )
  (local.set $$$0
   (i32.const 0)
  )
  (global.set $STACKTOP
   (local.get $sp)
  )
  (return
   (local.get $$$0)
  )
 )
 (func $_free (; 35 ;) (param $$0 i32)
  (local $$$0194$i i32)
  (local $$$0194$in$i i32)
  (local $$$0346381 i32)
  (local $$$0347$lcssa i32)
  (local $$$0347380 i32)
  (local $$$0359 i32)
  (local $$$0366 i32)
  (local $$$1 i32)
  (local $$$1345 i32)
  (local $$$1350 i32)
  (local $$$1350$be i32)
  (local $$$1350$ph i32)
  (local $$$1353 i32)
  (local $$$1353$be i32)
  (local $$$1353$ph i32)
  (local $$$1361 i32)
  (local $$$1361$be i32)
  (local $$$1361$ph i32)
  (local $$$1365 i32)
  (local $$$1365$be i32)
  (local $$$1365$ph i32)
  (local $$$2 i32)
  (local $$$3 i32)
  (local $$$3363 i32)
  (local $$$pre i32)
  (local $$$pre$phiZ2D i32)
  (local $$$sink i32)
  (local $$$sink395 i32)
  (local $$1 i32)
  (local $$10 i32)
  (local $$100 i32)
  (local $$101 i32)
  (local $$102 i32)
  (local $$103 i32)
  (local $$104 i32)
  (local $$105 i32)
  (local $$106 i32)
  (local $$107 i32)
  (local $$108 i32)
  (local $$109 i32)
  (local $$11 i32)
  (local $$110 i32)
  (local $$111 i32)
  (local $$112 i32)
  (local $$113 i32)
  (local $$114 i32)
  (local $$115 i32)
  (local $$116 i32)
  (local $$117 i32)
  (local $$118 i32)
  (local $$119 i32)
  (local $$12 i32)
  (local $$120 i32)
  (local $$121 i32)
  (local $$122 i32)
  (local $$123 i32)
  (local $$124 i32)
  (local $$125 i32)
  (local $$126 i32)
  (local $$127 i32)
  (local $$128 i32)
  (local $$129 i32)
  (local $$13 i32)
  (local $$130 i32)
  (local $$131 i32)
  (local $$132 i32)
  (local $$133 i32)
  (local $$134 i32)
  (local $$135 i32)
  (local $$136 i32)
  (local $$137 i32)
  (local $$138 i32)
  (local $$139 i32)
  (local $$14 i32)
  (local $$140 i32)
  (local $$141 i32)
  (local $$142 i32)
  (local $$143 i32)
  (local $$144 i32)
  (local $$145 i32)
  (local $$146 i32)
  (local $$147 i32)
  (local $$148 i32)
  (local $$149 i32)
  (local $$15 i32)
  (local $$150 i32)
  (local $$151 i32)
  (local $$152 i32)
  (local $$153 i32)
  (local $$154 i32)
  (local $$155 i32)
  (local $$156 i32)
  (local $$157 i32)
  (local $$158 i32)
  (local $$159 i32)
  (local $$16 i32)
  (local $$160 i32)
  (local $$161 i32)
  (local $$162 i32)
  (local $$163 i32)
  (local $$164 i32)
  (local $$165 i32)
  (local $$166 i32)
  (local $$167 i32)
  (local $$168 i32)
  (local $$169 i32)
  (local $$17 i32)
  (local $$170 i32)
  (local $$171 i32)
  (local $$172 i32)
  (local $$173 i32)
  (local $$174 i32)
  (local $$175 i32)
  (local $$176 i32)
  (local $$177 i32)
  (local $$178 i32)
  (local $$179 i32)
  (local $$18 i32)
  (local $$180 i32)
  (local $$181 i32)
  (local $$182 i32)
  (local $$183 i32)
  (local $$184 i32)
  (local $$185 i32)
  (local $$186 i32)
  (local $$187 i32)
  (local $$188 i32)
  (local $$189 i32)
  (local $$19 i32)
  (local $$190 i32)
  (local $$191 i32)
  (local $$192 i32)
  (local $$193 i32)
  (local $$194 i32)
  (local $$195 i32)
  (local $$196 i32)
  (local $$197 i32)
  (local $$198 i32)
  (local $$199 i32)
  (local $$2 i32)
  (local $$20 i32)
  (local $$200 i32)
  (local $$201 i32)
  (local $$202 i32)
  (local $$203 i32)
  (local $$204 i32)
  (local $$205 i32)
  (local $$206 i32)
  (local $$207 i32)
  (local $$208 i32)
  (local $$209 i32)
  (local $$21 i32)
  (local $$210 i32)
  (local $$211 i32)
  (local $$212 i32)
  (local $$213 i32)
  (local $$214 i32)
  (local $$215 i32)
  (local $$216 i32)
  (local $$217 i32)
  (local $$218 i32)
  (local $$219 i32)
  (local $$22 i32)
  (local $$220 i32)
  (local $$221 i32)
  (local $$222 i32)
  (local $$223 i32)
  (local $$224 i32)
  (local $$225 i32)
  (local $$226 i32)
  (local $$227 i32)
  (local $$228 i32)
  (local $$229 i32)
  (local $$23 i32)
  (local $$230 i32)
  (local $$231 i32)
  (local $$232 i32)
  (local $$233 i32)
  (local $$234 i32)
  (local $$235 i32)
  (local $$236 i32)
  (local $$237 i32)
  (local $$238 i32)
  (local $$239 i32)
  (local $$24 i32)
  (local $$240 i32)
  (local $$241 i32)
  (local $$242 i32)
  (local $$243 i32)
  (local $$244 i32)
  (local $$245 i32)
  (local $$246 i32)
  (local $$247 i32)
  (local $$248 i32)
  (local $$249 i32)
  (local $$25 i32)
  (local $$250 i32)
  (local $$251 i32)
  (local $$252 i32)
  (local $$253 i32)
  (local $$254 i32)
  (local $$255 i32)
  (local $$256 i32)
  (local $$257 i32)
  (local $$258 i32)
  (local $$259 i32)
  (local $$26 i32)
  (local $$260 i32)
  (local $$261 i32)
  (local $$262 i32)
  (local $$263 i32)
  (local $$264 i32)
  (local $$27 i32)
  (local $$28 i32)
  (local $$29 i32)
  (local $$3 i32)
  (local $$30 i32)
  (local $$31 i32)
  (local $$32 i32)
  (local $$33 i32)
  (local $$34 i32)
  (local $$35 i32)
  (local $$36 i32)
  (local $$37 i32)
  (local $$38 i32)
  (local $$39 i32)
  (local $$4 i32)
  (local $$40 i32)
  (local $$41 i32)
  (local $$42 i32)
  (local $$43 i32)
  (local $$44 i32)
  (local $$45 i32)
  (local $$46 i32)
  (local $$47 i32)
  (local $$48 i32)
  (local $$49 i32)
  (local $$5 i32)
  (local $$50 i32)
  (local $$51 i32)
  (local $$52 i32)
  (local $$53 i32)
  (local $$54 i32)
  (local $$55 i32)
  (local $$56 i32)
  (local $$57 i32)
  (local $$58 i32)
  (local $$59 i32)
  (local $$6 i32)
  (local $$60 i32)
  (local $$61 i32)
  (local $$62 i32)
  (local $$63 i32)
  (local $$64 i32)
  (local $$65 i32)
  (local $$66 i32)
  (local $$67 i32)
  (local $$68 i32)
  (local $$69 i32)
  (local $$7 i32)
  (local $$70 i32)
  (local $$71 i32)
  (local $$72 i32)
  (local $$73 i32)
  (local $$74 i32)
  (local $$75 i32)
  (local $$76 i32)
  (local $$77 i32)
  (local $$78 i32)
  (local $$79 i32)
  (local $$8 i32)
  (local $$80 i32)
  (local $$81 i32)
  (local $$82 i32)
  (local $$83 i32)
  (local $$84 i32)
  (local $$85 i32)
  (local $$86 i32)
  (local $$87 i32)
  (local $$88 i32)
  (local $$89 i32)
  (local $$9 i32)
  (local $$90 i32)
  (local $$91 i32)
  (local $$92 i32)
  (local $$93 i32)
  (local $$94 i32)
  (local $$95 i32)
  (local $$96 i32)
  (local $$97 i32)
  (local $$98 i32)
  (local $$99 i32)
  (local $$cond371 i32)
  (local $$cond372 i32)
  (local $label i32)
  (local $sp i32)
  (local.set $sp
   (global.get $STACKTOP)
  )
  (local.set $$1
   (i32.eq
    (local.get $$0)
    (i32.const 0)
   )
  )
  (if
   (local.get $$1)
   (return)
  )
  (local.set $$2
   (i32.add
    (local.get $$0)
    (i32.const -8)
   )
  )
  (local.set $$3
   (i32.load
    (i32.const 2608)
   )
  )
  (local.set $$4
   (i32.add
    (local.get $$0)
    (i32.const -4)
   )
  )
  (local.set $$5
   (i32.load
    (local.get $$4)
   )
  )
  (local.set $$6
   (i32.and
    (local.get $$5)
    (i32.const -8)
   )
  )
  (local.set $$7
   (i32.add
    (local.get $$2)
    (local.get $$6)
   )
  )
  (local.set $$8
   (i32.and
    (local.get $$5)
    (i32.const 1)
   )
  )
  (local.set $$9
   (i32.eq
    (local.get $$8)
    (i32.const 0)
   )
  )
  (block $do-once
   (if
    (local.get $$9)
    (block
     (local.set $$10
      (i32.load
       (local.get $$2)
      )
     )
     (local.set $$11
      (i32.and
       (local.get $$5)
       (i32.const 3)
      )
     )
     (local.set $$12
      (i32.eq
       (local.get $$11)
       (i32.const 0)
      )
     )
     (if
      (local.get $$12)
      (return)
     )
     (local.set $$13
      (i32.sub
       (i32.const 0)
       (local.get $$10)
      )
     )
     (local.set $$14
      (i32.add
       (local.get $$2)
       (local.get $$13)
      )
     )
     (local.set $$15
      (i32.add
       (local.get $$10)
       (local.get $$6)
      )
     )
     (local.set $$16
      (i32.lt_u
       (local.get $$14)
       (local.get $$3)
      )
     )
     (if
      (local.get $$16)
      (return)
     )
     (local.set $$17
      (i32.load
       (i32.const 2612)
      )
     )
     (local.set $$18
      (i32.eq
       (local.get $$17)
       (local.get $$14)
      )
     )
     (if
      (local.get $$18)
      (block
       (local.set $$79
        (i32.add
         (local.get $$7)
         (i32.const 4)
        )
       )
       (local.set $$80
        (i32.load
         (local.get $$79)
        )
       )
       (local.set $$81
        (i32.and
         (local.get $$80)
         (i32.const 3)
        )
       )
       (local.set $$82
        (i32.eq
         (local.get $$81)
         (i32.const 3)
        )
       )
       (if
        (i32.eqz
         (local.get $$82)
        )
        (block
         (local.set $$$1
          (local.get $$14)
         )
         (local.set $$$1345
          (local.get $$15)
         )
         (local.set $$87
          (local.get $$14)
         )
         (br $do-once)
        )
       )
       (local.set $$83
        (i32.add
         (local.get $$14)
         (local.get $$15)
        )
       )
       (local.set $$84
        (i32.add
         (local.get $$14)
         (i32.const 4)
        )
       )
       (local.set $$85
        (i32.or
         (local.get $$15)
         (i32.const 1)
        )
       )
       (local.set $$86
        (i32.and
         (local.get $$80)
         (i32.const -2)
        )
       )
       (i32.store
        (i32.const 2600)
        (local.get $$15)
       )
       (i32.store
        (local.get $$79)
        (local.get $$86)
       )
       (i32.store
        (local.get $$84)
        (local.get $$85)
       )
       (i32.store
        (local.get $$83)
        (local.get $$15)
       )
       (return)
      )
     )
     (local.set $$19
      (i32.shr_u
       (local.get $$10)
       (i32.const 3)
      )
     )
     (local.set $$20
      (i32.lt_u
       (local.get $$10)
       (i32.const 256)
      )
     )
     (if
      (local.get $$20)
      (block
       (local.set $$21
        (i32.add
         (local.get $$14)
         (i32.const 8)
        )
       )
       (local.set $$22
        (i32.load
         (local.get $$21)
        )
       )
       (local.set $$23
        (i32.add
         (local.get $$14)
         (i32.const 12)
        )
       )
       (local.set $$24
        (i32.load
         (local.get $$23)
        )
       )
       (local.set $$25
        (i32.eq
         (local.get $$24)
         (local.get $$22)
        )
       )
       (if
        (local.get $$25)
        (block
         (local.set $$26
          (i32.shl
           (i32.const 1)
           (local.get $$19)
          )
         )
         (local.set $$27
          (i32.xor
           (local.get $$26)
           (i32.const -1)
          )
         )
         (local.set $$28
          (i32.load
           (i32.const 2592)
          )
         )
         (local.set $$29
          (i32.and
           (local.get $$28)
           (local.get $$27)
          )
         )
         (i32.store
          (i32.const 2592)
          (local.get $$29)
         )
         (local.set $$$1
          (local.get $$14)
         )
         (local.set $$$1345
          (local.get $$15)
         )
         (local.set $$87
          (local.get $$14)
         )
         (br $do-once)
        )
        (block
         (local.set $$30
          (i32.add
           (local.get $$22)
           (i32.const 12)
          )
         )
         (i32.store
          (local.get $$30)
          (local.get $$24)
         )
         (local.set $$31
          (i32.add
           (local.get $$24)
           (i32.const 8)
          )
         )
         (i32.store
          (local.get $$31)
          (local.get $$22)
         )
         (local.set $$$1
          (local.get $$14)
         )
         (local.set $$$1345
          (local.get $$15)
         )
         (local.set $$87
          (local.get $$14)
         )
         (br $do-once)
        )
       )
      )
     )
     (local.set $$32
      (i32.add
       (local.get $$14)
       (i32.const 24)
      )
     )
     (local.set $$33
      (i32.load
       (local.get $$32)
      )
     )
     (local.set $$34
      (i32.add
       (local.get $$14)
       (i32.const 12)
      )
     )
     (local.set $$35
      (i32.load
       (local.get $$34)
      )
     )
     (local.set $$36
      (i32.eq
       (local.get $$35)
       (local.get $$14)
      )
     )
     (block $do-once0
      (if
       (local.get $$36)
       (block
        (local.set $$41
         (i32.add
          (local.get $$14)
          (i32.const 16)
         )
        )
        (local.set $$42
         (i32.add
          (local.get $$41)
          (i32.const 4)
         )
        )
        (local.set $$43
         (i32.load
          (local.get $$42)
         )
        )
        (local.set $$44
         (i32.eq
          (local.get $$43)
          (i32.const 0)
         )
        )
        (if
         (local.get $$44)
         (block
          (local.set $$45
           (i32.load
            (local.get $$41)
           )
          )
          (local.set $$46
           (i32.eq
            (local.get $$45)
            (i32.const 0)
           )
          )
          (if
           (local.get $$46)
           (block
            (local.set $$$3
             (i32.const 0)
            )
            (br $do-once0)
           )
           (block
            (local.set $$$1350$ph
             (local.get $$45)
            )
            (local.set $$$1353$ph
             (local.get $$41)
            )
           )
          )
         )
         (block
          (local.set $$$1350$ph
           (local.get $$43)
          )
          (local.set $$$1353$ph
           (local.get $$42)
          )
         )
        )
        (local.set $$$1350
         (local.get $$$1350$ph)
        )
        (local.set $$$1353
         (local.get $$$1353$ph)
        )
        (loop $while-in
         (block $while-out
          (local.set $$47
           (i32.add
            (local.get $$$1350)
            (i32.const 20)
           )
          )
          (local.set $$48
           (i32.load
            (local.get $$47)
           )
          )
          (local.set $$49
           (i32.eq
            (local.get $$48)
            (i32.const 0)
           )
          )
          (if
           (local.get $$49)
           (block
            (local.set $$50
             (i32.add
              (local.get $$$1350)
              (i32.const 16)
             )
            )
            (local.set $$51
             (i32.load
              (local.get $$50)
             )
            )
            (local.set $$52
             (i32.eq
              (local.get $$51)
              (i32.const 0)
             )
            )
            (if
             (local.get $$52)
             (br $while-out)
             (block
              (local.set $$$1350$be
               (local.get $$51)
              )
              (local.set $$$1353$be
               (local.get $$50)
              )
             )
            )
           )
           (block
            (local.set $$$1350$be
             (local.get $$48)
            )
            (local.set $$$1353$be
             (local.get $$47)
            )
           )
          )
          (local.set $$$1350
           (local.get $$$1350$be)
          )
          (local.set $$$1353
           (local.get $$$1353$be)
          )
          (br $while-in)
         )
        )
        (i32.store
         (local.get $$$1353)
         (i32.const 0)
        )
        (local.set $$$3
         (local.get $$$1350)
        )
       )
       (block
        (local.set $$37
         (i32.add
          (local.get $$14)
          (i32.const 8)
         )
        )
        (local.set $$38
         (i32.load
          (local.get $$37)
         )
        )
        (local.set $$39
         (i32.add
          (local.get $$38)
          (i32.const 12)
         )
        )
        (i32.store
         (local.get $$39)
         (local.get $$35)
        )
        (local.set $$40
         (i32.add
          (local.get $$35)
          (i32.const 8)
         )
        )
        (i32.store
         (local.get $$40)
         (local.get $$38)
        )
        (local.set $$$3
         (local.get $$35)
        )
       )
      )
     )
     (local.set $$53
      (i32.eq
       (local.get $$33)
       (i32.const 0)
      )
     )
     (if
      (local.get $$53)
      (block
       (local.set $$$1
        (local.get $$14)
       )
       (local.set $$$1345
        (local.get $$15)
       )
       (local.set $$87
        (local.get $$14)
       )
      )
      (block
       (local.set $$54
        (i32.add
         (local.get $$14)
         (i32.const 28)
        )
       )
       (local.set $$55
        (i32.load
         (local.get $$54)
        )
       )
       (local.set $$56
        (i32.add
         (i32.const 2896)
         (i32.shl
          (local.get $$55)
          (i32.const 2)
         )
        )
       )
       (local.set $$57
        (i32.load
         (local.get $$56)
        )
       )
       (local.set $$58
        (i32.eq
         (local.get $$57)
         (local.get $$14)
        )
       )
       (if
        (local.get $$58)
        (block
         (i32.store
          (local.get $$56)
          (local.get $$$3)
         )
         (local.set $$cond371
          (i32.eq
           (local.get $$$3)
           (i32.const 0)
          )
         )
         (if
          (local.get $$cond371)
          (block
           (local.set $$59
            (i32.shl
             (i32.const 1)
             (local.get $$55)
            )
           )
           (local.set $$60
            (i32.xor
             (local.get $$59)
             (i32.const -1)
            )
           )
           (local.set $$61
            (i32.load
             (i32.const 2596)
            )
           )
           (local.set $$62
            (i32.and
             (local.get $$61)
             (local.get $$60)
            )
           )
           (i32.store
            (i32.const 2596)
            (local.get $$62)
           )
           (local.set $$$1
            (local.get $$14)
           )
           (local.set $$$1345
            (local.get $$15)
           )
           (local.set $$87
            (local.get $$14)
           )
           (br $do-once)
          )
         )
        )
        (block
         (local.set $$63
          (i32.add
           (local.get $$33)
           (i32.const 16)
          )
         )
         (local.set $$64
          (i32.load
           (local.get $$63)
          )
         )
         (local.set $$65
          (i32.eq
           (local.get $$64)
           (local.get $$14)
          )
         )
         (local.set $$66
          (i32.add
           (local.get $$33)
           (i32.const 20)
          )
         )
         (local.set $$$sink
          (if (result i32)
           (local.get $$65)
           (local.get $$63)
           (local.get $$66)
          )
         )
         (i32.store
          (local.get $$$sink)
          (local.get $$$3)
         )
         (local.set $$67
          (i32.eq
           (local.get $$$3)
           (i32.const 0)
          )
         )
         (if
          (local.get $$67)
          (block
           (local.set $$$1
            (local.get $$14)
           )
           (local.set $$$1345
            (local.get $$15)
           )
           (local.set $$87
            (local.get $$14)
           )
           (br $do-once)
          )
         )
        )
       )
       (local.set $$68
        (i32.add
         (local.get $$$3)
         (i32.const 24)
        )
       )
       (i32.store
        (local.get $$68)
        (local.get $$33)
       )
       (local.set $$69
        (i32.add
         (local.get $$14)
         (i32.const 16)
        )
       )
       (local.set $$70
        (i32.load
         (local.get $$69)
        )
       )
       (local.set $$71
        (i32.eq
         (local.get $$70)
         (i32.const 0)
        )
       )
       (if
        (i32.eqz
         (local.get $$71)
        )
        (block
         (local.set $$72
          (i32.add
           (local.get $$$3)
           (i32.const 16)
          )
         )
         (i32.store
          (local.get $$72)
          (local.get $$70)
         )
         (local.set $$73
          (i32.add
           (local.get $$70)
           (i32.const 24)
          )
         )
         (i32.store
          (local.get $$73)
          (local.get $$$3)
         )
        )
       )
       (local.set $$74
        (i32.add
         (local.get $$69)
         (i32.const 4)
        )
       )
       (local.set $$75
        (i32.load
         (local.get $$74)
        )
       )
       (local.set $$76
        (i32.eq
         (local.get $$75)
         (i32.const 0)
        )
       )
       (if
        (local.get $$76)
        (block
         (local.set $$$1
          (local.get $$14)
         )
         (local.set $$$1345
          (local.get $$15)
         )
         (local.set $$87
          (local.get $$14)
         )
        )
        (block
         (local.set $$77
          (i32.add
           (local.get $$$3)
           (i32.const 20)
          )
         )
         (i32.store
          (local.get $$77)
          (local.get $$75)
         )
         (local.set $$78
          (i32.add
           (local.get $$75)
           (i32.const 24)
          )
         )
         (i32.store
          (local.get $$78)
          (local.get $$$3)
         )
         (local.set $$$1
          (local.get $$14)
         )
         (local.set $$$1345
          (local.get $$15)
         )
         (local.set $$87
          (local.get $$14)
         )
        )
       )
      )
     )
    )
    (block
     (local.set $$$1
      (local.get $$2)
     )
     (local.set $$$1345
      (local.get $$6)
     )
     (local.set $$87
      (local.get $$2)
     )
    )
   )
  )
  (local.set $$88
   (i32.lt_u
    (local.get $$87)
    (local.get $$7)
   )
  )
  (if
   (i32.eqz
    (local.get $$88)
   )
   (return)
  )
  (local.set $$89
   (i32.add
    (local.get $$7)
    (i32.const 4)
   )
  )
  (local.set $$90
   (i32.load
    (local.get $$89)
   )
  )
  (local.set $$91
   (i32.and
    (local.get $$90)
    (i32.const 1)
   )
  )
  (local.set $$92
   (i32.eq
    (local.get $$91)
    (i32.const 0)
   )
  )
  (if
   (local.get $$92)
   (return)
  )
  (local.set $$93
   (i32.and
    (local.get $$90)
    (i32.const 2)
   )
  )
  (local.set $$94
   (i32.eq
    (local.get $$93)
    (i32.const 0)
   )
  )
  (if
   (local.get $$94)
   (block
    (local.set $$95
     (i32.load
      (i32.const 2616)
     )
    )
    (local.set $$96
     (i32.eq
      (local.get $$95)
      (local.get $$7)
     )
    )
    (if
     (local.get $$96)
     (block
      (local.set $$97
       (i32.load
        (i32.const 2604)
       )
      )
      (local.set $$98
       (i32.add
        (local.get $$97)
        (local.get $$$1345)
       )
      )
      (i32.store
       (i32.const 2604)
       (local.get $$98)
      )
      (i32.store
       (i32.const 2616)
       (local.get $$$1)
      )
      (local.set $$99
       (i32.or
        (local.get $$98)
        (i32.const 1)
       )
      )
      (local.set $$100
       (i32.add
        (local.get $$$1)
        (i32.const 4)
       )
      )
      (i32.store
       (local.get $$100)
       (local.get $$99)
      )
      (local.set $$101
       (i32.load
        (i32.const 2612)
       )
      )
      (local.set $$102
       (i32.eq
        (local.get $$$1)
        (local.get $$101)
       )
      )
      (if
       (i32.eqz
        (local.get $$102)
       )
       (return)
      )
      (i32.store
       (i32.const 2612)
       (i32.const 0)
      )
      (i32.store
       (i32.const 2600)
       (i32.const 0)
      )
      (return)
     )
    )
    (local.set $$103
     (i32.load
      (i32.const 2612)
     )
    )
    (local.set $$104
     (i32.eq
      (local.get $$103)
      (local.get $$7)
     )
    )
    (if
     (local.get $$104)
     (block
      (local.set $$105
       (i32.load
        (i32.const 2600)
       )
      )
      (local.set $$106
       (i32.add
        (local.get $$105)
        (local.get $$$1345)
       )
      )
      (i32.store
       (i32.const 2600)
       (local.get $$106)
      )
      (i32.store
       (i32.const 2612)
       (local.get $$87)
      )
      (local.set $$107
       (i32.or
        (local.get $$106)
        (i32.const 1)
       )
      )
      (local.set $$108
       (i32.add
        (local.get $$$1)
        (i32.const 4)
       )
      )
      (i32.store
       (local.get $$108)
       (local.get $$107)
      )
      (local.set $$109
       (i32.add
        (local.get $$87)
        (local.get $$106)
       )
      )
      (i32.store
       (local.get $$109)
       (local.get $$106)
      )
      (return)
     )
    )
    (local.set $$110
     (i32.and
      (local.get $$90)
      (i32.const -8)
     )
    )
    (local.set $$111
     (i32.add
      (local.get $$110)
      (local.get $$$1345)
     )
    )
    (local.set $$112
     (i32.shr_u
      (local.get $$90)
      (i32.const 3)
     )
    )
    (local.set $$113
     (i32.lt_u
      (local.get $$90)
      (i32.const 256)
     )
    )
    (block $do-once2
     (if
      (local.get $$113)
      (block
       (local.set $$114
        (i32.add
         (local.get $$7)
         (i32.const 8)
        )
       )
       (local.set $$115
        (i32.load
         (local.get $$114)
        )
       )
       (local.set $$116
        (i32.add
         (local.get $$7)
         (i32.const 12)
        )
       )
       (local.set $$117
        (i32.load
         (local.get $$116)
        )
       )
       (local.set $$118
        (i32.eq
         (local.get $$117)
         (local.get $$115)
        )
       )
       (if
        (local.get $$118)
        (block
         (local.set $$119
          (i32.shl
           (i32.const 1)
           (local.get $$112)
          )
         )
         (local.set $$120
          (i32.xor
           (local.get $$119)
           (i32.const -1)
          )
         )
         (local.set $$121
          (i32.load
           (i32.const 2592)
          )
         )
         (local.set $$122
          (i32.and
           (local.get $$121)
           (local.get $$120)
          )
         )
         (i32.store
          (i32.const 2592)
          (local.get $$122)
         )
         (br $do-once2)
        )
        (block
         (local.set $$123
          (i32.add
           (local.get $$115)
           (i32.const 12)
          )
         )
         (i32.store
          (local.get $$123)
          (local.get $$117)
         )
         (local.set $$124
          (i32.add
           (local.get $$117)
           (i32.const 8)
          )
         )
         (i32.store
          (local.get $$124)
          (local.get $$115)
         )
         (br $do-once2)
        )
       )
      )
      (block
       (local.set $$125
        (i32.add
         (local.get $$7)
         (i32.const 24)
        )
       )
       (local.set $$126
        (i32.load
         (local.get $$125)
        )
       )
       (local.set $$127
        (i32.add
         (local.get $$7)
         (i32.const 12)
        )
       )
       (local.set $$128
        (i32.load
         (local.get $$127)
        )
       )
       (local.set $$129
        (i32.eq
         (local.get $$128)
         (local.get $$7)
        )
       )
       (block $do-once4
        (if
         (local.get $$129)
         (block
          (local.set $$134
           (i32.add
            (local.get $$7)
            (i32.const 16)
           )
          )
          (local.set $$135
           (i32.add
            (local.get $$134)
            (i32.const 4)
           )
          )
          (local.set $$136
           (i32.load
            (local.get $$135)
           )
          )
          (local.set $$137
           (i32.eq
            (local.get $$136)
            (i32.const 0)
           )
          )
          (if
           (local.get $$137)
           (block
            (local.set $$138
             (i32.load
              (local.get $$134)
             )
            )
            (local.set $$139
             (i32.eq
              (local.get $$138)
              (i32.const 0)
             )
            )
            (if
             (local.get $$139)
             (block
              (local.set $$$3363
               (i32.const 0)
              )
              (br $do-once4)
             )
             (block
              (local.set $$$1361$ph
               (local.get $$138)
              )
              (local.set $$$1365$ph
               (local.get $$134)
              )
             )
            )
           )
           (block
            (local.set $$$1361$ph
             (local.get $$136)
            )
            (local.set $$$1365$ph
             (local.get $$135)
            )
           )
          )
          (local.set $$$1361
           (local.get $$$1361$ph)
          )
          (local.set $$$1365
           (local.get $$$1365$ph)
          )
          (loop $while-in7
           (block $while-out6
            (local.set $$140
             (i32.add
              (local.get $$$1361)
              (i32.const 20)
             )
            )
            (local.set $$141
             (i32.load
              (local.get $$140)
             )
            )
            (local.set $$142
             (i32.eq
              (local.get $$141)
              (i32.const 0)
             )
            )
            (if
             (local.get $$142)
             (block
              (local.set $$143
               (i32.add
                (local.get $$$1361)
                (i32.const 16)
               )
              )
              (local.set $$144
               (i32.load
                (local.get $$143)
               )
              )
              (local.set $$145
               (i32.eq
                (local.get $$144)
                (i32.const 0)
               )
              )
              (if
               (local.get $$145)
               (br $while-out6)
               (block
                (local.set $$$1361$be
                 (local.get $$144)
                )
                (local.set $$$1365$be
                 (local.get $$143)
                )
               )
              )
             )
             (block
              (local.set $$$1361$be
               (local.get $$141)
              )
              (local.set $$$1365$be
               (local.get $$140)
              )
             )
            )
            (local.set $$$1361
             (local.get $$$1361$be)
            )
            (local.set $$$1365
             (local.get $$$1365$be)
            )
            (br $while-in7)
           )
          )
          (i32.store
           (local.get $$$1365)
           (i32.const 0)
          )
          (local.set $$$3363
           (local.get $$$1361)
          )
         )
         (block
          (local.set $$130
           (i32.add
            (local.get $$7)
            (i32.const 8)
           )
          )
          (local.set $$131
           (i32.load
            (local.get $$130)
           )
          )
          (local.set $$132
           (i32.add
            (local.get $$131)
            (i32.const 12)
           )
          )
          (i32.store
           (local.get $$132)
           (local.get $$128)
          )
          (local.set $$133
           (i32.add
            (local.get $$128)
            (i32.const 8)
           )
          )
          (i32.store
           (local.get $$133)
           (local.get $$131)
          )
          (local.set $$$3363
           (local.get $$128)
          )
         )
        )
       )
       (local.set $$146
        (i32.eq
         (local.get $$126)
         (i32.const 0)
        )
       )
       (if
        (i32.eqz
         (local.get $$146)
        )
        (block
         (local.set $$147
          (i32.add
           (local.get $$7)
           (i32.const 28)
          )
         )
         (local.set $$148
          (i32.load
           (local.get $$147)
          )
         )
         (local.set $$149
          (i32.add
           (i32.const 2896)
           (i32.shl
            (local.get $$148)
            (i32.const 2)
           )
          )
         )
         (local.set $$150
          (i32.load
           (local.get $$149)
          )
         )
         (local.set $$151
          (i32.eq
           (local.get $$150)
           (local.get $$7)
          )
         )
         (if
          (local.get $$151)
          (block
           (i32.store
            (local.get $$149)
            (local.get $$$3363)
           )
           (local.set $$cond372
            (i32.eq
             (local.get $$$3363)
             (i32.const 0)
            )
           )
           (if
            (local.get $$cond372)
            (block
             (local.set $$152
              (i32.shl
               (i32.const 1)
               (local.get $$148)
              )
             )
             (local.set $$153
              (i32.xor
               (local.get $$152)
               (i32.const -1)
              )
             )
             (local.set $$154
              (i32.load
               (i32.const 2596)
              )
             )
             (local.set $$155
              (i32.and
               (local.get $$154)
               (local.get $$153)
              )
             )
             (i32.store
              (i32.const 2596)
              (local.get $$155)
             )
             (br $do-once2)
            )
           )
          )
          (block
           (local.set $$156
            (i32.add
             (local.get $$126)
             (i32.const 16)
            )
           )
           (local.set $$157
            (i32.load
             (local.get $$156)
            )
           )
           (local.set $$158
            (i32.eq
             (local.get $$157)
             (local.get $$7)
            )
           )
           (local.set $$159
            (i32.add
             (local.get $$126)
             (i32.const 20)
            )
           )
           (local.set $$$sink395
            (if (result i32)
             (local.get $$158)
             (local.get $$156)
             (local.get $$159)
            )
           )
           (i32.store
            (local.get $$$sink395)
            (local.get $$$3363)
           )
           (local.set $$160
            (i32.eq
             (local.get $$$3363)
             (i32.const 0)
            )
           )
           (if
            (local.get $$160)
            (br $do-once2)
           )
          )
         )
         (local.set $$161
          (i32.add
           (local.get $$$3363)
           (i32.const 24)
          )
         )
         (i32.store
          (local.get $$161)
          (local.get $$126)
         )
         (local.set $$162
          (i32.add
           (local.get $$7)
           (i32.const 16)
          )
         )
         (local.set $$163
          (i32.load
           (local.get $$162)
          )
         )
         (local.set $$164
          (i32.eq
           (local.get $$163)
           (i32.const 0)
          )
         )
         (if
          (i32.eqz
           (local.get $$164)
          )
          (block
           (local.set $$165
            (i32.add
             (local.get $$$3363)
             (i32.const 16)
            )
           )
           (i32.store
            (local.get $$165)
            (local.get $$163)
           )
           (local.set $$166
            (i32.add
             (local.get $$163)
             (i32.const 24)
            )
           )
           (i32.store
            (local.get $$166)
            (local.get $$$3363)
           )
          )
         )
         (local.set $$167
          (i32.add
           (local.get $$162)
           (i32.const 4)
          )
         )
         (local.set $$168
          (i32.load
           (local.get $$167)
          )
         )
         (local.set $$169
          (i32.eq
           (local.get $$168)
           (i32.const 0)
          )
         )
         (if
          (i32.eqz
           (local.get $$169)
          )
          (block
           (local.set $$170
            (i32.add
             (local.get $$$3363)
             (i32.const 20)
            )
           )
           (i32.store
            (local.get $$170)
            (local.get $$168)
           )
           (local.set $$171
            (i32.add
             (local.get $$168)
             (i32.const 24)
            )
           )
           (i32.store
            (local.get $$171)
            (local.get $$$3363)
           )
          )
         )
        )
       )
      )
     )
    )
    (local.set $$172
     (i32.or
      (local.get $$111)
      (i32.const 1)
     )
    )
    (local.set $$173
     (i32.add
      (local.get $$$1)
      (i32.const 4)
     )
    )
    (i32.store
     (local.get $$173)
     (local.get $$172)
    )
    (local.set $$174
     (i32.add
      (local.get $$87)
      (local.get $$111)
     )
    )
    (i32.store
     (local.get $$174)
     (local.get $$111)
    )
    (local.set $$175
     (i32.load
      (i32.const 2612)
     )
    )
    (local.set $$176
     (i32.eq
      (local.get $$$1)
      (local.get $$175)
     )
    )
    (if
     (local.get $$176)
     (block
      (i32.store
       (i32.const 2600)
       (local.get $$111)
      )
      (return)
     )
     (local.set $$$2
      (local.get $$111)
     )
    )
   )
   (block
    (local.set $$177
     (i32.and
      (local.get $$90)
      (i32.const -2)
     )
    )
    (i32.store
     (local.get $$89)
     (local.get $$177)
    )
    (local.set $$178
     (i32.or
      (local.get $$$1345)
      (i32.const 1)
     )
    )
    (local.set $$179
     (i32.add
      (local.get $$$1)
      (i32.const 4)
     )
    )
    (i32.store
     (local.get $$179)
     (local.get $$178)
    )
    (local.set $$180
     (i32.add
      (local.get $$87)
      (local.get $$$1345)
     )
    )
    (i32.store
     (local.get $$180)
     (local.get $$$1345)
    )
    (local.set $$$2
     (local.get $$$1345)
    )
   )
  )
  (local.set $$181
   (i32.shr_u
    (local.get $$$2)
    (i32.const 3)
   )
  )
  (local.set $$182
   (i32.lt_u
    (local.get $$$2)
    (i32.const 256)
   )
  )
  (if
   (local.get $$182)
   (block
    (local.set $$183
     (i32.shl
      (local.get $$181)
      (i32.const 1)
     )
    )
    (local.set $$184
     (i32.add
      (i32.const 2632)
      (i32.shl
       (local.get $$183)
       (i32.const 2)
      )
     )
    )
    (local.set $$185
     (i32.load
      (i32.const 2592)
     )
    )
    (local.set $$186
     (i32.shl
      (i32.const 1)
      (local.get $$181)
     )
    )
    (local.set $$187
     (i32.and
      (local.get $$185)
      (local.get $$186)
     )
    )
    (local.set $$188
     (i32.eq
      (local.get $$187)
      (i32.const 0)
     )
    )
    (if
     (local.get $$188)
     (block
      (local.set $$189
       (i32.or
        (local.get $$185)
        (local.get $$186)
       )
      )
      (i32.store
       (i32.const 2592)
       (local.get $$189)
      )
      (local.set $$$pre
       (i32.add
        (local.get $$184)
        (i32.const 8)
       )
      )
      (local.set $$$0366
       (local.get $$184)
      )
      (local.set $$$pre$phiZ2D
       (local.get $$$pre)
      )
     )
     (block
      (local.set $$190
       (i32.add
        (local.get $$184)
        (i32.const 8)
       )
      )
      (local.set $$191
       (i32.load
        (local.get $$190)
       )
      )
      (local.set $$$0366
       (local.get $$191)
      )
      (local.set $$$pre$phiZ2D
       (local.get $$190)
      )
     )
    )
    (i32.store
     (local.get $$$pre$phiZ2D)
     (local.get $$$1)
    )
    (local.set $$192
     (i32.add
      (local.get $$$0366)
      (i32.const 12)
     )
    )
    (i32.store
     (local.get $$192)
     (local.get $$$1)
    )
    (local.set $$193
     (i32.add
      (local.get $$$1)
      (i32.const 8)
     )
    )
    (i32.store
     (local.get $$193)
     (local.get $$$0366)
    )
    (local.set $$194
     (i32.add
      (local.get $$$1)
      (i32.const 12)
     )
    )
    (i32.store
     (local.get $$194)
     (local.get $$184)
    )
    (return)
   )
  )
  (local.set $$195
   (i32.shr_u
    (local.get $$$2)
    (i32.const 8)
   )
  )
  (local.set $$196
   (i32.eq
    (local.get $$195)
    (i32.const 0)
   )
  )
  (if
   (local.get $$196)
   (local.set $$$0359
    (i32.const 0)
   )
   (block
    (local.set $$197
     (i32.gt_u
      (local.get $$$2)
      (i32.const 16777215)
     )
    )
    (if
     (local.get $$197)
     (local.set $$$0359
      (i32.const 31)
     )
     (block
      (local.set $$198
       (i32.add
        (local.get $$195)
        (i32.const 1048320)
       )
      )
      (local.set $$199
       (i32.shr_u
        (local.get $$198)
        (i32.const 16)
       )
      )
      (local.set $$200
       (i32.and
        (local.get $$199)
        (i32.const 8)
       )
      )
      (local.set $$201
       (i32.shl
        (local.get $$195)
        (local.get $$200)
       )
      )
      (local.set $$202
       (i32.add
        (local.get $$201)
        (i32.const 520192)
       )
      )
      (local.set $$203
       (i32.shr_u
        (local.get $$202)
        (i32.const 16)
       )
      )
      (local.set $$204
       (i32.and
        (local.get $$203)
        (i32.const 4)
       )
      )
      (local.set $$205
       (i32.or
        (local.get $$204)
        (local.get $$200)
       )
      )
      (local.set $$206
       (i32.shl
        (local.get $$201)
        (local.get $$204)
       )
      )
      (local.set $$207
       (i32.add
        (local.get $$206)
        (i32.const 245760)
       )
      )
      (local.set $$208
       (i32.shr_u
        (local.get $$207)
        (i32.const 16)
       )
      )
      (local.set $$209
       (i32.and
        (local.get $$208)
        (i32.const 2)
       )
      )
      (local.set $$210
       (i32.or
        (local.get $$205)
        (local.get $$209)
       )
      )
      (local.set $$211
       (i32.sub
        (i32.const 14)
        (local.get $$210)
       )
      )
      (local.set $$212
       (i32.shl
        (local.get $$206)
        (local.get $$209)
       )
      )
      (local.set $$213
       (i32.shr_u
        (local.get $$212)
        (i32.const 15)
       )
      )
      (local.set $$214
       (i32.add
        (local.get $$211)
        (local.get $$213)
       )
      )
      (local.set $$215
       (i32.shl
        (local.get $$214)
        (i32.const 1)
       )
      )
      (local.set $$216
       (i32.add
        (local.get $$214)
        (i32.const 7)
       )
      )
      (local.set $$217
       (i32.shr_u
        (local.get $$$2)
        (local.get $$216)
       )
      )
      (local.set $$218
       (i32.and
        (local.get $$217)
        (i32.const 1)
       )
      )
      (local.set $$219
       (i32.or
        (local.get $$218)
        (local.get $$215)
       )
      )
      (local.set $$$0359
       (local.get $$219)
      )
     )
    )
   )
  )
  (local.set $$220
   (i32.add
    (i32.const 2896)
    (i32.shl
     (local.get $$$0359)
     (i32.const 2)
    )
   )
  )
  (local.set $$221
   (i32.add
    (local.get $$$1)
    (i32.const 28)
   )
  )
  (i32.store
   (local.get $$221)
   (local.get $$$0359)
  )
  (local.set $$222
   (i32.add
    (local.get $$$1)
    (i32.const 16)
   )
  )
  (local.set $$223
   (i32.add
    (local.get $$$1)
    (i32.const 20)
   )
  )
  (i32.store
   (local.get $$223)
   (i32.const 0)
  )
  (i32.store
   (local.get $$222)
   (i32.const 0)
  )
  (local.set $$224
   (i32.load
    (i32.const 2596)
   )
  )
  (local.set $$225
   (i32.shl
    (i32.const 1)
    (local.get $$$0359)
   )
  )
  (local.set $$226
   (i32.and
    (local.get $$224)
    (local.get $$225)
   )
  )
  (local.set $$227
   (i32.eq
    (local.get $$226)
    (i32.const 0)
   )
  )
  (block $label$break$L112
   (if
    (local.get $$227)
    (block
     (local.set $$228
      (i32.or
       (local.get $$224)
       (local.get $$225)
      )
     )
     (i32.store
      (i32.const 2596)
      (local.get $$228)
     )
     (i32.store
      (local.get $$220)
      (local.get $$$1)
     )
     (local.set $$229
      (i32.add
       (local.get $$$1)
       (i32.const 24)
      )
     )
     (i32.store
      (local.get $$229)
      (local.get $$220)
     )
     (local.set $$230
      (i32.add
       (local.get $$$1)
       (i32.const 12)
      )
     )
     (i32.store
      (local.get $$230)
      (local.get $$$1)
     )
     (local.set $$231
      (i32.add
       (local.get $$$1)
       (i32.const 8)
      )
     )
     (i32.store
      (local.get $$231)
      (local.get $$$1)
     )
    )
    (block
     (local.set $$232
      (i32.load
       (local.get $$220)
      )
     )
     (local.set $$233
      (i32.add
       (local.get $$232)
       (i32.const 4)
      )
     )
     (local.set $$234
      (i32.load
       (local.get $$233)
      )
     )
     (local.set $$235
      (i32.and
       (local.get $$234)
       (i32.const -8)
      )
     )
     (local.set $$236
      (i32.eq
       (local.get $$235)
       (local.get $$$2)
      )
     )
     (block $label$break$L115
      (if
       (local.get $$236)
       (local.set $$$0347$lcssa
        (local.get $$232)
       )
       (block
        (local.set $$237
         (i32.eq
          (local.get $$$0359)
          (i32.const 31)
         )
        )
        (local.set $$238
         (i32.shr_u
          (local.get $$$0359)
          (i32.const 1)
         )
        )
        (local.set $$239
         (i32.sub
          (i32.const 25)
          (local.get $$238)
         )
        )
        (local.set $$240
         (if (result i32)
          (local.get $$237)
          (i32.const 0)
          (local.get $$239)
         )
        )
        (local.set $$241
         (i32.shl
          (local.get $$$2)
          (local.get $$240)
         )
        )
        (local.set $$$0346381
         (local.get $$241)
        )
        (local.set $$$0347380
         (local.get $$232)
        )
        (loop $while-in11
         (block $while-out10
          (local.set $$248
           (i32.shr_u
            (local.get $$$0346381)
            (i32.const 31)
           )
          )
          (local.set $$249
           (i32.add
            (i32.add
             (local.get $$$0347380)
             (i32.const 16)
            )
            (i32.shl
             (local.get $$248)
             (i32.const 2)
            )
           )
          )
          (local.set $$244
           (i32.load
            (local.get $$249)
           )
          )
          (local.set $$250
           (i32.eq
            (local.get $$244)
            (i32.const 0)
           )
          )
          (if
           (local.get $$250)
           (br $while-out10)
          )
          (local.set $$242
           (i32.shl
            (local.get $$$0346381)
            (i32.const 1)
           )
          )
          (local.set $$243
           (i32.add
            (local.get $$244)
            (i32.const 4)
           )
          )
          (local.set $$245
           (i32.load
            (local.get $$243)
           )
          )
          (local.set $$246
           (i32.and
            (local.get $$245)
            (i32.const -8)
           )
          )
          (local.set $$247
           (i32.eq
            (local.get $$246)
            (local.get $$$2)
           )
          )
          (if
           (local.get $$247)
           (block
            (local.set $$$0347$lcssa
             (local.get $$244)
            )
            (br $label$break$L115)
           )
           (block
            (local.set $$$0346381
             (local.get $$242)
            )
            (local.set $$$0347380
             (local.get $$244)
            )
           )
          )
          (br $while-in11)
         )
        )
        (i32.store
         (local.get $$249)
         (local.get $$$1)
        )
        (local.set $$251
         (i32.add
          (local.get $$$1)
          (i32.const 24)
         )
        )
        (i32.store
         (local.get $$251)
         (local.get $$$0347380)
        )
        (local.set $$252
         (i32.add
          (local.get $$$1)
          (i32.const 12)
         )
        )
        (i32.store
         (local.get $$252)
         (local.get $$$1)
        )
        (local.set $$253
         (i32.add
          (local.get $$$1)
          (i32.const 8)
         )
        )
        (i32.store
         (local.get $$253)
         (local.get $$$1)
        )
        (br $label$break$L112)
       )
      )
     )
     (local.set $$254
      (i32.add
       (local.get $$$0347$lcssa)
       (i32.const 8)
      )
     )
     (local.set $$255
      (i32.load
       (local.get $$254)
      )
     )
     (local.set $$256
      (i32.add
       (local.get $$255)
       (i32.const 12)
      )
     )
     (i32.store
      (local.get $$256)
      (local.get $$$1)
     )
     (i32.store
      (local.get $$254)
      (local.get $$$1)
     )
     (local.set $$257
      (i32.add
       (local.get $$$1)
       (i32.const 8)
      )
     )
     (i32.store
      (local.get $$257)
      (local.get $$255)
     )
     (local.set $$258
      (i32.add
       (local.get $$$1)
       (i32.const 12)
      )
     )
     (i32.store
      (local.get $$258)
      (local.get $$$0347$lcssa)
     )
     (local.set $$259
      (i32.add
       (local.get $$$1)
       (i32.const 24)
      )
     )
     (i32.store
      (local.get $$259)
      (i32.const 0)
     )
    )
   )
  )
  (local.set $$260
   (i32.load
    (i32.const 2624)
   )
  )
  (local.set $$261
   (i32.add
    (local.get $$260)
    (i32.const -1)
   )
  )
  (i32.store
   (i32.const 2624)
   (local.get $$261)
  )
  (local.set $$262
   (i32.eq
    (local.get $$261)
    (i32.const 0)
   )
  )
  (if
   (i32.eqz
    (local.get $$262)
   )
   (return)
  )
  (local.set $$$0194$in$i
   (i32.const 3048)
  )
  (loop $while-in13
   (block $while-out12
    (local.set $$$0194$i
     (i32.load
      (local.get $$$0194$in$i)
     )
    )
    (local.set $$263
     (i32.eq
      (local.get $$$0194$i)
      (i32.const 0)
     )
    )
    (local.set $$264
     (i32.add
      (local.get $$$0194$i)
      (i32.const 8)
     )
    )
    (if
     (local.get $$263)
     (br $while-out12)
     (local.set $$$0194$in$i
      (local.get $$264)
     )
    )
    (br $while-in13)
   )
  )
  (i32.store
   (i32.const 2624)
   (i32.const -1)
  )
  (return)
 )
 (func $_memcpy (; 36 ;) (param $dest i32) (param $src i32) (param $num i32) (result i32)
  (local $ret i32)
  (local $aligned_dest_end i32)
  (local $block_aligned_dest_end i32)
  (local $dest_end i32)
  (if
   (i32.ge_s
    (local.get $num)
    (i32.const 8192)
   )
   (block
    (drop
     (call $_emscripten_memcpy_big
      (local.get $dest)
      (local.get $src)
      (local.get $num)
     )
    )
    (return
     (local.get $dest)
    )
   )
  )
  (local.set $ret
   (local.get $dest)
  )
  (local.set $dest_end
   (i32.add
    (local.get $dest)
    (local.get $num)
   )
  )
  (if
   (i32.eq
    (i32.and
     (local.get $dest)
     (i32.const 3)
    )
    (i32.and
     (local.get $src)
     (i32.const 3)
    )
   )
   (block
    (loop $while-in
     (block $while-out
      (if
       (i32.eqz
        (i32.and
         (local.get $dest)
         (i32.const 3)
        )
       )
       (br $while-out)
      )
      (block
       (if
        (i32.eq
         (local.get $num)
         (i32.const 0)
        )
        (return
         (local.get $ret)
        )
       )
       (i32.store8
        (local.get $dest)
        (i32.load8_s
         (local.get $src)
        )
       )
       (local.set $dest
        (i32.add
         (local.get $dest)
         (i32.const 1)
        )
       )
       (local.set $src
        (i32.add
         (local.get $src)
         (i32.const 1)
        )
       )
       (local.set $num
        (i32.sub
         (local.get $num)
         (i32.const 1)
        )
       )
      )
      (br $while-in)
     )
    )
    (local.set $aligned_dest_end
     (i32.and
      (local.get $dest_end)
      (i32.const -4)
     )
    )
    (local.set $block_aligned_dest_end
     (i32.sub
      (local.get $aligned_dest_end)
      (i32.const 64)
     )
    )
    (loop $while-in1
     (block $while-out0
      (if
       (i32.eqz
        (i32.le_s
         (local.get $dest)
         (local.get $block_aligned_dest_end)
        )
       )
       (br $while-out0)
      )
      (block
       (i32.store
        (local.get $dest)
        (i32.load
         (local.get $src)
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 4)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 4)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 8)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 8)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 12)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 12)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 16)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 16)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 20)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 20)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 24)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 24)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 28)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 28)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 32)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 32)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 36)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 36)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 40)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 40)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 44)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 44)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 48)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 48)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 52)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 52)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 56)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 56)
         )
        )
       )
       (i32.store
        (i32.add
         (local.get $dest)
         (i32.const 60)
        )
        (i32.load
         (i32.add
          (local.get $src)
          (i32.const 60)
         )
        )
       )
       (local.set $dest
        (i32.add
         (local.get $dest)
         (i32.const 64)
        )
       )
       (local.set $src
        (i32.add
         (local.get $src)
         (i32.const 64)
        )
       )
      )
      (br $while-in1)
     )
    )
    (loop $while-in3
     (block $while-out2
      (if
       (i32.eqz
        (i32.lt_s
         (local.get $dest)
         (local.get $aligned_dest_end)
        )
       )
       (br $while-out2)
      )
      (block
       (i32.store
        (local.get $dest)
        (i32.load
         (local.get $src)
        )
       )
       (local.set $dest
        (i32.add
         (local.get $dest)
         (i32.const 4)
        )
       )
       (local.set $src
        (i32.add
         (local.get $src)
         (i32.const 4)
        )
       )
      )
      (br $while-in3)
     )
    )
   )
   (block
    (local.set $aligned_dest_end
     (i32.sub
      (local.get $dest_end)
      (i32.const 4)
     )
    )
    (loop $while-in5
     (block $while-out4
      (if
       (i32.eqz
        (i32.lt_s
         (local.get $dest)
         (local.get $aligned_dest_end)
        )
       )
       (br $while-out4)
      )
      (block
       (i32.store8
        (local.get $dest)
        (i32.load8_s
         (local.get $src)
        )
       )
       (i32.store8
        (i32.add
         (local.get $dest)
         (i32.const 1)
        )
        (i32.load8_s
         (i32.add
          (local.get $src)
          (i32.const 1)
         )
        )
       )
       (i32.store8
        (i32.add
         (local.get $dest)
         (i32.const 2)
        )
        (i32.load8_s
         (i32.add
          (local.get $src)
          (i32.const 2)
         )
        )
       )
       (i32.store8
        (i32.add
         (local.get $dest)
         (i32.const 3)
        )
        (i32.load8_s
         (i32.add
          (local.get $src)
          (i32.const 3)
         )
        )
       )
       (local.set $dest
        (i32.add
         (local.get $dest)
         (i32.const 4)
        )
       )
       (local.set $src
        (i32.add
         (local.get $src)
         (i32.const 4)
        )
       )
      )
      (br $while-in5)
     )
    )
   )
  )
  (loop $while-in7
   (block $while-out6
    (if
     (i32.eqz
      (i32.lt_s
       (local.get $dest)
       (local.get $dest_end)
      )
     )
     (br $while-out6)
    )
    (block
     (i32.store8
      (local.get $dest)
      (i32.load8_s
       (local.get $src)
      )
     )
     (local.set $dest
      (i32.add
       (local.get $dest)
       (i32.const 1)
      )
     )
     (local.set $src
      (i32.add
       (local.get $src)
       (i32.const 1)
      )
     )
    )
    (br $while-in7)
   )
  )
  (return
   (local.get $ret)
  )
 )
 (func $_memset (; 37 ;) (param $ptr i32) (param $value i32) (param $num i32) (result i32)
  (local $end i32)
  (local $aligned_end i32)
  (local $block_aligned_end i32)
  (local $value4 i32)
  (local.set $end
   (i32.add
    (local.get $ptr)
    (local.get $num)
   )
  )
  (local.set $value
   (i32.and
    (local.get $value)
    (i32.const 255)
   )
  )
  (if
   (i32.ge_s
    (local.get $num)
    (i32.const 67)
   )
   (block
    (loop $while-in
     (block $while-out
      (if
       (i32.eqz
        (i32.ne
         (i32.and
          (local.get $ptr)
          (i32.const 3)
         )
         (i32.const 0)
        )
       )
       (br $while-out)
      )
      (block
       (i32.store8
        (local.get $ptr)
        (local.get $value)
       )
       (local.set $ptr
        (i32.add
         (local.get $ptr)
         (i32.const 1)
        )
       )
      )
      (br $while-in)
     )
    )
    (local.set $aligned_end
     (i32.and
      (local.get $end)
      (i32.const -4)
     )
    )
    (local.set $value4
     (i32.or
      (i32.or
       (i32.or
        (local.get $value)
        (i32.shl
         (local.get $value)
         (i32.const 8)
        )
       )
       (i32.shl
        (local.get $value)
        (i32.const 16)
       )
      )
      (i32.shl
       (local.get $value)
       (i32.const 24)
      )
     )
    )
    (local.set $block_aligned_end
     (i32.sub
      (local.get $aligned_end)
      (i32.const 64)
     )
    )
    (loop $while-in1
     (block $while-out0
      (if
       (i32.eqz
        (i32.le_s
         (local.get $ptr)
         (local.get $block_aligned_end)
        )
       )
       (br $while-out0)
      )
      (block
       (i32.store
        (local.get $ptr)
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 4)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 8)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 12)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 16)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 20)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 24)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 28)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 32)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 36)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 40)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 44)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 48)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 52)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 56)
        )
        (local.get $value4)
       )
       (i32.store
        (i32.add
         (local.get $ptr)
         (i32.const 60)
        )
        (local.get $value4)
       )
       (local.set $ptr
        (i32.add
         (local.get $ptr)
         (i32.const 64)
        )
       )
      )
      (br $while-in1)
     )
    )
    (loop $while-in3
     (block $while-out2
      (if
       (i32.eqz
        (i32.lt_s
         (local.get $ptr)
         (local.get $aligned_end)
        )
       )
       (br $while-out2)
      )
      (block
       (i32.store
        (local.get $ptr)
        (local.get $value4)
       )
       (local.set $ptr
        (i32.add
         (local.get $ptr)
         (i32.const 4)
        )
       )
      )
      (br $while-in3)
     )
    )
   )
  )
  (loop $while-in5
   (block $while-out4
    (if
     (i32.eqz
      (i32.lt_s
       (local.get $ptr)
       (local.get $end)
      )
     )
     (br $while-out4)
    )
    (block
     (i32.store8
      (local.get $ptr)
      (local.get $value)
     )
     (local.set $ptr
      (i32.add
       (local.get $ptr)
       (i32.const 1)
      )
     )
    )
    (br $while-in5)
   )
  )
  (return
   (i32.sub
    (local.get $end)
    (local.get $num)
   )
  )
 )
 (func $_sbrk (; 38 ;) (param $increment i32) (result i32)
  (local $oldDynamicTop i32)
  (local $oldDynamicTopOnChange i32)
  (local $newDynamicTop i32)
  (local $totalMemory i32)
  (local.set $totalMemory
   (call $_emscripten_get_heap_size)
  )
  (local.set $oldDynamicTop
   (i32.load
    (global.get $DYNAMICTOP_PTR)
   )
  )
  (local.set $newDynamicTop
   (i32.add
    (local.get $oldDynamicTop)
    (local.get $increment)
   )
  )
  (if
   (i32.or
    (i32.and
     (i32.gt_s
      (local.get $increment)
      (i32.const 0)
     )
     (i32.lt_s
      (local.get $newDynamicTop)
      (local.get $oldDynamicTop)
     )
    )
    (i32.lt_s
     (local.get $newDynamicTop)
     (i32.const 0)
    )
   )
   (block
    (drop
     (call $abortOnCannotGrowMemory
      (local.get $newDynamicTop)
     )
    )
    (call $___setErrNo
     (i32.const 12)
    )
    (return
     (i32.const -1)
    )
   )
  )
  (if
   (i32.gt_s
    (local.get $newDynamicTop)
    (local.get $totalMemory)
   )
   (if
    (call $_emscripten_resize_heap
     (local.get $newDynamicTop)
    )
    (nop)
    (block
     (call $___setErrNo
      (i32.const 12)
     )
     (return
      (i32.const -1)
     )
    )
   )
  )
  (i32.store
   (global.get $DYNAMICTOP_PTR)
   (local.get $newDynamicTop)
  )
  (return
   (local.get $oldDynamicTop)
  )
 )
 (func $dynCall_ii (; 39 ;) (param $index i32) (param $a1 i32) (result i32)
  (return
   (call_indirect (type $FUNCSIG$ii)
    (local.get $a1)
    (i32.add
     (i32.and
      (local.get $index)
      (i32.const 1)
     )
     (i32.const 0)
    )
   )
  )
 )
 (func $dynCall_iiii (; 40 ;) (param $index i32) (param $a1 i32) (param $a2 i32) (param $a3 i32) (result i32)
  (return
   (call_indirect (type $FUNCSIG$iiii)
    (local.get $a1)
    (local.get $a2)
    (local.get $a3)
    (i32.add
     (i32.and
      (local.get $index)
      (i32.const 3)
     )
     (i32.const 2)
    )
   )
  )
 )
 (func $dynCall_jiji (; 41 ;) (param $index i32) (param $a1 i32) (param $a2 i64) (param $a3 i32) (result i64)
  (return
   (call_indirect (type $FUNCSIG$jiji)
    (local.get $a1)
    (local.get $a2)
    (local.get $a3)
    (i32.add
     (i32.and
      (local.get $index)
      (i32.const 3)
     )
     (i32.const 6)
    )
   )
  )
 )
 (func $b0 (; 42 ;) (param $p0 i32) (result i32)
  (call $nullFunc_ii
   (i32.const 0)
  )
  (return
   (i32.const 0)
  )
 )
 (func $b1 (; 43 ;) (param $p0 i32) (param $p1 i32) (param $p2 i32) (result i32)
  (call $nullFunc_iiii
   (i32.const 1)
  )
  (return
   (i32.const 0)
  )
 )
 (func $b2 (; 44 ;) (param $p0 i32) (param $p1 i64) (param $p2 i32) (result i64)
  (call $nullFunc_jiji
   (i32.const 2)
  )
  (return
   (i64.const 0)
  )
 )
 (func $legalstub$dynCall_jiji (; 45 ;) (param $0 i32) (param $1 i32) (param $2 i32) (param $3 i32) (param $4 i32) (result i32)
  (local $5 i64)
  (local.set $5
   (call $dynCall_jiji
    (local.get $0)
    (local.get $1)
    (i64.or
     (i64.extend_i32_u
      (local.get $2)
     )
     (i64.shl
      (i64.extend_i32_u
       (local.get $3)
      )
      (i64.const 32)
     )
    )
    (local.get $4)
   )
  )
  (call $setTempRet0
   (i32.wrap_i64
    (i64.shr_u
     (local.get $5)
     (i64.const 32)
    )
   )
  )
  (i32.wrap_i64
   (local.get $5)
  )
 )
)
conftest.c:74:6: warning: incompatible redeclaration of library function 'cos' [-Wincompatible-library-redeclaration]
char cos ();
     ^
conftest.c:74:6: note: 'cos' is a builtin with type 'double (double)'
1 warning generated.
[0;33mwarning:[0m unexpected number of arguments 0 in call to 'cos', should be 1
[0;33mwarning:[0m unexpected return type i8 in call to 'cos', should be double
warning: asm2wasm adding operands in call from $_main to $_cos (this is likely due to undefined behavior in C, like defining a function one way and calling it in another, which is important to fix)
[wasm-validator error in function $_main] 1 != 4: local.set type must match function, on 
[none] (local.set $1
 [f64] (call $_cos
  [f64] (f64.const 0)
 )
)
Fatal: error in validating output
shared:ERROR: '/emsdk_portable/binaryen/tag-1.38.45_64bit_binaryen/bin/asm2wasm conftest.temp.asm.js --total-memory=16777216 --trap-mode=allow --mem-init=conftest.js.mem --mem-base=1024 --wasm-only -o conftest.wasm --mvp-features' failed (1)
configure:16241: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char cos ();
| int
| main ()
| {
| return cos ();
|   ;
|   return 0;
| }
configure:16250: result: no
configure:16256: checking for cos in -lffm
configure:16281: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c -lffm   >&5
shared:ERROR: emcc: cannot find library "ffm"
configure:16281: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char cos ();
| int
| main ()
| {
| return cos ();
|   ;
|   return 0;
| }
configure:16290: result: no
configure:16304: checking for cos in -lcpml
configure:16329: /emsdk_portable/emscripten/tag-1.38.45/emcc -o conftest    conftest.c -lcpml   >&5
shared:ERROR: emcc: cannot find library "cpml"
configure:16329: $? = 1
configure: failed program was:
| /* confdefs.h */
| #define PACKAGE_NAME "lame"
| #define PACKAGE_TARNAME "lame"
| #define PACKAGE_VERSION "3.100"
| #define PACKAGE_STRING "lame 3.100"
| #define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
| #define PACKAGE_URL ""
| #define PACKAGE "lame"
| #define VERSION "3.100"
| #define STDC_HEADERS 1
| #define HAVE_SYS_TYPES_H 1
| #define HAVE_SYS_STAT_H 1
| #define HAVE_STDLIB_H 1
| #define HAVE_STRING_H 1
| #define HAVE_MEMORY_H 1
| #define HAVE_STRINGS_H 1
| #define HAVE_INTTYPES_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_UNISTD_H 1
| #define __EXTENSIONS__ 1
| #define _ALL_SOURCE 1
| #define _GNU_SOURCE 1
| #define _POSIX_PTHREAD_SEMANTICS 1
| #define _TANDEM_SOURCE 1
| #define HAVE_DLFCN_H 1
| #define LT_OBJDIR ".libs/"
| #define STDC_HEADERS 1
| #define HAVE_ERRNO_H 1
| #define HAVE_FCNTL_H 1
| #define HAVE_LIMITS_H 1
| #define HAVE_STDINT_H 1
| #define HAVE_STRING_H 1
| #define HAVE_SYS_TIME_H 1
| #define HAVE_UNISTD_H 1
| #define SIZEOF_SHORT 2
| #define SIZEOF_UNSIGNED_SHORT 2
| #define SIZEOF_INT 4
| #define SIZEOF_UNSIGNED_INT 4
| #define SIZEOF_LONG 4
| #define SIZEOF_UNSIGNED_LONG 4
| #define SIZEOF_LONG_LONG 8
| #define SIZEOF_UNSIGNED_LONG_LONG 8
| #define SIZEOF_FLOAT 4
| #define SIZEOF_DOUBLE 8
| #define HAVE_UINT8_T 1
| #define HAVE_INT8_T 1
| #define HAVE_UINT16_T 1
| #define HAVE_INT16_T 1
| #define HAVE_UINT32_T 1
| #define HAVE_INT32_T 1
| #define HAVE_UINT64_T 1
| #define HAVE_INT64_T 1
| #define A_UINT32_T unsigned int
| #define A_INT32_T int
| #define A_UINT64_T unsigned long long
| #define A_INT64_T long long
| #define LAME_LIBRARY_BUILD 1
| #define TIME_WITH_SYS_TIME 1
| #define HAVE_ALLOCA_H 1
| #define HAVE_ALLOCA 1
| #define HAVE_GETTIMEOFDAY 1
| #define HAVE_STRTOL 1
| #define HAVE_SOCKET 1
| #define HAVE_ICONV 1
| #define ICONV_CONST 
| /* end confdefs.h.  */
| 
| /* Override any GCC internal prototype to avoid an error.
|    Use char because int might match the return type of a GCC
|    builtin and then its argument prototype would still apply.  */
| #ifdef __cplusplus
| extern "C"
| #endif
| char cos ();
| int
| main ()
| {
| return cos ();
|   ;
|   return 0;
| }
configure:16338: result: no
configure:16396: checking for gtk-config
configure:16427: result: no
configure:16436: checking for GTK - version >= 1.2.0
configure:16555: result: no
configure:16619: checking use of ElectricFence malloc debugging
configure:16684: result: no
configure:16897: checking use of file io
configure:16926: result: lame
configure:16934: checking use of analyzer hooks
configure:16956: result: yes
configure:16960: checking use of mpg123 decoder
configure:16988: result: yes (Layer 1, 2, 3)
configure:16992: checking if the lame frontend should be build
configure:17003: result: yes
configure:17013: checking if mp3x is requested
configure:17028: result: no
configure:17045: checking if mp3rtp is requested
configure:17063: result: no
configure:17067: checking if dynamic linking of the frontends is requested
configure:17078: result: no
configure:17178: checking for termcap
configure:17189: result: no
configure:17261: checking if I have to build the internal vector lib
configure:17263: result: no
configure:17269: checking for nasm
configure:17300: result: no
configure:17372: checking for additional optimizations
configure:17603: result: no
configure:17611: checking for debug options
configure:17659: result: no
configure:17967: checking that generated files are newer than configure
configure:17973: result: done
configure:18021: creating ./config.status

## ---------------------- ##
## Running config.status. ##
## ---------------------- ##

This file was extended by lame config.status 3.100, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = 
  CONFIG_HEADERS  = 
  CONFIG_LINKS    = 
  CONFIG_COMMANDS = 
  $ ./config.status 

on e83452b16e67

config.status:1194: creating Makefile
config.status:1194: creating libmp3lame/Makefile
config.status:1194: creating libmp3lame/i386/Makefile
config.status:1194: creating libmp3lame/vector/Makefile
config.status:1194: creating frontend/Makefile
config.status:1194: creating mpglib/Makefile
config.status:1194: creating doc/Makefile
config.status:1194: creating doc/html/Makefile
config.status:1194: creating doc/man/Makefile
config.status:1194: creating include/Makefile
config.status:1194: creating Dll/Makefile
config.status:1194: creating misc/Makefile
config.status:1194: creating dshow/Makefile
config.status:1194: creating ACM/Makefile
config.status:1194: creating ACM/ADbg/Makefile
config.status:1194: creating ACM/ddk/Makefile
config.status:1194: creating ACM/tinyxml/Makefile
config.status:1194: creating lame.spec
config.status:1194: creating mac/Makefile
config.status:1194: creating macosx/Makefile
config.status:1194: creating macosx/English.lproj/Makefile
config.status:1194: creating macosx/LAME.xcodeproj/Makefile
config.status:1194: creating vc_solution/Makefile
config.status:1194: creating config.h
config.status:1375: config.h is unchanged
config.status:1423: executing depfiles commands
config.status:1423: executing libtool commands

## ---------------- ##
## Cache variables. ##
## ---------------- ##

ac_cv_build=x86_64-unknown-linux-gnu
ac_cv_c_bigendian=no
ac_cv_c_compiler_gnu=yes
ac_cv_c_const=yes
ac_cv_c_inline=inline
ac_cv_c_long_double=no
ac_cv_env_CC_set=set
ac_cv_env_CC_value=/emsdk_portable/emscripten/tag-1.38.45/emcc
ac_cv_env_CFLAGS_set=
ac_cv_env_CFLAGS_value=
ac_cv_env_CPPFLAGS_set=
ac_cv_env_CPPFLAGS_value=
ac_cv_env_CPP_set=
ac_cv_env_CPP_value=
ac_cv_env_LDFLAGS_set=
ac_cv_env_LDFLAGS_value=
ac_cv_env_LIBS_set=
ac_cv_env_LIBS_value=
ac_cv_env_LT_SYS_LIBRARY_PATH_set=
ac_cv_env_LT_SYS_LIBRARY_PATH_value=
ac_cv_env_PKG_CONFIG_LIBDIR_set=set
ac_cv_env_PKG_CONFIG_LIBDIR_value=/emsdk_portable/emscripten/tag-1.38.45/system/local/lib/pkgconfig:/emsdk_portable/emscripten/tag-1.38.45/system/lib/pkgconfig
ac_cv_env_PKG_CONFIG_PATH_set=set
ac_cv_env_PKG_CONFIG_PATH_value=
ac_cv_env_PKG_CONFIG_set=
ac_cv_env_PKG_CONFIG_value=
ac_cv_env_SNDFILE_CFLAGS_set=
ac_cv_env_SNDFILE_CFLAGS_value=
ac_cv_env_SNDFILE_LIBS_set=
ac_cv_env_SNDFILE_LIBS_value=
ac_cv_env_build_alias_set=
ac_cv_env_build_alias_value=
ac_cv_env_host_alias_set=
ac_cv_env_host_alias_value=
ac_cv_env_target_alias_set=
ac_cv_env_target_alias_value=
ac_cv_func_alloca_works=yes
ac_cv_func_gettimeofday=yes
ac_cv_func_socket=yes
ac_cv_func_strtol=yes
ac_cv_header_dlfcn_h=yes
ac_cv_header_dmalloc_h=no
ac_cv_header_errno_h=yes
ac_cv_header_fcntl_h=yes
ac_cv_header_inttypes_h=yes
ac_cv_header_limits_h=yes
ac_cv_header_linux_soundcard_h=no
ac_cv_header_memory_h=yes
ac_cv_header_minix_config_h=no
ac_cv_header_ncurses_termcap_h=no
ac_cv_header_stdc=yes
ac_cv_header_stdint_h=yes
ac_cv_header_stdlib_h=yes
ac_cv_header_string_h=yes
ac_cv_header_strings_h=yes
ac_cv_header_sys_soundcard_h=no
ac_cv_header_sys_stat_h=yes
ac_cv_header_sys_time_h=yes
ac_cv_header_sys_types_h=yes
ac_cv_header_termcap_h=no
ac_cv_header_time=yes
ac_cv_header_unistd_h=yes
ac_cv_header_xmmintrin_h=no
ac_cv_host=x86_64-unknown-linux-gnu
ac_cv_lib_cpml_cos=no
ac_cv_lib_curses_initscr=no
ac_cv_lib_ffm_cos=no
ac_cv_lib_m_cos=no
ac_cv_lib_ncurses_initscr=no
ac_cv_lib_termcap_initscr=no
ac_cv_objext=o
ac_cv_path_EGREP='/bin/grep -E'
ac_cv_path_FGREP='/bin/grep -F'
ac_cv_path_GREP=/bin/grep
ac_cv_path_GTK_CONFIG=no
ac_cv_path_NASM=no
ac_cv_path_SED=/bin/sed
ac_cv_path_install='/usr/bin/install -c'
ac_cv_path_lt_DD=/bin/dd
ac_cv_path_mkdir=/bin/mkdir
ac_cv_prog_AWK=mawk
ac_cv_prog_CPP='/emsdk_portable/emscripten/tag-1.38.45/emcc -E'
ac_cv_prog_ac_ct_CC=/emsdk_portable/emscripten/tag-1.38.45/emcc
ac_cv_prog_ac_ct_OBJDUMP=objdump
ac_cv_prog_ac_ct_RANLIB=/emsdk_portable/emscripten/tag-1.38.45/emranlib
ac_cv_prog_ac_ct_STRIP=strip
ac_cv_prog_cc_c89=
ac_cv_prog_cc_g=yes
ac_cv_prog_make_make_set=yes
ac_cv_safe_to_define___extensions__=yes
ac_cv_search_strerror='none required'
ac_cv_sizeof_double=8
ac_cv_sizeof_float=4
ac_cv_sizeof_int=4
ac_cv_sizeof_long=4
ac_cv_sizeof_long_long=8
ac_cv_sizeof_short=2
ac_cv_sizeof_unsigned_int=4
ac_cv_sizeof_unsigned_long=4
ac_cv_sizeof_unsigned_long_long=8
ac_cv_sizeof_unsigned_short=2
ac_cv_sys_file_offset_bits=no
ac_cv_sys_largefile_CC=no
ac_cv_type_ieee754_float32_t=no
ac_cv_type_ieee754_float64_t=no
ac_cv_type_int16_t=yes
ac_cv_type_int32_t=yes
ac_cv_type_int64_t=yes
ac_cv_type_int8_t=yes
ac_cv_type_long_double_wider=no
ac_cv_type_size_t=yes
ac_cv_type_uint16_t=yes
ac_cv_type_uint32_t=yes
ac_cv_type_uint64_t=yes
ac_cv_type_uint8_t=yes
ac_cv_working_alloca_h=yes
acl_cv_hardcode_direct=no
acl_cv_hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'
acl_cv_hardcode_libdir_separator=
acl_cv_hardcode_minus_L=no
acl_cv_libext=a
acl_cv_libname_spec='lib$name'
acl_cv_library_names_spec='$libname$shrext'
acl_cv_path_LD=/emsdk_portable/emscripten/tag-1.38.45/emcc
acl_cv_prog_gnu_ld=yes
acl_cv_rpath=done
acl_cv_shlibext=so
acl_cv_wl=-Wl,
alex_cv_ieee854_float80=yes
am_cv_CC_dependencies_compiler_type=gcc3
am_cv_func_iconv=yes
am_cv_func_iconv_works=yes
am_cv_lib_iconv=no
am_cv_make_support_nested_variables=yes
am_cv_prog_cc_c_o=yes
am_cv_proto_iconv='extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);'
am_cv_proto_iconv_arg1=
lt_cv_ar_at_file=@
lt_cv_archive_cmds_need_lc=yes
lt_cv_deplibs_check_method=pass_all
lt_cv_file_magic_cmd='$MAGIC_CMD'
lt_cv_file_magic_test_file=
lt_cv_ld_reload_flag=-r
lt_cv_nm_interface='BSD nm'
lt_cv_objdir=.libs
lt_cv_path_LD=/emsdk_portable/emscripten/tag-1.38.45/emcc
lt_cv_path_NM=/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-nm
lt_cv_path_mainfest_tool=no
lt_cv_prog_compiler_c_o=yes
lt_cv_prog_compiler_pic='-fPIC -DPIC'
lt_cv_prog_compiler_pic_works=yes
lt_cv_prog_compiler_rtti_exceptions=yes
lt_cv_prog_compiler_static_works=yes
lt_cv_prog_gnu_ld=yes
lt_cv_sharedlib_from_linklib_cmd='printf %s\n'
lt_cv_shlibpath_overrides_runpath=no
lt_cv_sys_global_symbol_pipe='sed -n -e '\''s/^.*[	 ]\([BCDEGRST][BCDEGRST]*\)[	 ][	 ]*\([_A-Za-z][_A-Za-z0-9]*\)$/\1 \2 \2/p'\'' | sed '\''/ __gnu_lto/d'\'''
lt_cv_sys_global_symbol_to_c_name_address='sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[BCDEGRST][BCDEGRST]* .* \(.*\)$/  {"\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='sed -n -e '\''s/^: \(.*\) .*$/  {"\1", (void *) 0},/p'\'' -e '\''s/^[BCDEGRST][BCDEGRST]* .* \(lib.*\)$/  {"\1", (void *) \&\1},/p'\'' -e '\''s/^[BCDEGRST][BCDEGRST]* .* \(.*\)$/  {"lib\1", (void *) \&\1},/p'\'''
lt_cv_sys_global_symbol_to_cdecl='sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[BCDEGRST][BCDEGRST]* .* \(.*\)$/extern char \1;/p'\'''
lt_cv_sys_global_symbol_to_import=
lt_cv_sys_max_cmd_len=1572864
lt_cv_to_host_file_cmd=func_convert_file_noop
lt_cv_to_tool_file_cmd=func_convert_file_noop
lt_cv_truncate_bin='/bin/dd bs=4096 count=1'

## ----------------- ##
## Output variables. ##
## ----------------- ##

ACLOCAL='${SHELL} /src/lame-3.100/missing aclocal-1.15'
ALLOCA=''
AMDEPBACKSLASH='\'
AMDEP_FALSE='#'
AMDEP_TRUE=''
AMTAR='$${TAR-tar}'
AM_BACKSLASH='\'
AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
AM_DEFAULT_VERBOSITY='1'
AM_V='$(V)'
AR='/emsdk_portable/emscripten/tag-1.38.45/emar'
AUTOCONF='${SHELL} /src/lame-3.100/missing autoconf'
AUTOHEADER='${SHELL} /src/lame-3.100/missing autoheader'
AUTOMAKE='${SHELL} /src/lame-3.100/missing automake-1.15'
AWK='mawk'
CC='/emsdk_portable/emscripten/tag-1.38.45/emcc'
CCDEPMODE='depmode=gcc3'
CFLAGS=' '
CONFIG_DEFS=''
CONFIG_MATH_LIB=''
CPP='/emsdk_portable/emscripten/tag-1.38.45/emcc -E'
CPPFLAGS=''
CPUCCODE=''
CPUTYPE='no'
CYGPATH_W='echo'
DEFS='-DHAVE_CONFIG_H'
DEPDIR='.deps'
DLLTOOL='false'
DSYMUTIL=''
DUMPBIN=''
ECHO_C=''
ECHO_N='-n'
ECHO_T=''
EGREP='/bin/grep -E'
EXEEXT=''
FGREP='/bin/grep -F'
FRONTEND_CFLAGS=' '
FRONTEND_LDADD='  '
FRONTEND_LDFLAGS=' -static'
GREP='/bin/grep'
GTK_CFLAGS=''
GTK_CONFIG='no'
GTK_LIBS=''
HAVE_NASM_FALSE=''
HAVE_NASM_TRUE='#'
INCLUDES='-I$(top_srcdir)/include -I$(srcdir)'
INSTALL_DATA='${INSTALL} -m 644'
INSTALL_PROGRAM='${INSTALL}'
INSTALL_SCRIPT='${INSTALL}'
INSTALL_STRIP_PROGRAM='$(install_sh) -c -s'
LD='/emsdk_portable/emscripten/tag-1.38.45/emcc'
LDADD=''
LDFLAGS=''
LIBICONV=''
LIBOBJS=''
LIBS=''
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
LIBTOOL_DEPS='./ltmain.sh'
LIB_MAJOR_VERSION='0'
LIB_MINOR_VERSION='0'
LIB_WITH_DECODER_FALSE='#'
LIB_WITH_DECODER_TRUE=''
LIPO=''
LN_S='ln -s'
LTLIBICONV=''
LTLIBOBJS=''
LT_SYS_LIBRARY_PATH=''
MAINT='#'
MAINTAINER_MODE_FALSE=''
MAINTAINER_MODE_TRUE='#'
MAKEDEP='-M'
MAKEINFO='${SHELL} /src/lame-3.100/missing makeinfo'
MANIFEST_TOOL=':'
MKDIR_P='/bin/mkdir -p'
NASM='no'
NASM_FORMAT='-f elf'
NM='/emsdk_portable/clang/tag-e1.38.45/build_tag-e1.38.45_64/bin/llvm-nm'
NMEDIT=''
OBJDUMP='objdump'
OBJEXT='o'
OTOOL64=''
OTOOL=''
PACKAGE='lame'
PACKAGE_BUGREPORT='lame-dev@lists.sf.net'
PACKAGE_NAME='lame'
PACKAGE_STRING='lame 3.100'
PACKAGE_TARNAME='lame'
PACKAGE_URL=''
PACKAGE_VERSION='3.100'
PATH_SEPARATOR=':'
PKG_CONFIG=''
PKG_CONFIG_LIBDIR='/emsdk_portable/emscripten/tag-1.38.45/system/local/lib/pkgconfig:/emsdk_portable/emscripten/tag-1.38.45/system/lib/pkgconfig'
PKG_CONFIG_PATH=''
RANLIB='/emsdk_portable/emscripten/tag-1.38.45/emranlib'
RM_F='rm -f'
SED='/bin/sed'
SET_MAKE=''
SHELL='/bin/bash'
SNDFILE_CFLAGS=''
SNDFILE_LIBS=''
STRIP='strip'
VERSION='3.100'
WITH_FRONTEND='lame'
WITH_MP3RTP=''
WITH_MP3X=''
WITH_VECTOR_FALSE=''
WITH_VECTOR_TRUE='#'
WITH_XMM_FALSE=''
WITH_XMM_TRUE='#'
ac_ct_AR=''
ac_ct_CC='/emsdk_portable/emscripten/tag-1.38.45/emcc'
ac_ct_DUMPBIN=''
am__EXEEXT_FALSE=''
am__EXEEXT_TRUE='#'
am__fastdepCC_FALSE='#'
am__fastdepCC_TRUE=''
am__include='include'
am__isrc=''
am__leading_dot='.'
am__nodep='_no'
am__quote=''
am__tar='$${TAR-tar} chof - "$$tardir"'
am__untar='$${TAR-tar} xf -'
bindir='${exec_prefix}/bin'
build='x86_64-unknown-linux-gnu'
build_alias=''
build_cpu='x86_64'
build_os='linux-gnu'
build_vendor='unknown'
datadir='${datarootdir}'
datarootdir='${prefix}/share'
docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
dvidir='${docdir}'
exec_prefix='${prefix}'
host='x86_64-unknown-linux-gnu'
host_alias=''
host_cpu='x86_64'
host_os='linux-gnu'
host_vendor='unknown'
htmldir='${docdir}'
includedir='${prefix}/include'
infodir='${datarootdir}/info'
install_sh='${SHELL} /src/lame-3.100/install-sh'
libdir='${exec_prefix}/lib'
libexecdir='${exec_prefix}/libexec'
localedir='${datarootdir}/locale'
localstatedir='${prefix}/var'
mandir='${datarootdir}/man'
mkdir_p='$(MKDIR_P)'
oldincludedir='/usr/include'
pdfdir='${docdir}'
prefix='/src/lame-3.100/../build'
program_transform_name='s,x,x,'
psdir='${docdir}'
sbindir='${exec_prefix}/sbin'
sharedstatedir='${prefix}/com'
sysconfdir='${prefix}/etc'
target_alias=''

## ----------- ##
## confdefs.h. ##
## ----------- ##

/* confdefs.h */
#define PACKAGE_NAME "lame"
#define PACKAGE_TARNAME "lame"
#define PACKAGE_VERSION "3.100"
#define PACKAGE_STRING "lame 3.100"
#define PACKAGE_BUGREPORT "lame-dev@lists.sf.net"
#define PACKAGE_URL ""
#define PACKAGE "lame"
#define VERSION "3.100"
#define STDC_HEADERS 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_SYS_STAT_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRING_H 1
#define HAVE_MEMORY_H 1
#define HAVE_STRINGS_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_STDINT_H 1
#define HAVE_UNISTD_H 1
#define __EXTENSIONS__ 1
#define _ALL_SOURCE 1
#define _GNU_SOURCE 1
#define _POSIX_PTHREAD_SEMANTICS 1
#define _TANDEM_SOURCE 1
#define HAVE_DLFCN_H 1
#define LT_OBJDIR ".libs/"
#define STDC_HEADERS 1
#define HAVE_ERRNO_H 1
#define HAVE_FCNTL_H 1
#define HAVE_LIMITS_H 1
#define HAVE_STDINT_H 1
#define HAVE_STRING_H 1
#define HAVE_SYS_TIME_H 1
#define HAVE_UNISTD_H 1
#define SIZEOF_SHORT 2
#define SIZEOF_UNSIGNED_SHORT 2
#define SIZEOF_INT 4
#define SIZEOF_UNSIGNED_INT 4
#define SIZEOF_LONG 4
#define SIZEOF_UNSIGNED_LONG 4
#define SIZEOF_LONG_LONG 8
#define SIZEOF_UNSIGNED_LONG_LONG 8
#define SIZEOF_FLOAT 4
#define SIZEOF_DOUBLE 8
#define HAVE_UINT8_T 1
#define HAVE_INT8_T 1
#define HAVE_UINT16_T 1
#define HAVE_INT16_T 1
#define HAVE_UINT32_T 1
#define HAVE_INT32_T 1
#define HAVE_UINT64_T 1
#define HAVE_INT64_T 1
#define A_UINT32_T unsigned int
#define A_INT32_T int
#define A_UINT64_T unsigned long long
#define A_INT64_T long long
#define LAME_LIBRARY_BUILD 1
#define TIME_WITH_SYS_TIME 1
#define HAVE_ALLOCA_H 1
#define HAVE_ALLOCA 1
#define HAVE_GETTIMEOFDAY 1
#define HAVE_STRTOL 1
#define HAVE_SOCKET 1
#define HAVE_ICONV 1
#define ICONV_CONST 
#define HAVE_MPGLIB 1
#define DECODE_ON_THE_FLY 1
#define TAKEHIRO_IEEE754_HACK 1
#define USE_FAST_LOG 1

configure: exit 0
